
PomodoroT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800a430  0800a430  0000b430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a47c  0800a47c  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a47c  0800a47c  0000b47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a484  0800a484  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0000b484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a488  0800a488  0000b488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a48c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b88  2000007c  0800a508  0000c07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c04  0800a508  0000cc04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d93f  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004384  00000000  00000000  000299eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  0002dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012cc  00000000  00000000  0002f5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a7ac  00000000  00000000  0003089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff05  00000000  00000000  0005b048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9a81  00000000  00000000  0007af4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001749ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069c0  00000000  00000000  00174a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0017b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a418 	.word	0x0800a418

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a418 	.word	0x0800a418

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 ff8a 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f820 	bl	8000504 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c4:	f000 f882 	bl	80005cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 faa2 	bl	8000a10 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004cc:	f000 f8ac 	bl	8000628 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004d0:	f000 f8ea 	bl	80006a8 <MX_I2C2_Init>
  MX_LCD_Init();
 80004d4:	f000 f928 	bl	8000728 <MX_LCD_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f95e 	bl	8000798 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 80004dc:	f000 f982 	bl	80007e4 <MX_SAI1_Init>
  MX_SPI2_Init();
 80004e0:	f000 fa28 	bl	8000934 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 fa64 	bl	80009b0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80004e8:	f009 fb3a 	bl	8009b60 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004ec:	f009 fb5e 	bl	8009bac <MX_USB_HOST_Process>
    /* USER CODE BEGIN 3 */

    //Timer is off, Program is running
    HAL_GPIO_WritePin(LD_R_GPIO_Port,LD_R_Pin,GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2104      	movs	r1, #4
 80004f4:	4802      	ldr	r0, [pc, #8]	@ (8000500 <main+0x48>)
 80004f6:	f001 fac9 	bl	8001a8c <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80004fa:	bf00      	nop
 80004fc:	e7f6      	b.n	80004ec <main+0x34>
 80004fe:	bf00      	nop
 8000500:	48000400 	.word	0x48000400

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b096      	sub	sp, #88	@ 0x58
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2244      	movs	r2, #68	@ 0x44
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f009 fef2 	bl	800a2fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	463b      	mov	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000526:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800052a:	f003 f9c7 	bl	80038bc <HAL_PWREx_ControlVoltageScaling>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000534:	f000 fbaa 	bl	8000c8c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000538:	f003 f9a2 	bl	8003880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <SystemClock_Config+0xc4>)
 800053e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000542:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <SystemClock_Config+0xc4>)
 8000544:	f023 0318 	bic.w	r3, r3, #24
 8000548:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800054c:	231c      	movs	r3, #28
 800054e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000560:	2360      	movs	r3, #96	@ 0x60
 8000562:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000568:	2301      	movs	r3, #1
 800056a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800056c:	2301      	movs	r3, #1
 800056e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000570:	2314      	movs	r3, #20
 8000572:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	2307      	movs	r3, #7
 8000576:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000578:	2302      	movs	r3, #2
 800057a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800057c:	2302      	movs	r3, #2
 800057e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4618      	mov	r0, r3
 8000586:	f003 fabb 	bl	8003b00 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000590:	f000 fb7c 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2303      	movs	r3, #3
 800059a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005a8:	463b      	mov	r3, r7
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fe83 	bl	80042b8 <HAL_RCC_ClockConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005b8:	f000 fb68 	bl	8000c8c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005bc:	f005 f8f8 	bl	80057b0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c0:	bf00      	nop
 80005c2:	3758      	adds	r7, #88	@ 0x58
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40021000 	.word	0x40021000

080005cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b0a2      	sub	sp, #136	@ 0x88
 80005d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d2:	463b      	mov	r3, r7
 80005d4:	2288      	movs	r2, #136	@ 0x88
 80005d6:	2100      	movs	r1, #0
 80005d8:	4618      	mov	r0, r3
 80005da:	f009 fe8f 	bl	800a2fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 80005de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80005e2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	667b      	str	r3, [r7, #100]	@ 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80005e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80005ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80005ee:	2301      	movs	r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80005f6:	2318      	movs	r3, #24
 80005f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005fe:	2302      	movs	r3, #2
 8000600:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 8000606:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800060a:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	463b      	mov	r3, r7
 800060e:	4618      	mov	r0, r3
 8000610:	f004 f876 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800061a:	f000 fb37 	bl	8000c8c <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3788      	adds	r7, #136	@ 0x88
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1b      	ldr	r3, [pc, #108]	@ (800069c <MX_I2C1_Init+0x74>)
 800062e:	4a1c      	ldr	r2, [pc, #112]	@ (80006a0 <MX_I2C1_Init+0x78>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 8000632:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_I2C1_Init+0x74>)
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <MX_I2C1_Init+0x7c>)
 8000636:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000638:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_I2C1_Init+0x74>)
 8000640:	2201      	movs	r2, #1
 8000642:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_I2C1_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_I2C1_Init+0x74>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_I2C1_Init+0x74>)
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_I2C1_Init+0x74>)
 8000658:	2200      	movs	r2, #0
 800065a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065c:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_I2C1_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <MX_I2C1_Init+0x74>)
 8000664:	f002 fef8 	bl	8003458 <HAL_I2C_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 fb0d 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000672:	2100      	movs	r1, #0
 8000674:	4809      	ldr	r0, [pc, #36]	@ (800069c <MX_I2C1_Init+0x74>)
 8000676:	f002 ff8a 	bl	800358e <HAL_I2CEx_ConfigAnalogFilter>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000680:	f000 fb04 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_I2C1_Init+0x74>)
 8000688:	f002 ffcc 	bl	8003624 <HAL_I2CEx_ConfigDigitalFilter>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fafb 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000098 	.word	0x20000098
 80006a0:	40005400 	.word	0x40005400
 80006a4:	00404c74 	.word	0x00404c74

080006a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_I2C2_Init+0x74>)
 80006ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000720 <MX_I2C2_Init+0x78>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_I2C2_Init+0x74>)
 80006b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <MX_I2C2_Init+0x7c>)
 80006b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_I2C2_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006be:	4b17      	ldr	r3, [pc, #92]	@ (800071c <MX_I2C2_Init+0x74>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b15      	ldr	r3, [pc, #84]	@ (800071c <MX_I2C2_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ca:	4b14      	ldr	r3, [pc, #80]	@ (800071c <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <MX_I2C2_Init+0x74>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_I2C2_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <MX_I2C2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e2:	480e      	ldr	r0, [pc, #56]	@ (800071c <MX_I2C2_Init+0x74>)
 80006e4:	f002 feb8 	bl	8003458 <HAL_I2C_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006ee:	f000 facd 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	4809      	ldr	r0, [pc, #36]	@ (800071c <MX_I2C2_Init+0x74>)
 80006f6:	f002 ff4a 	bl	800358e <HAL_I2CEx_ConfigAnalogFilter>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000700:	f000 fac4 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_I2C2_Init+0x74>)
 8000708:	f002 ff8c 	bl	8003624 <HAL_I2CEx_ConfigDigitalFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000712:	f000 fabb 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000ec 	.word	0x200000ec
 8000720:	40005800 	.word	0x40005800
 8000724:	00404c74 	.word	0x00404c74

08000728 <MX_LCD_Init>:
  * @brief LCD Initialization Function
  * @param None
  * @retval None
  */
static void MX_LCD_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END LCD_Init 0 */

  /* USER CODE BEGIN LCD_Init 1 */

  /* USER CODE END LCD_Init 1 */
  hlcd.Instance = LCD;
 800072c:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <MX_LCD_Init+0x68>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <MX_LCD_Init+0x6c>)
 8000730:	601a      	str	r2, [r3, #0]
  hlcd.Init.Prescaler = LCD_PRESCALER_1;
 8000732:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_LCD_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hlcd.Init.Divider = LCD_DIVIDER_16;
 8000738:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <MX_LCD_Init+0x68>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hlcd.Init.Duty = LCD_DUTY_1_4;
 800073e:	4b14      	ldr	r3, [pc, #80]	@ (8000790 <MX_LCD_Init+0x68>)
 8000740:	220c      	movs	r2, #12
 8000742:	60da      	str	r2, [r3, #12]
  hlcd.Init.Bias = LCD_BIAS_1_4;
 8000744:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <MX_LCD_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hlcd.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 800074a:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <MX_LCD_Init+0x68>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hlcd.Init.Contrast = LCD_CONTRASTLEVEL_0;
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_LCD_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hlcd.Init.DeadTime = LCD_DEADTIME_0;
 8000756:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_LCD_Init+0x68>)
 8000758:	2200      	movs	r2, #0
 800075a:	61da      	str	r2, [r3, #28]
  hlcd.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 800075c:	4b0c      	ldr	r3, [pc, #48]	@ (8000790 <MX_LCD_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	621a      	str	r2, [r3, #32]
  hlcd.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <MX_LCD_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	@ 0x30
  hlcd.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <MX_LCD_Init+0x68>)
 800076a:	2200      	movs	r2, #0
 800076c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlcd.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <MX_LCD_Init+0x68>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlcd.Init.HighDrive = LCD_HIGHDRIVE_DISABLE;
 8000774:	4b06      	ldr	r3, [pc, #24]	@ (8000790 <MX_LCD_Init+0x68>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_LCD_Init(&hlcd) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	@ (8000790 <MX_LCD_Init+0x68>)
 800077c:	f002 ff9e 	bl	80036bc <HAL_LCD_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_LCD_Init+0x62>
  {
    Error_Handler();
 8000786:	f000 fa81 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN LCD_Init 2 */

  /* USER CODE END LCD_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000140 	.word	0x20000140
 8000794:	40002400 	.word	0x40002400

08000798 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 800079e:	4a10      	ldr	r2, [pc, #64]	@ (80007e0 <MX_QUADSPI_Init+0x48>)
 80007a0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007b0:	2210      	movs	r2, #16
 80007b2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007b6:	2218      	movs	r2, #24
 80007b8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007bc:	2200      	movs	r2, #0
 80007be:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_QUADSPI_Init+0x44>)
 80007c8:	f003 f8de 	bl	8003988 <HAL_QSPI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80007d2:	f000 fa5b 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000017c 	.word	0x2000017c
 80007e0:	a0001000 	.word	0xa0001000

080007e4 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80007e8:	4b4d      	ldr	r3, [pc, #308]	@ (8000920 <MX_SAI1_Init+0x13c>)
 80007ea:	4a4e      	ldr	r2, [pc, #312]	@ (8000924 <MX_SAI1_Init+0x140>)
 80007ec:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80007ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000920 <MX_SAI1_Init+0x13c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80007f4:	4b4a      	ldr	r3, [pc, #296]	@ (8000920 <MX_SAI1_Init+0x13c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80007fa:	4b49      	ldr	r3, [pc, #292]	@ (8000920 <MX_SAI1_Init+0x13c>)
 80007fc:	2240      	movs	r2, #64	@ 0x40
 80007fe:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000800:	4b47      	ldr	r3, [pc, #284]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000802:	2200      	movs	r2, #0
 8000804:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000806:	4b46      	ldr	r3, [pc, #280]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000808:	2200      	movs	r2, #0
 800080a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800080c:	4b44      	ldr	r3, [pc, #272]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000812:	4b43      	ldr	r3, [pc, #268]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000818:	4b41      	ldr	r3, [pc, #260]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800081e:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000824:	4b3e      	ldr	r3, [pc, #248]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000826:	4a40      	ldr	r2, [pc, #256]	@ (8000928 <MX_SAI1_Init+0x144>)
 8000828:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800082a:	4b3d      	ldr	r3, [pc, #244]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000830:	4b3b      	ldr	r3, [pc, #236]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000836:	4b3a      	ldr	r3, [pc, #232]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800083c:	4b38      	ldr	r3, [pc, #224]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800083e:	2200      	movs	r2, #0
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000842:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000844:	2208      	movs	r2, #8
 8000846:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000848:	4b35      	ldr	r3, [pc, #212]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800084a:	2201      	movs	r2, #1
 800084c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800084e:	4b34      	ldr	r3, [pc, #208]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000850:	2200      	movs	r2, #0
 8000852:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000854:	4b32      	ldr	r3, [pc, #200]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000856:	2200      	movs	r2, #0
 8000858:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800085a:	4b31      	ldr	r3, [pc, #196]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800085c:	2200      	movs	r2, #0
 800085e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000860:	4b2f      	ldr	r3, [pc, #188]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000862:	2200      	movs	r2, #0
 8000864:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000866:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000868:	2200      	movs	r2, #0
 800086a:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800086e:	2201      	movs	r2, #1
 8000870:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000872:	4b2b      	ldr	r3, [pc, #172]	@ (8000920 <MX_SAI1_Init+0x13c>)
 8000874:	2200      	movs	r2, #0
 8000876:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000878:	4829      	ldr	r0, [pc, #164]	@ (8000920 <MX_SAI1_Init+0x13c>)
 800087a:	f005 fa6b 	bl	8005d54 <HAL_SAI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000884:	f000 fa02 	bl	8000c8c <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <MX_SAI1_Init+0x148>)
 800088a:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <MX_SAI1_Init+0x14c>)
 800088c:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 800088e:	4b27      	ldr	r3, [pc, #156]	@ (800092c <MX_SAI1_Init+0x148>)
 8000890:	2200      	movs	r2, #0
 8000892:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000894:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_SAI1_Init+0x148>)
 8000896:	2203      	movs	r2, #3
 8000898:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800089a:	4b24      	ldr	r3, [pc, #144]	@ (800092c <MX_SAI1_Init+0x148>)
 800089c:	2240      	movs	r2, #64	@ 0x40
 800089e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_SAI1_Init+0x148>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_SAI1_Init+0x148>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80008ac:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_SAI1_Init+0x148>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_SAI1_Init+0x148>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_SAI1_Init+0x148>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_SAI1_Init+0x148>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80008c4:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_SAI1_Init+0x148>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80008ca:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_SAI1_Init+0x148>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_SAI1_Init+0x148>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_SAI1_Init+0x148>)
 80008d8:	2208      	movs	r2, #8
 80008da:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80008dc:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_SAI1_Init+0x148>)
 80008de:	2201      	movs	r2, #1
 80008e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80008e2:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_SAI1_Init+0x148>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80008e8:	4b10      	ldr	r3, [pc, #64]	@ (800092c <MX_SAI1_Init+0x148>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_SAI1_Init+0x148>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_SAI1_Init+0x148>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_SAI1_Init+0x148>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_SAI1_Init+0x148>)
 8000902:	2201      	movs	r2, #1
 8000904:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_SAI1_Init+0x148>)
 8000908:	2200      	movs	r2, #0
 800090a:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800090c:	4807      	ldr	r0, [pc, #28]	@ (800092c <MX_SAI1_Init+0x148>)
 800090e:	f005 fa21 	bl	8005d54 <HAL_SAI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000918:	f000 f9b8 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200001c0 	.word	0x200001c0
 8000924:	40015404 	.word	0x40015404
 8000928:	0002ee00 	.word	0x0002ee00
 800092c:	20000244 	.word	0x20000244
 8000930:	40015424 	.word	0x40015424

08000934 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000938:	4b1b      	ldr	r3, [pc, #108]	@ (80009a8 <MX_SPI2_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	@ (80009ac <MX_SPI2_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b18      	ldr	r3, [pc, #96]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	@ (80009a8 <MX_SPI2_Init+0x74>)
 800094e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000952:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b13      	ldr	r3, [pc, #76]	@ (80009a8 <MX_SPI2_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000962:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000966:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000968:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <MX_SPI2_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <MX_SPI2_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000980:	4b09      	ldr	r3, [pc, #36]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000986:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <MX_SPI2_Init+0x74>)
 800098e:	2208      	movs	r2, #8
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <MX_SPI2_Init+0x74>)
 8000994:	f005 fb8a 	bl	80060ac <HAL_SPI_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 f975 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200002c8 	.word	0x200002c8
 80009ac:	40003800 	.word	0x40003800

080009b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <MX_USART2_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <MX_USART2_UART_Init+0x58>)
 80009f4:	f005 fbfd 	bl	80061f2 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f945 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000032c 	.word	0x2000032c
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	@ 0x30
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
 8000a24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a26:	4b94      	ldr	r3, [pc, #592]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a93      	ldr	r2, [pc, #588]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a2c:	f043 0310 	orr.w	r3, r3, #16
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b91      	ldr	r3, [pc, #580]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f003 0310 	and.w	r3, r3, #16
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a8d      	ldr	r2, [pc, #564]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0304 	and.w	r3, r3, #4
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	4b88      	ldr	r3, [pc, #544]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5a:	4a87      	ldr	r2, [pc, #540]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a62:	4b85      	ldr	r3, [pc, #532]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	4b82      	ldr	r3, [pc, #520]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a72:	4a81      	ldr	r2, [pc, #516]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b7c      	ldr	r3, [pc, #496]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a8a:	4a7b      	ldr	r2, [pc, #492]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a92:	4b79      	ldr	r3, [pc, #484]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9e:	4b76      	ldr	r3, [pc, #472]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	4a75      	ldr	r2, [pc, #468]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aaa:	4b73      	ldr	r3, [pc, #460]	@ (8000c78 <MX_GPIO_Init+0x268>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f240 1109 	movw	r1, #265	@ 0x109
 8000abc:	486f      	ldr	r0, [pc, #444]	@ (8000c7c <MX_GPIO_Init+0x26c>)
 8000abe:	f000 ffe5 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	210c      	movs	r1, #12
 8000ac6:	486e      	ldr	r0, [pc, #440]	@ (8000c80 <MX_GPIO_Init+0x270>)
 8000ac8:	f000 ffe0 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000acc:	2201      	movs	r2, #1
 8000ace:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ad2:	486c      	ldr	r0, [pc, #432]	@ (8000c84 <MX_GPIO_Init+0x274>)
 8000ad4:	f000 ffda 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ade:	4869      	ldr	r0, [pc, #420]	@ (8000c84 <MX_GPIO_Init+0x274>)
 8000ae0:	f000 ffd4 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2180      	movs	r1, #128	@ 0x80
 8000ae8:	4867      	ldr	r0, [pc, #412]	@ (8000c88 <MX_GPIO_Init+0x278>)
 8000aea:	f000 ffcf 	bl	8001a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000aee:	2308      	movs	r3, #8
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afa:	2302      	movs	r3, #2
 8000afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	485d      	ldr	r0, [pc, #372]	@ (8000c7c <MX_GPIO_Init+0x26c>)
 8000b06:	f000 fe17 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000b0a:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 8000b0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4858      	ldr	r0, [pc, #352]	@ (8000c84 <MX_GPIO_Init+0x274>)
 8000b22:	f000 fe09 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000b26:	2307      	movs	r3, #7
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4852      	ldr	r0, [pc, #328]	@ (8000c84 <MX_GPIO_Init+0x274>)
 8000b3a:	f000 fdfd 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_CENTER_Pin JOY_LEFT_Pin JOY_RIGHT_Pin JOY_UP_Pin
                           JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_CENTER_Pin|JOY_LEFT_Pin|JOY_RIGHT_Pin|JOY_UP_Pin
 8000b3e:	232f      	movs	r3, #47	@ 0x2f
 8000b40:	61fb      	str	r3, [r7, #28]
                          |JOY_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b46:	2302      	movs	r3, #2
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b54:	f000 fdf0 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b5c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b70:	f000 fde2 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_R_Pin */
  GPIO_InitStruct.Pin = LD_R_Pin;
 8000b74:	2304      	movs	r3, #4
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b80:	2303      	movs	r3, #3
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_R_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 031c 	add.w	r3, r7, #28
 8000b88:	4619      	mov	r1, r3
 8000b8a:	483d      	ldr	r0, [pc, #244]	@ (8000c80 <MX_GPIO_Init+0x270>)
 8000b8c:	f000 fdd4 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_G_Pin */
  GPIO_InitStruct.Pin = LD_G_Pin;
 8000b90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4834      	ldr	r0, [pc, #208]	@ (8000c7c <MX_GPIO_Init+0x26c>)
 8000baa:	f000 fdc5 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000bae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8000bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	482f      	ldr	r0, [pc, #188]	@ (8000c84 <MX_GPIO_Init+0x274>)
 8000bc8:	f000 fdb6 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000bcc:	2305      	movs	r3, #5
 8000bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bd0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bda:	f107 031c 	add.w	r3, r7, #28
 8000bde:	4619      	mov	r1, r3
 8000be0:	4829      	ldr	r0, [pc, #164]	@ (8000c88 <MX_GPIO_Init+0x278>)
 8000be2:	f000 fda9 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000be6:	2380      	movs	r3, #128	@ 0x80
 8000be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4822      	ldr	r0, [pc, #136]	@ (8000c88 <MX_GPIO_Init+0x278>)
 8000bfe:	f000 fd9b 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <MX_GPIO_Init+0x270>)
 8000c1a:	f000 fd8d 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000c1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c24:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4812      	ldr	r0, [pc, #72]	@ (8000c80 <MX_GPIO_Init+0x270>)
 8000c36:	f000 fd7f 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480a      	ldr	r0, [pc, #40]	@ (8000c7c <MX_GPIO_Init+0x26c>)
 8000c52:	f000 fd71 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c5a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_GPIO_Init+0x26c>)
 8000c6c:	f000 fd64 	bl	8001738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	@ 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48001000 	.word	0x48001000
 8000c80:	48000400 	.word	0x48000400
 8000c84:	48000800 	.word	0x48000800
 8000c88:	48000c00 	.word	0x48000c00

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8000cdc <HAL_MspInit+0x44>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cba:	4a08      	ldr	r2, [pc, #32]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_MspInit+0x44>)
 8000cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2288      	movs	r2, #136	@ 0x88
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 fafb 	bl	800a2fc <memset>
  if(hi2c->Instance==I2C1)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a42      	ldr	r2, [pc, #264]	@ (8000e14 <HAL_I2C_MspInit+0x134>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d13b      	bne.n	8000d88 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d10:	2340      	movs	r3, #64	@ 0x40
 8000d12:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	f107 031c 	add.w	r3, r7, #28
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f003 fcef 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d28:	f7ff ffb0 	bl	8000c8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d30:	4a39      	ldr	r2, [pc, #228]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000d32:	f043 0302 	orr.w	r3, r3, #2
 8000d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d38:	4b37      	ldr	r3, [pc, #220]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
 8000d42:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000d44:	23c0      	movs	r3, #192	@ 0xc0
 8000d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d50:	2301      	movs	r3, #1
 8000d52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d66:	4619      	mov	r1, r3
 8000d68:	482c      	ldr	r0, [pc, #176]	@ (8000e1c <HAL_I2C_MspInit+0x13c>)
 8000d6a:	f000 fce5 	bl	8001738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	4a29      	ldr	r2, [pc, #164]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d7a:	4b27      	ldr	r3, [pc, #156]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d86:	e040      	b.n	8000e0a <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a24      	ldr	r2, [pc, #144]	@ (8000e20 <HAL_I2C_MspInit+0x140>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d13b      	bne.n	8000e0a <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d92:	2380      	movs	r3, #128	@ 0x80
 8000d94:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d96:	2300      	movs	r3, #0
 8000d98:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 fcae 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000daa:	f7ff ff6f 	bl	8000c8c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	4a19      	ldr	r2, [pc, #100]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dba:	4b17      	ldr	r3, [pc, #92]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 8000dc6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dce:	2312      	movs	r3, #18
 8000dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000de0:	2304      	movs	r3, #4
 8000de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000dea:	4619      	mov	r1, r3
 8000dec:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <HAL_I2C_MspInit+0x13c>)
 8000dee:	f000 fca3 	bl	8001738 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000df2:	4b09      	ldr	r3, [pc, #36]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000df8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000dfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_I2C_MspInit+0x138>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	37b8      	adds	r7, #184	@ 0xb8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40005400 	.word	0x40005400
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	40005800 	.word	0x40005800

08000e24 <HAL_LCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hlcd: LCD handle pointer
* @retval None
*/
void HAL_LCD_MspInit(LCD_HandleTypeDef* hlcd)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b0ae      	sub	sp, #184	@ 0xb8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	2288      	movs	r2, #136	@ 0x88
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f009 fa59 	bl	800a2fc <memset>
  if(hlcd->Instance==LCD)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a57      	ldr	r2, [pc, #348]	@ (8000fac <HAL_LCD_MspInit+0x188>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	f040 80a6 	bne.w	8000fa2 <HAL_LCD_MspInit+0x17e>

  /* USER CODE END LCD_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fc49 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <HAL_LCD_MspInit+0x54>
    {
      Error_Handler();
 8000e74:	f7ff ff0a 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LCD_CLK_ENABLE();
 8000e78:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e84:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e8c:	61bb      	str	r3, [r7, #24]
 8000e8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e90:	4b47      	ldr	r3, [pc, #284]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	4a46      	ldr	r2, [pc, #280]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e9c:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	4b41      	ldr	r3, [pc, #260]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	4a3a      	ldr	r2, [pc, #232]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ecc:	4b38      	ldr	r3, [pc, #224]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed8:	4b35      	ldr	r3, [pc, #212]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	4a34      	ldr	r2, [pc, #208]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000ede:	f043 0308 	orr.w	r3, r3, #8
 8000ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ee4:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <HAL_LCD_MspInit+0x18c>)
 8000ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee8:	f003 0308 	and.w	r3, r3, #8
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
    PA15 (JTDI)     ------> LCD_SEG17
    PB4 (NJTRST)     ------> LCD_SEG8
    PB5     ------> LCD_SEG9
    PB9     ------> LCD_COM3
    */
    GPIO_InitStruct.Pin = VLCD_Pin|SEG22_Pin|SEG1_Pin|SEG14_Pin
 8000ef0:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8000ef4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |SEG9_Pin|SEG13_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f0a:	230b      	movs	r3, #11
 8000f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4827      	ldr	r0, [pc, #156]	@ (8000fb4 <HAL_LCD_MspInit+0x190>)
 8000f18:	f000 fc0e 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG23_Pin|SEG0_Pin|COM0_Pin|COM1_Pin
 8000f1c:	f248 73c0 	movw	r3, #34752	@ 0x87c0
 8000f20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |COM2_Pin|SEG10_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f36:	230b      	movs	r3, #11
 8000f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f40:	4619      	mov	r1, r3
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f46:	f000 fbf7 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG21_Pin|SEG2_Pin|SEG20_Pin|SEG3_Pin
 8000f4a:	f24f 2333 	movw	r3, #62003	@ 0xf233
 8000f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |SEG19_Pin|SEG4_Pin|SEG11_Pin|SEG12_Pin
                          |COM3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f64:	230b      	movs	r3, #11
 8000f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4811      	ldr	r0, [pc, #68]	@ (8000fb8 <HAL_LCD_MspInit+0x194>)
 8000f72:	f000 fbe1 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SEG18_Pin|SEG5_Pin|SEG17_Pin|SEG6_Pin
 8000f76:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
                          |SEG16_Pin|SEG7_Pin|SEG15_Pin|SEG8_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF11_LCD;
 8000f90:	230b      	movs	r3, #11
 8000f92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <HAL_LCD_MspInit+0x198>)
 8000f9e:	f000 fbcb 	bl	8001738 <HAL_GPIO_Init>

  /* USER CODE END LCD_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	37b8      	adds	r7, #184	@ 0xb8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40002400 	.word	0x40002400
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	48000800 	.word	0x48000800
 8000fb8:	48000400 	.word	0x48000400
 8000fbc:	48000c00 	.word	0x48000c00

08000fc0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_QSPI_MspInit+0x7c>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d128      	bne.n	8001034 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fe2:	4b17      	ldr	r3, [pc, #92]	@ (8001040 <HAL_QSPI_MspInit+0x80>)
 8000fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000fe6:	4a16      	ldr	r2, [pc, #88]	@ (8001040 <HAL_QSPI_MspInit+0x80>)
 8000fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fec:	6513      	str	r3, [r2, #80]	@ 0x50
 8000fee:	4b14      	ldr	r3, [pc, #80]	@ (8001040 <HAL_QSPI_MspInit+0x80>)
 8000ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_QSPI_MspInit+0x80>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_QSPI_MspInit+0x80>)
 8001000:	f043 0310 	orr.w	r3, r3, #16
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b0e      	ldr	r3, [pc, #56]	@ (8001040 <HAL_QSPI_MspInit+0x80>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0310 	and.w	r3, r3, #16
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001012:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001016:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001020:	2303      	movs	r3, #3
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001024:	230a      	movs	r3, #10
 8001026:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <HAL_QSPI_MspInit+0x84>)
 8001030:	f000 fb82 	bl	8001738 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	@ 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	a0001000 	.word	0xa0001000
 8001040:	40021000 	.word	0x40021000
 8001044:	48001000 	.word	0x48001000

08001048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <HAL_SPI_MspInit+0x7c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d127      	bne.n	80010ba <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_SPI_MspInit+0x80>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <HAL_SPI_MspInit+0x80>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001074:	6593      	str	r3, [r2, #88]	@ 0x58
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_SPI_MspInit+0x80>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_SPI_MspInit+0x80>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_SPI_MspInit+0x80>)
 8001088:	f043 0308 	orr.w	r3, r3, #8
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_SPI_MspInit+0x80>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 800109a:	231a      	movs	r3, #26
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010aa:	2305      	movs	r3, #5
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	4805      	ldr	r0, [pc, #20]	@ (80010cc <HAL_SPI_MspInit+0x84>)
 80010b6:	f000 fb3f 	bl	8001738 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	@ 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40003800 	.word	0x40003800
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000c00 	.word	0x48000c00

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	@ 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2288      	movs	r2, #136	@ 0x88
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 f903 	bl	800a2fc <memset>
  if(huart->Instance==USART2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	@ (8001180 <HAL_UART_MspInit+0xb0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d13a      	bne.n	8001176 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4618      	mov	r0, r3
 800110e:	f003 faf7 	bl	8004700 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001118:	f7ff fdb8 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001122:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001126:	6593      	str	r3, [r2, #88]	@ 0x58
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001134:	4b13      	ldr	r3, [pc, #76]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 800113a:	f043 0308 	orr.w	r3, r3, #8
 800113e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_UART_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114c:	2360      	movs	r3, #96	@ 0x60
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001164:	2307      	movs	r3, #7
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_UART_MspInit+0xb8>)
 8001172:	f000 fae1 	bl	8001738 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001176:	bf00      	nop
 8001178:	37b0      	adds	r7, #176	@ 0xb0
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004400 	.word	0x40004400
 8001184:	40021000 	.word	0x40021000
 8001188:	48000c00 	.word	0x48000c00

0800118c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a33      	ldr	r2, [pc, #204]	@ (8001268 <HAL_SAI_MspInit+0xdc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d135      	bne.n	800120a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800119e:	4b33      	ldr	r3, [pc, #204]	@ (800126c <HAL_SAI_MspInit+0xe0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10b      	bne.n	80011be <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80011a6:	4b32      	ldr	r3, [pc, #200]	@ (8001270 <HAL_SAI_MspInit+0xe4>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011aa:	4a31      	ldr	r2, [pc, #196]	@ (8001270 <HAL_SAI_MspInit+0xe4>)
 80011ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <HAL_SAI_MspInit+0xe4>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <HAL_SAI_MspInit+0xe0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a29      	ldr	r2, [pc, #164]	@ (800126c <HAL_SAI_MspInit+0xe0>)
 80011c6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 80011c8:	2374      	movs	r3, #116	@ 0x74
 80011ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011d8:	230d      	movs	r3, #13
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4824      	ldr	r0, [pc, #144]	@ (8001274 <HAL_SAI_MspInit+0xe8>)
 80011e4:	f000 faa8 	bl	8001738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 80011e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011fa:	230d      	movs	r3, #13
 80011fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4619      	mov	r1, r3
 8001204:	481b      	ldr	r0, [pc, #108]	@ (8001274 <HAL_SAI_MspInit+0xe8>)
 8001206:	f000 fa97 	bl	8001738 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a1a      	ldr	r2, [pc, #104]	@ (8001278 <HAL_SAI_MspInit+0xec>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d124      	bne.n	800125e <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_SAI_MspInit+0xe0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10b      	bne.n	8001234 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800121c:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <HAL_SAI_MspInit+0xe4>)
 800121e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001220:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <HAL_SAI_MspInit+0xe4>)
 8001222:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001226:	6613      	str	r3, [r2, #96]	@ 0x60
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <HAL_SAI_MspInit+0xe4>)
 800122a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <HAL_SAI_MspInit+0xe0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a0c      	ldr	r2, [pc, #48]	@ (800126c <HAL_SAI_MspInit+0xe0>)
 800123c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800123e:	2380      	movs	r3, #128	@ 0x80
 8001240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800124e:	230d      	movs	r3, #13
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	4806      	ldr	r0, [pc, #24]	@ (8001274 <HAL_SAI_MspInit+0xe8>)
 800125a:	f000 fa6d 	bl	8001738 <HAL_GPIO_Init>

    }
}
 800125e:	bf00      	nop
 8001260:	3728      	adds	r7, #40	@ 0x28
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40015404 	.word	0x40015404
 800126c:	200003b4 	.word	0x200003b4
 8001270:	40021000 	.word	0x40021000
 8001274:	48001000 	.word	0x48001000
 8001278:	40015424 	.word	0x40015424

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d2:	f000 f8db 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012e0:	4802      	ldr	r0, [pc, #8]	@ (80012ec <OTG_FS_IRQHandler+0x10>)
 80012e2:	f000 fe87 	bl	8001ff4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	2000079c 	.word	0x2000079c

080012f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f8:	4a14      	ldr	r2, [pc, #80]	@ (800134c <_sbrk+0x5c>)
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <_sbrk+0x60>)
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d102      	bne.n	8001312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800130c:	4b11      	ldr	r3, [pc, #68]	@ (8001354 <_sbrk+0x64>)
 800130e:	4a12      	ldr	r2, [pc, #72]	@ (8001358 <_sbrk+0x68>)
 8001310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	429a      	cmp	r2, r3
 800131e:	d207      	bcs.n	8001330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001320:	f009 f804 	bl	800a32c <__errno>
 8001324:	4603      	mov	r3, r0
 8001326:	220c      	movs	r2, #12
 8001328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132a:	f04f 33ff 	mov.w	r3, #4294967295
 800132e:	e009      	b.n	8001344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <_sbrk+0x64>)
 8001340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20018000 	.word	0x20018000
 8001350:	00000400 	.word	0x00000400
 8001354:	200003b8 	.word	0x200003b8
 8001358:	20000c08 	.word	0x20000c08

0800135c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <SystemInit+0x20>)
 8001362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <SystemInit+0x20>)
 8001368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800136c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001384:	f7ff ffea 	bl	800135c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001388:	480c      	ldr	r0, [pc, #48]	@ (80013bc <LoopForever+0x6>)
  ldr r1, =_edata
 800138a:	490d      	ldr	r1, [pc, #52]	@ (80013c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800138c:	4a0d      	ldr	r2, [pc, #52]	@ (80013c4 <LoopForever+0xe>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001390:	e002      	b.n	8001398 <LoopCopyDataInit>

08001392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001396:	3304      	adds	r3, #4

08001398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800139a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800139c:	d3f9      	bcc.n	8001392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139e:	4a0a      	ldr	r2, [pc, #40]	@ (80013c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013a0:	4c0a      	ldr	r4, [pc, #40]	@ (80013cc <LoopForever+0x16>)
  movs r3, #0
 80013a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a4:	e001      	b.n	80013aa <LoopFillZerobss>

080013a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a8:	3204      	adds	r2, #4

080013aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013ac:	d3fb      	bcc.n	80013a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ae:	f008 ffc3 	bl	800a338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013b2:	f7ff f881 	bl	80004b8 <main>

080013b6 <LoopForever>:

LoopForever:
    b LoopForever
 80013b6:	e7fe      	b.n	80013b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80013c4:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 80013c8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80013cc:	20000c04 	.word	0x20000c04

080013d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC1_2_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <HAL_Init+0x3c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001410 <HAL_Init+0x3c>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ea:	2003      	movs	r0, #3
 80013ec:	f000 f962 	bl	80016b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013f0:	2000      	movs	r0, #0
 80013f2:	f000 f80f 	bl	8001414 <HAL_InitTick>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	e001      	b.n	8001406 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001402:	f7ff fc49 	bl	8000c98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001406:	79fb      	ldrb	r3, [r7, #7]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40022000 	.word	0x40022000

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001420:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <HAL_InitTick+0x6c>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001428:	4b16      	ldr	r3, [pc, #88]	@ (8001484 <HAL_InitTick+0x70>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <HAL_InitTick+0x6c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f96d 	bl	800171e <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10f      	bne.n	800146a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	d809      	bhi.n	8001464 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001450:	2200      	movs	r2, #0
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	f04f 30ff 	mov.w	r0, #4294967295
 8001458:	f000 f937 	bl	80016ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800145c:	4a0a      	ldr	r2, [pc, #40]	@ (8001488 <HAL_InitTick+0x74>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e007      	b.n	8001474 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
 8001468:	e004      	b.n	8001474 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	73fb      	strb	r3, [r7, #15]
 800146e:	e001      	b.n	8001474 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	20000000 	.word	0x20000000
 8001488:	20000004 	.word	0x20000004

0800148c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_IncTick+0x20>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <HAL_IncTick+0x24>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_IncTick+0x24>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008
 80014b0:	200003bc 	.word	0x200003bc

080014b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  return uwTick;
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <HAL_GetTick+0x14>)
 80014ba:	681b      	ldr	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	200003bc 	.word	0x200003bc

080014cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff ffee 	bl	80014b4 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e4:	d005      	beq.n	80014f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_Delay+0x44>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4413      	add	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f2:	bf00      	nop
 80014f4:	f7ff ffde 	bl	80014b4 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	429a      	cmp	r2, r3
 8001502:	d8f7      	bhi.n	80014f4 <HAL_Delay+0x28>
  {
  }
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4907      	ldr	r1, [pc, #28]	@ (80015b0 <__NVIC_EnableIRQ+0x38>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000e100 	.word	0xe000e100

080015b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	6039      	str	r1, [r7, #0]
 80015be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	db0a      	blt.n	80015de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	490c      	ldr	r1, [pc, #48]	@ (8001600 <__NVIC_SetPriority+0x4c>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	0112      	lsls	r2, r2, #4
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015dc:	e00a      	b.n	80015f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4908      	ldr	r1, [pc, #32]	@ (8001604 <__NVIC_SetPriority+0x50>)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	3b04      	subs	r3, #4
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	440b      	add	r3, r1
 80015f2:	761a      	strb	r2, [r3, #24]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000e100 	.word	0xe000e100
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b480      	push	{r7}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f1c3 0307 	rsb	r3, r3, #7
 8001622:	2b04      	cmp	r3, #4
 8001624:	bf28      	it	cs
 8001626:	2304      	movcs	r3, #4
 8001628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3304      	adds	r3, #4
 800162e:	2b06      	cmp	r3, #6
 8001630:	d902      	bls.n	8001638 <NVIC_EncodePriority+0x30>
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3b03      	subs	r3, #3
 8001636:	e000      	b.n	800163a <NVIC_EncodePriority+0x32>
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	f04f 32ff 	mov.w	r2, #4294967295
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43da      	mvns	r2, r3
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	401a      	ands	r2, r3
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001650:	f04f 31ff 	mov.w	r1, #4294967295
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	fa01 f303 	lsl.w	r3, r1, r3
 800165a:	43d9      	mvns	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	4313      	orrs	r3, r2
         );
}
 8001662:	4618      	mov	r0, r3
 8001664:	3724      	adds	r7, #36	@ 0x24
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
	...

08001670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001680:	d301      	bcc.n	8001686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001682:	2301      	movs	r3, #1
 8001684:	e00f      	b.n	80016a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001686:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <SysTick_Config+0x40>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800168e:	210f      	movs	r1, #15
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f7ff ff8e 	bl	80015b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001698:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <SysTick_Config+0x40>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800169e:	4b04      	ldr	r3, [pc, #16]	@ (80016b0 <SysTick_Config+0x40>)
 80016a0:	2207      	movs	r2, #7
 80016a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	e000e010 	.word	0xe000e010

080016b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff29 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b086      	sub	sp, #24
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	4603      	mov	r3, r0
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
 80016d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d8:	2300      	movs	r3, #0
 80016da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff3e 	bl	800155c <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff8e 	bl	8001608 <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5d 	bl	80015b4 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff31 	bl	8001578 <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa2 	bl	8001670 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001746:	e17f      	b.n	8001a48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8171 	beq.w	8001a42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d005      	beq.n	8001778 <HAL_GPIO_Init+0x40>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d118      	bne.n	8001818 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	6939      	ldr	r1, [r7, #16]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80ac 	beq.w	8001a42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001a68 <HAL_GPIO_Init+0x330>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001a68 <HAL_GPIO_Init+0x330>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001a68 <HAL_GPIO_Init+0x330>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001902:	4a5a      	ldr	r2, [pc, #360]	@ (8001a6c <HAL_GPIO_Init+0x334>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x242>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4f      	ldr	r2, [pc, #316]	@ (8001a70 <HAL_GPIO_Init+0x338>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x23e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4e      	ldr	r2, [pc, #312]	@ (8001a74 <HAL_GPIO_Init+0x33c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x23a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4d      	ldr	r2, [pc, #308]	@ (8001a78 <HAL_GPIO_Init+0x340>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x236>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4c      	ldr	r2, [pc, #304]	@ (8001a7c <HAL_GPIO_Init+0x344>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x232>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4b      	ldr	r2, [pc, #300]	@ (8001a80 <HAL_GPIO_Init+0x348>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x22e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4a      	ldr	r2, [pc, #296]	@ (8001a84 <HAL_GPIO_Init+0x34c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x22a>
 800195e:	2306      	movs	r3, #6
 8001960:	e00c      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001962:	2307      	movs	r3, #7
 8001964:	e00a      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001966:	2305      	movs	r3, #5
 8001968:	e008      	b.n	800197c <HAL_GPIO_Init+0x244>
 800196a:	2304      	movs	r3, #4
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x244>
 800196e:	2303      	movs	r3, #3
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x244>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x244>
 800197a:	2300      	movs	r3, #0
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800198c:	4937      	ldr	r1, [pc, #220]	@ (8001a6c <HAL_GPIO_Init+0x334>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800199a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019be:	4a32      	ldr	r2, [pc, #200]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019e8:	4a27      	ldr	r2, [pc, #156]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019ee:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a12:	4a1d      	ldr	r2, [pc, #116]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a3c:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <HAL_GPIO_Init+0x350>)
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f47f ae78 	bne.w	8001748 <HAL_GPIO_Init+0x10>
  }
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	48000400 	.word	0x48000400
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000c00 	.word	0x48000c00
 8001a7c:	48001000 	.word	0x48001000
 8001a80:	48001400 	.word	0x48001400
 8001a84:	48001800 	.word	0x48001800
 8001a88:	40010400 	.word	0x40010400

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e052      	b.n	8001b74 <HAL_HCD_Init+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3315 	ldrb.w	r3, [r3, #789]	@ 0x315
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d106      	bne.n	8001ae8 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f008 f89a 	bl	8009c1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2203      	movs	r2, #3
 8001aec:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  /* Disable DMA mode for FS instance */
  hhcd->Init.dma_enable = 0U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f005 f8d9 	bl	8006cb2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6818      	ldr	r0, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7c1a      	ldrb	r2, [r3, #16]
 8001b08:	f88d 2000 	strb.w	r2, [sp]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b10:	f005 f891 	bl	8006c36 <USB_CoreInit>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_HCD_Init+0x6a>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e026      	b.n	8001b74 <HAL_HCD_Init+0xb8>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2101      	movs	r1, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 f8d1 	bl	8006cd4 <USB_SetCurrentMode>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_HCD_Init+0x88>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e017      	b.n	8001b74 <HAL_HCD_Init+0xb8>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7c1a      	ldrb	r2, [r3, #16]
 8001b4c:	f88d 2000 	strb.w	r2, [sp]
 8001b50:	3304      	adds	r3, #4
 8001b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b54:	f005 fa70 	bl	8007038 <USB_HostInit>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_HCD_Init+0xae>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e004      	b.n	8001b74 <HAL_HCD_Init+0xb8>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2315 	strb.w	r2, [r3, #789]	@ 0x315

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af04      	add	r7, sp, #16
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	70fb      	strb	r3, [r7, #3]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	70bb      	strb	r3, [r7, #2]
 8001b92:	4613      	mov	r3, r2
 8001b94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HCcharMps = mps;
 8001b96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b98:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hhcd);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 3314 	ldrb.w	r3, [r3, #788]	@ 0x314
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_HCD_HC_Init+0x2c>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e087      	b.n	8001cb8 <HAL_HCD_HC_Init+0x13c>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  hhcd->hc[ch_num].do_ping = 0U;
 8001bb0:	78fa      	ldrb	r2, [r7, #3]
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	011b      	lsls	r3, r3, #4
 8001bbc:	440b      	add	r3, r1
 8001bbe:	3319      	adds	r3, #25
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3314      	adds	r3, #20
 8001bd4:	787a      	ldrb	r2, [r7, #1]
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	440b      	add	r3, r1
 8001be6:	3315      	adds	r3, #21
 8001be8:	78fa      	ldrb	r2, [r7, #3]
 8001bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	440b      	add	r3, r1
 8001bfa:	331c      	adds	r3, #28
 8001bfc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c02:	78fa      	ldrb	r2, [r7, #3]
 8001c04:	78bb      	ldrb	r3, [r7, #2]
 8001c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c0a:	b2d8      	uxtb	r0, r3
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	440b      	add	r3, r1
 8001c18:	3316      	adds	r3, #22
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	4619      	mov	r1, r3
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fb8a 	bl	800233c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c28:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	da0a      	bge.n	8001c46 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	011b      	lsls	r3, r3, #4
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3317      	adds	r3, #23
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e009      	b.n	8001c5a <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c46:	78fa      	ldrb	r2, [r7, #3]
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	440b      	add	r3, r1
 8001c54:	3317      	adds	r3, #23
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	4413      	add	r3, r2
 8001c64:	011b      	lsls	r3, r3, #4
 8001c66:	440b      	add	r3, r1
 8001c68:	3318      	adds	r3, #24
 8001c6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001c70:	78fa      	ldrb	r2, [r7, #3]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	b298      	uxth	r0, r3
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4413      	add	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	440b      	add	r3, r1
 8001c82:	331e      	adds	r3, #30
 8001c84:	4602      	mov	r2, r0
 8001c86:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	787c      	ldrb	r4, [r7, #1]
 8001c92:	78ba      	ldrb	r2, [r7, #2]
 8001c94:	78f9      	ldrb	r1, [r7, #3]
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	f005 fb13 	bl	80072d0 <USB_HC_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	72fb      	strb	r3, [r7, #11]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

  return status;
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}

08001cc0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3314 	ldrb.w	r3, [r3, #788]	@ 0x314
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_HCD_HC_Halt+0x1e>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e00f      	b.n	8001cfe <HAL_HCD_HC_Halt+0x3e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	78fa      	ldrb	r2, [r7, #3]
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f005 fd03 	bl	80076fa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

  return status;
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
	...

08001d08 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	4608      	mov	r0, r1
 8001d12:	4611      	mov	r1, r2
 8001d14:	461a      	mov	r2, r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	70fb      	strb	r3, [r7, #3]
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	70bb      	strb	r3, [r7, #2]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	6879      	ldr	r1, [r7, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	011b      	lsls	r3, r3, #4
 8001d2e:	440b      	add	r3, r1
 8001d30:	3317      	adds	r3, #23
 8001d32:	78ba      	ldrb	r2, [r7, #2]
 8001d34:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d36:	78fa      	ldrb	r2, [r7, #3]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	440b      	add	r3, r1
 8001d44:	331c      	adds	r3, #28
 8001d46:	787a      	ldrb	r2, [r7, #1]
 8001d48:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d4a:	7c3b      	ldrb	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d114      	bne.n	8001d7a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	4413      	add	r3, r2
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3320      	adds	r3, #32
 8001d60:	2203      	movs	r2, #3
 8001d62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	440b      	add	r3, r1
 8001d72:	3319      	adds	r3, #25
 8001d74:	7f3a      	ldrb	r2, [r7, #28]
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e009      	b.n	8001d8e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4413      	add	r3, r2
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	3320      	adds	r3, #32
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d8e:	787b      	ldrb	r3, [r7, #1]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	f200 80dc 	bhi.w	8001f4e <HAL_HCD_HC_SubmitRequest+0x246>
 8001d96:	a201      	add	r2, pc, #4	@ (adr r2, 8001d9c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9c:	08001dad 	.word	0x08001dad
 8001da0:	08001f39 	.word	0x08001f39
 8001da4:	08001e1d 	.word	0x08001e1d
 8001da8:	08001eab 	.word	0x08001eab
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001dac:	7c3b      	ldrb	r3, [r7, #16]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	f040 80cf 	bne.w	8001f52 <HAL_HCD_HC_SubmitRequest+0x24a>
      {
        if (direction == 0U)
 8001db4:	78bb      	ldrb	r3, [r7, #2]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 80cb 	bne.w	8001f52 <HAL_HCD_HC_SubmitRequest+0x24a>
        {
          if (length == 0U)
 8001dbc:	8b3b      	ldrh	r3, [r7, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_HCD_HC_SubmitRequest+0xd0>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001dc2:	78fb      	ldrb	r3, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	440b      	add	r3, r1
 8001de8:	3305      	adds	r3, #5
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <HAL_HCD_HC_SubmitRequest+0xfe>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	011b      	lsls	r3, r3, #4
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3320      	adds	r3, #32
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
            /* Put the PID 1 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
          }
        }
      }
      break;
 8001e04:	e0a5      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x24a>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	440b      	add	r3, r1
 8001e14:	3320      	adds	r3, #32
 8001e16:	2202      	movs	r2, #2
 8001e18:	701a      	strb	r2, [r3, #0]
      break;
 8001e1a:	e09a      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x24a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e1c:	78bb      	ldrb	r3, [r7, #2]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d121      	bne.n	8001e66 <HAL_HCD_HC_SubmitRequest+0x15e>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	1c5a      	adds	r2, r3, #1
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	440b      	add	r3, r1
 8001e32:	3305      	adds	r3, #5
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10a      	bne.n	8001e50 <HAL_HCD_HC_SubmitRequest+0x148>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e3a:	78fa      	ldrb	r2, [r7, #3]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	440b      	add	r3, r1
 8001e48:	3320      	adds	r3, #32
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e4e:	e081      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3320      	adds	r3, #32
 8001e60:	2202      	movs	r2, #2
 8001e62:	701a      	strb	r2, [r3, #0]
      break;
 8001e64:	e076      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	440b      	add	r3, r1
 8001e76:	3304      	adds	r3, #4
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10a      	bne.n	8001e94 <HAL_HCD_HC_SubmitRequest+0x18c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3320      	adds	r3, #32
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
      break;
 8001e92:	e05f      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e94:	78fa      	ldrb	r2, [r7, #3]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3320      	adds	r3, #32
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	701a      	strb	r2, [r3, #0]
      break;
 8001ea8:	e054      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001eaa:	78bb      	ldrb	r3, [r7, #2]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d121      	bne.n	8001ef4 <HAL_HCD_HC_SubmitRequest+0x1ec>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	4413      	add	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3305      	adds	r3, #5
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_HCD_HC_SubmitRequest+0x1d6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ec8:	78fa      	ldrb	r2, [r7, #3]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3320      	adds	r3, #32
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001edc:	e03a      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4413      	add	r3, r2
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	440b      	add	r3, r1
 8001eec:	3320      	adds	r3, #32
 8001eee:	2202      	movs	r2, #2
 8001ef0:	701a      	strb	r2, [r3, #0]
      break;
 8001ef2:	e02f      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	440b      	add	r3, r1
 8001f04:	3304      	adds	r3, #4
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <HAL_HCD_HC_SubmitRequest+0x21a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	440b      	add	r3, r1
 8001f1a:	3320      	adds	r3, #32
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
      break;
 8001f20:	e018      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f22:	78fa      	ldrb	r2, [r7, #3]
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	440b      	add	r3, r1
 8001f30:	3320      	adds	r3, #32
 8001f32:	2202      	movs	r2, #2
 8001f34:	701a      	strb	r2, [r3, #0]
      break;
 8001f36:	e00d      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	011b      	lsls	r3, r3, #4
 8001f44:	440b      	add	r3, r1
 8001f46:	3320      	adds	r3, #32
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
      break;
 8001f4c:	e002      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>

    default:
      break;
 8001f4e:	bf00      	nop
 8001f50:	e000      	b.n	8001f54 <HAL_HCD_HC_SubmitRequest+0x24c>
      break;
 8001f52:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	440b      	add	r3, r1
 8001f62:	3324      	adds	r3, #36	@ 0x24
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f68:	78fa      	ldrb	r2, [r7, #3]
 8001f6a:	8b39      	ldrh	r1, [r7, #24]
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	4403      	add	r3, r0
 8001f78:	332c      	adds	r3, #44	@ 0x2c
 8001f7a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	4413      	add	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	440b      	add	r3, r1
 8001f8a:	3340      	adds	r3, #64	@ 0x40
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001f90:	78fa      	ldrb	r2, [r7, #3]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3330      	adds	r3, #48	@ 0x30
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3315      	adds	r3, #21
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fb8:	78fa      	ldrb	r2, [r7, #3]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3341      	adds	r3, #65	@ 0x41
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	78fa      	ldrb	r2, [r7, #3]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	3310      	adds	r3, #16
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f005 fa80 	bl	80074e8 <USB_HC_StartXfer>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop

08001ff4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f004 ffd4 	bl	8006fb8 <USB_GetMode>
 8002010:	4603      	mov	r3, r0
 8002012:	2b01      	cmp	r3, #1
 8002014:	f040 80fb 	bne.w	800220e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f004 ff97 	bl	8006f50 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80f1 	beq.w	800220c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f004 ff8e 	bl	8006f50 <USB_ReadInterrupts>
 8002034:	4603      	mov	r3, r0
 8002036:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800203e:	d104      	bne.n	800204a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002048:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f004 ff7e 	bl	8006f50 <USB_ReadInterrupts>
 8002054:	4603      	mov	r3, r0
 8002056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800205a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800205e:	d104      	bne.n	800206a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002068:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f004 ff6e 	bl	8006f50 <USB_ReadInterrupts>
 8002074:	4603      	mov	r3, r0
 8002076:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800207a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800207e:	d104      	bne.n	800208a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002088:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f004 ff5e 	bl	8006f50 <USB_ReadInterrupts>
 8002094:	4603      	mov	r3, r0
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b02      	cmp	r3, #2
 800209c:	d103      	bne.n	80020a6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2202      	movs	r2, #2
 80020a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 ff50 	bl	8006f50 <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020ba:	d120      	bne.n	80020fe <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80020c4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d113      	bne.n	80020fe <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020d6:	2110      	movs	r1, #16
 80020d8:	6938      	ldr	r0, [r7, #16]
 80020da:	f004 fe47 	bl	8006d6c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80020de:	6938      	ldr	r0, [r7, #16]
 80020e0:	f004 fe76 	bl	8006dd0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7a5b      	ldrb	r3, [r3, #9]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d105      	bne.n	80020f8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	4618      	mov	r0, r3
 80020f4:	f005 f824 	bl	8007140 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f007 fe11 	bl	8009d20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f004 ff24 	bl	8006f50 <USB_ReadInterrupts>
 8002108:	4603      	mov	r3, r0
 800210a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800210e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002112:	d102      	bne.n	800211a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f001 f92c 	bl	8003372 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 ff16 	bl	8006f50 <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b08      	cmp	r3, #8
 800212c:	d106      	bne.n	800213c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f007 fdda 	bl	8009ce8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2208      	movs	r2, #8
 800213a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f004 ff05 	bl	8006f50 <USB_ReadInterrupts>
 8002146:	4603      	mov	r3, r0
 8002148:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800214c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002150:	d139      	bne.n	80021c6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f005 fabe 	bl	80076d8 <USB_HC_ReadInterrupt>
 800215c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e025      	b.n	80021b0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	2b00      	cmp	r3, #0
 8002176:	d018      	beq.n	80021aa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800218a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800218e:	d106      	bne.n	800219e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	b2db      	uxtb	r3, r3
 8002194:	4619      	mov	r1, r3
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8f1 	bl	800237e <HCD_HC_IN_IRQHandler>
 800219c:	e005      	b.n	80021aa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	4619      	mov	r1, r3
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fd29 	bl	8002bfc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	795b      	ldrb	r3, [r3, #5]
 80021b4:	461a      	mov	r2, r3
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d3d3      	bcc.n	8002164 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f004 fec0 	bl	8006f50 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d101      	bne.n	80021de <HAL_HCD_IRQHandler+0x1ea>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_HCD_IRQHandler+0x1ec>
 80021de:	2300      	movs	r3, #0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d014      	beq.n	800220e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0210 	bic.w	r2, r2, #16
 80021f2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 ffdb 	bl	80031b0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0210 	orr.w	r2, r2, #16
 8002208:	619a      	str	r2, [r3, #24]
 800220a:	e000      	b.n	800220e <HAL_HCD_IRQHandler+0x21a>
      return;
 800220c:	bf00      	nop
    }
  }
}
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3314 	ldrb.w	r3, [r3, #788]	@ 0x314
 8002222:	2b01      	cmp	r3, #1
 8002224:	d101      	bne.n	800222a <HAL_HCD_Start+0x16>
 8002226:	2302      	movs	r3, #2
 8002228:	e013      	b.n	8002252 <HAL_HCD_Start+0x3e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2101      	movs	r1, #1
 8002238:	4618      	mov	r0, r3
 800223a:	f004 ffe8 	bl	800720e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 fd24 	bl	8006c90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3314 	ldrb.w	r3, [r3, #788]	@ 0x314
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_HCD_Stop+0x16>
 800226c:	2302      	movs	r3, #2
 800226e:	e00d      	b.n	800228c <HAL_HCD_Stop+0x32>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314
  (void)USB_StopHost(hhcd->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f005 fb5c 	bl	800793a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2314 	strb.w	r2, [r3, #788]	@ 0x314

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f004 ff8a 	bl	80071ba <USB_ResetPort>
 80022a6:	4603      	mov	r3, r0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022bc:	78fa      	ldrb	r2, [r7, #3]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	440b      	add	r3, r1
 80022ca:	3340      	adds	r3, #64	@ 0x40
 80022cc:	781b      	ldrb	r3, [r3, #0]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	460b      	mov	r3, r1
 80022e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	440b      	add	r3, r1
 80022f4:	3330      	adds	r3, #48	@ 0x30
 80022f6:	681b      	ldr	r3, [r3, #0]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 ffcc 	bl	80072ae <USB_GetCurrentFrame>
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f004 ffa7 	bl	8007280 <USB_GetHostSpeed>
 8002332:	4603      	mov	r3, r0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	460b      	mov	r3, r1
 8002346:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4413      	add	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	440b      	add	r3, r1
 8002356:	331b      	adds	r3, #27
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800235c:	78fa      	ldrb	r2, [r7, #3]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	440b      	add	r3, r1
 800236a:	331a      	adds	r3, #26
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f004 fdea 	bl	8006f76 <USB_ReadChInterrupts>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d11a      	bne.n	80023e2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80023ac:	78fb      	ldrb	r3, [r7, #3]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023b8:	461a      	mov	r2, r3
 80023ba:	2304      	movs	r3, #4
 80023bc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	440b      	add	r3, r1
 80023cc:	3341      	adds	r3, #65	@ 0x41
 80023ce:	2207      	movs	r2, #7
 80023d0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f005 f98d 	bl	80076fa <USB_HC_Halt>
 80023e0:	e09e      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 fdc3 	bl	8006f76 <USB_ReadChInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023fa:	d11b      	bne.n	8002434 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800240e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002410:	78fa      	ldrb	r2, [r7, #3]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	4413      	add	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	440b      	add	r3, r1
 800241e:	3341      	adds	r3, #65	@ 0x41
 8002420:	2208      	movs	r2, #8
 8002422:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f005 f964 	bl	80076fa <USB_HC_Halt>
 8002432:	e075      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	78fa      	ldrb	r2, [r7, #3]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fd9a 	bl	8006f76 <USB_ReadChInterrupts>
 8002442:	4603      	mov	r3, r0
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b08      	cmp	r3, #8
 800244a:	d11a      	bne.n	8002482 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2308      	movs	r3, #8
 800245c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	440b      	add	r3, r1
 800246c:	3341      	adds	r3, #65	@ 0x41
 800246e:	2206      	movs	r2, #6
 8002470:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	78fa      	ldrb	r2, [r7, #3]
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f005 f93d 	bl	80076fa <USB_HC_Halt>
 8002480:	e04e      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f004 fd73 	bl	8006f76 <USB_ReadChInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249a:	d11b      	bne.n	80024d4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a8:	461a      	mov	r2, r3
 80024aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	440b      	add	r3, r1
 80024be:	3341      	adds	r3, #65	@ 0x41
 80024c0:	2209      	movs	r2, #9
 80024c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f005 f914 	bl	80076fa <USB_HC_Halt>
 80024d2:	e025      	b.n	8002520 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f004 fd4a 	bl	8006f76 <USB_ReadChInterrupts>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e8:	2b80      	cmp	r3, #128	@ 0x80
 80024ea:	d119      	bne.n	8002520 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	440b      	add	r3, r1
 800250c:	3341      	adds	r3, #65	@ 0x41
 800250e:	2207      	movs	r2, #7
 8002510:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	78fa      	ldrb	r2, [r7, #3]
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f005 f8ed 	bl	80076fa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	4611      	mov	r1, r2
 8002528:	4618      	mov	r0, r3
 800252a:	f004 fd24 	bl	8006f76 <USB_ReadChInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002538:	d111      	bne.n	800255e <HCD_HC_IN_IRQHandler+0x1e0>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f005 f8d9 	bl	80076fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800255a:	6093      	str	r3, [r2, #8]
 800255c:	e34b      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f004 fd05 	bl	8006f76 <USB_ReadChInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	f040 80dc 	bne.w	8002730 <HCD_HC_IN_IRQHandler+0x3b2>
  {
    hhcd->hc[chnum].state = HC_XFRC;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	440b      	add	r3, r1
 8002586:	3341      	adds	r3, #65	@ 0x41
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	440b      	add	r3, r1
 800259a:	333c      	adds	r3, #60	@ 0x3c
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80025a0:	78fb      	ldrb	r3, [r7, #3]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025ac:	461a      	mov	r2, r3
 80025ae:	2301      	movs	r3, #1
 80025b0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4413      	add	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	440b      	add	r3, r1
 80025c0:	331c      	adds	r3, #28
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HCD_HC_IN_IRQHandler+0x260>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	440b      	add	r3, r1
 80025d6:	331c      	adds	r3, #28
 80025d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d110      	bne.n	8002600 <HCD_HC_IN_IRQHandler+0x282>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f005 f887 	bl	80076fa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f8:	461a      	mov	r2, r3
 80025fa:	2310      	movs	r3, #16
 80025fc:	6093      	str	r3, [r2, #8]
 80025fe:	e03d      	b.n	800267c <HCD_HC_IN_IRQHandler+0x2fe>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	4413      	add	r3, r2
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	440b      	add	r3, r1
 800260e:	331c      	adds	r3, #28
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b03      	cmp	r3, #3
 8002614:	d00a      	beq.n	800262c <HCD_HC_IN_IRQHandler+0x2ae>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	440b      	add	r3, r1
 8002624:	331c      	adds	r3, #28
 8002626:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002628:	2b01      	cmp	r3, #1
 800262a:	d127      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x2fe>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	015a      	lsls	r2, r3, #5
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4413      	add	r3, r2
 8002634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	78fa      	ldrb	r2, [r7, #3]
 800263c:	0151      	lsls	r1, r2, #5
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	440a      	add	r2, r1
 8002642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002646:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800264a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	440b      	add	r3, r1
 800265a:	3340      	adds	r3, #64	@ 0x40
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	440b      	add	r3, r1
 800266e:	3340      	adds	r3, #64	@ 0x40
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	4619      	mov	r1, r3
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f007 fb60 	bl	8009d3c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	799b      	ldrb	r3, [r3, #6]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d13c      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x380>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002684:	78fa      	ldrb	r2, [r7, #3]
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	440b      	add	r3, r1
 8002692:	3330      	adds	r3, #48	@ 0x30
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	4403      	add	r3, r0
 80026a4:	331e      	adds	r3, #30
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	440b      	add	r3, r1
 80026aa:	1e59      	subs	r1, r3, #1
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	4403      	add	r3, r0
 80026ba:	331e      	adds	r3, #30
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	fbb1 f3f3 	udiv	r3, r1, r3
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8295 	beq.w	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	011b      	lsls	r3, r3, #4
 80026da:	440b      	add	r3, r1
 80026dc:	3304      	adds	r3, #4
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f082 0201 	eor.w	r2, r2, #1
 80026e6:	b2d0      	uxtb	r0, r2
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	440b      	add	r3, r1
 80026f6:	3304      	adds	r3, #4
 80026f8:	4602      	mov	r2, r0
 80026fa:	701a      	strb	r2, [r3, #0]
 80026fc:	e27b      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80026fe:	78fb      	ldrb	r3, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	440b      	add	r3, r1
 800270e:	3304      	adds	r3, #4
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	78fb      	ldrb	r3, [r7, #3]
 8002714:	f082 0201 	eor.w	r2, r2, #1
 8002718:	b2d0      	uxtb	r0, r2
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	440b      	add	r3, r1
 8002728:	3304      	adds	r3, #4
 800272a:	4602      	mov	r2, r0
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e262      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f004 fc1c 	bl	8006f76 <USB_ReadChInterrupts>
 800273e:	4603      	mov	r3, r0
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b20      	cmp	r3, #32
 8002746:	d109      	bne.n	800275c <HCD_HC_IN_IRQHandler+0x3de>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	2320      	movs	r3, #32
 8002758:	6093      	str	r3, [r2, #8]
 800275a:	e24c      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f004 fc06 	bl	8006f76 <USB_ReadChInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b02      	cmp	r3, #2
 8002772:	f040 81a0 	bne.w	8002ab6 <HCD_HC_IN_IRQHandler+0x738>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002776:	78fb      	ldrb	r3, [r7, #3]
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4413      	add	r3, r2
 800277e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002782:	461a      	mov	r2, r3
 8002784:	2302      	movs	r3, #2
 8002786:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	440b      	add	r3, r1
 8002796:	3341      	adds	r3, #65	@ 0x41
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d114      	bne.n	80027c8 <HCD_HC_IN_IRQHandler+0x44a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	440b      	add	r3, r1
 80027ac:	3341      	adds	r3, #65	@ 0x41
 80027ae:	2202      	movs	r2, #2
 80027b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	440b      	add	r3, r1
 80027c0:	3340      	adds	r3, #64	@ 0x40
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	e167      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	440b      	add	r3, r1
 80027d6:	3341      	adds	r3, #65	@ 0x41
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d114      	bne.n	8002808 <HCD_HC_IN_IRQHandler+0x48a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	440b      	add	r3, r1
 80027ec:	3341      	adds	r3, #65	@ 0x41
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4413      	add	r3, r2
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	440b      	add	r3, r1
 8002800:	3340      	adds	r3, #64	@ 0x40
 8002802:	2205      	movs	r2, #5
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e147      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	440b      	add	r3, r1
 8002816:	3341      	adds	r3, #65	@ 0x41
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b07      	cmp	r3, #7
 800281c:	d00a      	beq.n	8002834 <HCD_HC_IN_IRQHandler+0x4b6>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	440b      	add	r3, r1
 800282c:	3341      	adds	r3, #65	@ 0x41
 800282e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002830:	2b09      	cmp	r3, #9
 8002832:	d176      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x5a4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	440b      	add	r3, r1
 8002842:	3341      	adds	r3, #65	@ 0x41
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	4413      	add	r3, r2
 8002852:	011b      	lsls	r3, r3, #4
 8002854:	440b      	add	r3, r1
 8002856:	333c      	adds	r3, #60	@ 0x3c
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	1c59      	adds	r1, r3, #1
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4413      	add	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4403      	add	r3, r0
 8002868:	333c      	adds	r3, #60	@ 0x3c
 800286a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800286c:	78fa      	ldrb	r2, [r7, #3]
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	440b      	add	r3, r1
 800287a:	333c      	adds	r3, #60	@ 0x3c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d914      	bls.n	80028ac <HCD_HC_IN_IRQHandler+0x52e>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002882:	78fa      	ldrb	r2, [r7, #3]
 8002884:	6879      	ldr	r1, [r7, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	440b      	add	r3, r1
 8002890:	333c      	adds	r3, #60	@ 0x3c
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	440b      	add	r3, r1
 80028a4:	3340      	adds	r3, #64	@ 0x40
 80028a6:	2204      	movs	r2, #4
 80028a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80028aa:	e0f4      	b.n	8002a96 <HCD_HC_IN_IRQHandler+0x718>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	440b      	add	r3, r1
 80028ba:	3340      	adds	r3, #64	@ 0x40
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	4413      	add	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	440b      	add	r3, r1
 80028ce:	331c      	adds	r3, #28
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00b      	beq.n	80028ee <HCD_HC_IN_IRQHandler+0x570>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	440b      	add	r3, r1
 80028e4:	331c      	adds	r3, #28
 80028e6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f040 80d4 	bne.w	8002a96 <HCD_HC_IN_IRQHandler+0x718>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002904:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800290c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800290e:	78fb      	ldrb	r3, [r7, #3]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002920:	e0b9      	b.n	8002a96 <HCD_HC_IN_IRQHandler+0x718>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002922:	78fa      	ldrb	r2, [r7, #3]
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	440b      	add	r3, r1
 8002930:	3341      	adds	r3, #65	@ 0x41
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b05      	cmp	r3, #5
 8002936:	d10a      	bne.n	800294e <HCD_HC_IN_IRQHandler+0x5d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	4413      	add	r3, r2
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	440b      	add	r3, r1
 8002946:	3341      	adds	r3, #65	@ 0x41
 8002948:	2202      	movs	r2, #2
 800294a:	701a      	strb	r2, [r3, #0]
 800294c:	e0a4      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	440b      	add	r3, r1
 800295c:	3341      	adds	r3, #65	@ 0x41
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d10a      	bne.n	800297a <HCD_HC_IN_IRQHandler+0x5fc>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	440b      	add	r3, r1
 8002972:	3341      	adds	r3, #65	@ 0x41
 8002974:	2202      	movs	r2, #2
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	e08e      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	440b      	add	r3, r1
 8002988:	3341      	adds	r3, #65	@ 0x41
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d143      	bne.n	8002a18 <HCD_HC_IN_IRQHandler+0x69a>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	440b      	add	r3, r1
 800299e:	3341      	adds	r3, #65	@ 0x41
 80029a0:	2202      	movs	r2, #2
 80029a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	440b      	add	r3, r1
 80029b2:	3340      	adds	r3, #64	@ 0x40
 80029b4:	2202      	movs	r2, #2
 80029b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	440b      	add	r3, r1
 80029c6:	331c      	adds	r3, #28
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00a      	beq.n	80029e4 <HCD_HC_IN_IRQHandler+0x666>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	440b      	add	r3, r1
 80029dc:	331c      	adds	r3, #28
 80029de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d159      	bne.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80029fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a02:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	e03f      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4413      	add	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	440b      	add	r3, r1
 8002a26:	3341      	adds	r3, #65	@ 0x41
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d126      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x6fe>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3341      	adds	r3, #65	@ 0x41
 8002a3e:	2202      	movs	r2, #2
 8002a40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	4413      	add	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	440b      	add	r3, r1
 8002a50:	333c      	adds	r3, #60	@ 0x3c
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	1c59      	adds	r1, r3, #1
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4403      	add	r3, r0
 8002a62:	333c      	adds	r3, #60	@ 0x3c
 8002a64:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	4413      	add	r3, r2
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	440b      	add	r3, r1
 8002a74:	3340      	adds	r3, #64	@ 0x40
 8002a76:	2204      	movs	r2, #4
 8002a78:	701a      	strb	r2, [r3, #0]
 8002a7a:	e00d      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	440b      	add	r3, r1
 8002a8a:	3341      	adds	r3, #65	@ 0x41
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	f000 80b0 	beq.w	8002bf4 <HCD_HC_IN_IRQHandler+0x876>
 8002a94:	e000      	b.n	8002a98 <HCD_HC_IN_IRQHandler+0x71a>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a96:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3340      	adds	r3, #64	@ 0x40
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	4619      	mov	r1, r3
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f007 f944 	bl	8009d3c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ab4:	e09f      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	4611      	mov	r1, r2
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f004 fa59 	bl	8006f76 <USB_ReadChInterrupts>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b40      	cmp	r3, #64	@ 0x40
 8002acc:	d124      	bne.n	8002b18 <HCD_HC_IN_IRQHandler+0x79a>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ace:	78fb      	ldrb	r3, [r7, #3]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2340      	movs	r3, #64	@ 0x40
 8002ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	440b      	add	r3, r1
 8002aee:	3341      	adds	r3, #65	@ 0x41
 8002af0:	2205      	movs	r2, #5
 8002af2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	4413      	add	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	440b      	add	r3, r1
 8002b02:	333c      	adds	r3, #60	@ 0x3c
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f004 fdf2 	bl	80076fa <USB_HC_Halt>
 8002b16:	e06e      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f004 fa28 	bl	8006f76 <USB_ReadChInterrupts>
 8002b26:	4603      	mov	r3, r0
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d162      	bne.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	4413      	add	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	440b      	add	r3, r1
 8002b3e:	331c      	adds	r3, #28
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d11b      	bne.n	8002b7e <HCD_HC_IN_IRQHandler+0x800>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4413      	add	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	440b      	add	r3, r1
 8002b54:	333c      	adds	r3, #60	@ 0x3c
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	440b      	add	r3, r1
 8002b68:	3341      	adds	r3, #65	@ 0x41
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f004 fdbf 	bl	80076fa <USB_HC_Halt>
 8002b7c:	e030      	b.n	8002be0 <HCD_HC_IN_IRQHandler+0x862>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	440b      	add	r3, r1
 8002b8c:	331c      	adds	r3, #28
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HCD_HC_IN_IRQHandler+0x82c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	440b      	add	r3, r1
 8002ba2:	331c      	adds	r3, #28
 8002ba4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d11a      	bne.n	8002be0 <HCD_HC_IN_IRQHandler+0x862>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	4413      	add	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	440b      	add	r3, r1
 8002bb8:	333c      	adds	r3, #60	@ 0x3c
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	4413      	add	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	440b      	add	r3, r1
 8002bcc:	3341      	adds	r3, #65	@ 0x41
 8002bce:	2204      	movs	r2, #4
 8002bd0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	78fa      	ldrb	r2, [r7, #3]
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 fd8d 	bl	80076fa <USB_HC_Halt>
    else
    {
      /* ... */
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002be0:	78fb      	ldrb	r3, [r7, #3]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2310      	movs	r3, #16
 8002bf0:	6093      	str	r3, [r2, #8]
 8002bf2:	e000      	b.n	8002bf6 <HCD_HC_IN_IRQHandler+0x878>
        return;
 8002bf4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f004 f9ab 	bl	8006f76 <USB_ReadChInterrupts>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d11a      	bne.n	8002c60 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c36:	461a      	mov	r2, r3
 8002c38:	2304      	movs	r3, #4
 8002c3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	440b      	add	r3, r1
 8002c4a:	3341      	adds	r3, #65	@ 0x41
 8002c4c:	2207      	movs	r2, #7
 8002c4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f004 fd4e 	bl	80076fa <USB_HC_Halt>
 8002c5e:	e2a4      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 f984 	bl	8006f76 <USB_ReadChInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d109      	bne.n	8002c8c <HCD_HC_OUT_IRQHandler+0x90>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c84:	461a      	mov	r2, r3
 8002c86:	2320      	movs	r3, #32
 8002c88:	6093      	str	r3, [r2, #8]
 8002c8a:	e28e      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	4611      	mov	r1, r2
 8002c94:	4618      	mov	r0, r3
 8002c96:	f004 f96e 	bl	8006f76 <USB_ReadChInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca4:	d111      	bne.n	8002cca <HCD_HC_OUT_IRQHandler+0xce>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cb8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f004 fd19 	bl	80076fa <USB_HC_Halt>
 8002cc8:	e26f      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 f94f 	bl	8006f76 <USB_ReadChInterrupts>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d124      	bne.n	8002d2c <HCD_HC_OUT_IRQHandler+0x130>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	440b      	add	r3, r1
 8002cf0:	333c      	adds	r3, #60	@ 0x3c
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cf6:	78fb      	ldrb	r3, [r7, #3]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d02:	461a      	mov	r2, r3
 8002d04:	2301      	movs	r3, #1
 8002d06:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	440b      	add	r3, r1
 8002d16:	3341      	adds	r3, #65	@ 0x41
 8002d18:	2201      	movs	r2, #1
 8002d1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f004 fce8 	bl	80076fa <USB_HC_Halt>
 8002d2a:	e23e      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f004 f91e 	bl	8006f76 <USB_ReadChInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d11a      	bne.n	8002d7a <HCD_HC_OUT_IRQHandler+0x17e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2308      	movs	r3, #8
 8002d54:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	440b      	add	r3, r1
 8002d64:	3341      	adds	r3, #65	@ 0x41
 8002d66:	2206      	movs	r2, #6
 8002d68:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 fcc1 	bl	80076fa <USB_HC_Halt>
 8002d78:	e217      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f004 f8f7 	bl	8006f76 <USB_ReadChInterrupts>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d124      	bne.n	8002ddc <HCD_HC_OUT_IRQHandler+0x1e0>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	4413      	add	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	440b      	add	r3, r1
 8002da0:	333c      	adds	r3, #60	@ 0x3c
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	4413      	add	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	440b      	add	r3, r1
 8002db4:	3341      	adds	r3, #65	@ 0x41
 8002db6:	2204      	movs	r2, #4
 8002db8:	701a      	strb	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f004 fc99 	bl	80076fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2310      	movs	r3, #16
 8002dd8:	6093      	str	r3, [r2, #8]
 8002dda:	e1e6      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f004 f8c6 	bl	8006f76 <USB_ReadChInterrupts>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df0:	2b80      	cmp	r3, #128	@ 0x80
 8002df2:	d11a      	bne.n	8002e2a <HCD_HC_OUT_IRQHandler+0x22e>
  {
    hhcd->hc[chnum].state = HC_XACTERR;
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	4413      	add	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	440b      	add	r3, r1
 8002e02:	3341      	adds	r3, #65	@ 0x41
 8002e04:	2207      	movs	r2, #7
 8002e06:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 fc72 	bl	80076fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e22:	461a      	mov	r2, r3
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	e1bf      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f004 f89f 	bl	8006f76 <USB_ReadChInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e42:	d11b      	bne.n	8002e7c <HCD_HC_OUT_IRQHandler+0x280>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	4413      	add	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	440b      	add	r3, r1
 8002e52:	3341      	adds	r3, #65	@ 0x41
 8002e54:	2209      	movs	r2, #9
 8002e56:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f004 fc4a 	bl	80076fa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e66:	78fb      	ldrb	r3, [r7, #3]
 8002e68:	015a      	lsls	r2, r3, #5
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e72:	461a      	mov	r2, r3
 8002e74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e78:	6093      	str	r3, [r2, #8]
 8002e7a:	e196      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	4611      	mov	r1, r2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f004 f876 	bl	8006f76 <USB_ReadChInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	f040 8187 	bne.w	80031a4 <HCD_HC_OUT_IRQHandler+0x5a8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3341      	adds	r3, #65	@ 0x41
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	f040 8097 	bne.w	8002fee <HCD_HC_OUT_IRQHandler+0x3f2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	440b      	add	r3, r1
 8002ece:	3341      	adds	r3, #65	@ 0x41
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4413      	add	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3340      	adds	r3, #64	@ 0x40
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	440b      	add	r3, r1
 8002ef6:	331c      	adds	r3, #28
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d00b      	beq.n	8002f16 <HCD_HC_OUT_IRQHandler+0x31a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	440b      	add	r3, r1
 8002f0c:	331c      	adds	r3, #28
 8002f0e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f10:	2b03      	cmp	r3, #3
 8002f12:	f040 8138 	bne.w	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	799b      	ldrb	r3, [r3, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d117      	bne.n	8002f4e <HCD_HC_OUT_IRQHandler+0x352>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	440b      	add	r3, r1
 8002f2e:	3305      	adds	r3, #5
 8002f30:	781a      	ldrb	r2, [r3, #0]
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f082 0201 	eor.w	r2, r2, #1
 8002f38:	b2d0      	uxtb	r0, r2
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	1c5a      	adds	r2, r3, #1
 8002f3e:	4613      	mov	r3, r2
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	440b      	add	r3, r1
 8002f48:	3305      	adds	r3, #5
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	799b      	ldrb	r3, [r3, #6]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	f040 8117 	bne.w	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	440b      	add	r3, r1
 8002f66:	332c      	adds	r3, #44	@ 0x2c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 810b 	beq.w	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	440b      	add	r3, r1
 8002f7e:	332c      	adds	r3, #44	@ 0x2c
 8002f80:	6819      	ldr	r1, [r3, #0]
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	4413      	add	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	4403      	add	r3, r0
 8002f90:	331e      	adds	r3, #30
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	440b      	add	r3, r1
 8002f96:	1e59      	subs	r1, r3, #1
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	4413      	add	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	4403      	add	r3, r0
 8002fa6:	331e      	adds	r3, #30
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fae:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80e5 	beq.w	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	440b      	add	r3, r1
 8002fcc:	3305      	adds	r3, #5
 8002fce:	781a      	ldrb	r2, [r3, #0]
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f082 0201 	eor.w	r2, r2, #1
 8002fd6:	b2d0      	uxtb	r0, r2
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	4413      	add	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3305      	adds	r3, #5
 8002fe8:	4602      	mov	r2, r0
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e0cb      	b.n	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	4413      	add	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3341      	adds	r3, #65	@ 0x41
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b03      	cmp	r3, #3
 8003002:	d10a      	bne.n	800301a <HCD_HC_OUT_IRQHandler+0x41e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003004:	78fa      	ldrb	r2, [r7, #3]
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	440b      	add	r3, r1
 8003012:	3341      	adds	r3, #65	@ 0x41
 8003014:	2202      	movs	r2, #2
 8003016:	701a      	strb	r2, [r3, #0]
 8003018:	e0b5      	b.n	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	440b      	add	r3, r1
 8003028:	3341      	adds	r3, #65	@ 0x41
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d114      	bne.n	800305a <HCD_HC_OUT_IRQHandler+0x45e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	440b      	add	r3, r1
 800303e:	3341      	adds	r3, #65	@ 0x41
 8003040:	2202      	movs	r2, #2
 8003042:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	440b      	add	r3, r1
 8003052:	3340      	adds	r3, #64	@ 0x40
 8003054:	2202      	movs	r2, #2
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	e095      	b.n	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800305a:	78fa      	ldrb	r2, [r7, #3]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	440b      	add	r3, r1
 8003068:	3341      	adds	r3, #65	@ 0x41
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b06      	cmp	r3, #6
 800306e:	d114      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x49e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	440b      	add	r3, r1
 800307e:	3341      	adds	r3, #65	@ 0x41
 8003080:	2202      	movs	r2, #2
 8003082:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	440b      	add	r3, r1
 8003092:	3340      	adds	r3, #64	@ 0x40
 8003094:	2205      	movs	r2, #5
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e075      	b.n	8003186 <HCD_HC_OUT_IRQHandler+0x58a>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	440b      	add	r3, r1
 80030a8:	3341      	adds	r3, #65	@ 0x41
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b07      	cmp	r3, #7
 80030ae:	d00a      	beq.n	80030c6 <HCD_HC_OUT_IRQHandler+0x4ca>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	440b      	add	r3, r1
 80030be:	3341      	adds	r3, #65	@ 0x41
 80030c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80030c2:	2b09      	cmp	r3, #9
 80030c4:	d170      	bne.n	80031a8 <HCD_HC_OUT_IRQHandler+0x5ac>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	440b      	add	r3, r1
 80030d4:	3341      	adds	r3, #65	@ 0x41
 80030d6:	2202      	movs	r2, #2
 80030d8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	440b      	add	r3, r1
 80030e8:	333c      	adds	r3, #60	@ 0x3c
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	1c59      	adds	r1, r3, #1
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	4403      	add	r3, r0
 80030fa:	333c      	adds	r3, #60	@ 0x3c
 80030fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	440b      	add	r3, r1
 800310c:	333c      	adds	r3, #60	@ 0x3c
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b02      	cmp	r3, #2
 8003112:	d914      	bls.n	800313e <HCD_HC_OUT_IRQHandler+0x542>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	440b      	add	r3, r1
 8003122:	333c      	adds	r3, #60	@ 0x3c
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	440b      	add	r3, r1
 8003136:	3340      	adds	r3, #64	@ 0x40
 8003138:	2204      	movs	r2, #4
 800313a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800313c:	e022      	b.n	8003184 <HCD_HC_OUT_IRQHandler+0x588>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4413      	add	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	440b      	add	r3, r1
 800314c:	3340      	adds	r3, #64	@ 0x40
 800314e:	2202      	movs	r2, #2
 8003150:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003152:	78fb      	ldrb	r3, [r7, #3]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4413      	add	r3, r2
 800315a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003168:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003170:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003184:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	440b      	add	r3, r1
 8003194:	3340      	adds	r3, #64	@ 0x40
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f006 fdcd 	bl	8009d3c <HAL_HCD_HC_NotifyURBChange_Callback>
 80031a2:	e002      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HCD_HC_OUT_IRQHandler+0x5ae>
      return;
 80031a8:	bf00      	nop
  }
}
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b08a      	sub	sp, #40	@ 0x28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	0c5b      	lsrs	r3, r3, #17
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	091b      	lsrs	r3, r3, #4
 80031e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031e4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d004      	beq.n	80031f6 <HCD_RXQLVL_IRQHandler+0x46>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b05      	cmp	r3, #5
 80031f0:	f000 80b8 	beq.w	8003364 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80031f4:	e0b9      	b.n	800336a <HCD_RXQLVL_IRQHandler+0x1ba>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80b5 	beq.w	8003368 <HCD_RXQLVL_IRQHandler+0x1b8>
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	440b      	add	r3, r1
 800320c:	3324      	adds	r3, #36	@ 0x24
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80a9 	beq.w	8003368 <HCD_RXQLVL_IRQHandler+0x1b8>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	440b      	add	r3, r1
 8003224:	3330      	adds	r3, #48	@ 0x30
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	18d1      	adds	r1, r2, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	4403      	add	r3, r0
 800323a:	332c      	adds	r3, #44	@ 0x2c
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4299      	cmp	r1, r3
 8003240:	f200 8085 	bhi.w	800334e <HCD_RXQLVL_IRQHandler+0x19e>
          (void)USB_ReadPacket(hhcd->Instance,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	440b      	add	r3, r1
 8003256:	3324      	adds	r3, #36	@ 0x24
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	b292      	uxth	r2, r2
 800325e:	4619      	mov	r1, r3
 8003260:	f003 fe1e 	bl	8006ea0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	440b      	add	r3, r1
 8003272:	3324      	adds	r3, #36	@ 0x24
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	18d1      	adds	r1, r2, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	4403      	add	r3, r0
 8003288:	3324      	adds	r3, #36	@ 0x24
 800328a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	440b      	add	r3, r1
 800329a:	3330      	adds	r3, #48	@ 0x30
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	18d1      	adds	r1, r2, r3
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	4403      	add	r3, r0
 80032b0:	3330      	adds	r3, #48	@ 0x30
 80032b2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	0cdb      	lsrs	r3, r3, #19
 80032c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032c8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	440b      	add	r3, r1
 80032d8:	331e      	adds	r3, #30
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d141      	bne.n	8003368 <HCD_RXQLVL_IRQHandler+0x1b8>
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d03e      	beq.n	8003368 <HCD_RXQLVL_IRQHandler+0x1b8>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003300:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003308:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	015a      	lsls	r2, r3, #5
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	4413      	add	r3, r2
 8003312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003316:	461a      	mov	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	440b      	add	r3, r1
 800332c:	3304      	adds	r3, #4
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2d8      	uxtb	r0, r3
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	1c5a      	adds	r2, r3, #1
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	011b      	lsls	r3, r3, #4
 8003344:	440b      	add	r3, r1
 8003346:	3304      	adds	r3, #4
 8003348:	4602      	mov	r2, r0
 800334a:	701a      	strb	r2, [r3, #0]
      break;
 800334c:	e00c      	b.n	8003368 <HCD_RXQLVL_IRQHandler+0x1b8>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	440b      	add	r3, r1
 800335c:	3340      	adds	r3, #64	@ 0x40
 800335e:	2204      	movs	r2, #4
 8003360:	701a      	strb	r2, [r3, #0]
      break;
 8003362:	e001      	b.n	8003368 <HCD_RXQLVL_IRQHandler+0x1b8>
      break;
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HCD_RXQLVL_IRQHandler+0x1ba>
      break;
 8003368:	bf00      	nop
  }
}
 800336a:	bf00      	nop
 800336c:	3728      	adds	r7, #40	@ 0x28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800339e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d10b      	bne.n	80033c2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d102      	bne.n	80033ba <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f006 fca5 	bl	8009d04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b08      	cmp	r3, #8
 80033ca:	d132      	bne.n	8003432 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f043 0308 	orr.w	r3, r3, #8
 80033d2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d126      	bne.n	800342c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7a5b      	ldrb	r3, [r3, #9]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d113      	bne.n	800340e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80033ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80033f0:	d106      	bne.n	8003400 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2102      	movs	r1, #2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f003 fea1 	bl	8007140 <USB_InitFSLSPClkSel>
 80033fe:	e011      	b.n	8003424 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2101      	movs	r1, #1
 8003406:	4618      	mov	r0, r3
 8003408:	f003 fe9a 	bl	8007140 <USB_InitFSLSPClkSel>
 800340c:	e00a      	b.n	8003424 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	79db      	ldrb	r3, [r3, #7]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d106      	bne.n	8003424 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800341c:	461a      	mov	r2, r3
 800341e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003422:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f006 fc97 	bl	8009d58 <HAL_HCD_PortEnabled_Callback>
 800342a:	e002      	b.n	8003432 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f006 fca1 	bl	8009d74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b20      	cmp	r3, #32
 800343a:	d103      	bne.n	8003444 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f043 0320 	orr.w	r3, r3, #32
 8003442:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800344a:	461a      	mov	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6013      	str	r3, [r2, #0]
}
 8003450:	bf00      	nop
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e08d      	b.n	8003586 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d106      	bne.n	8003484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f7fd fc2e 	bl	8000ce0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2224      	movs	r2, #36	@ 0x24
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d107      	bne.n	80034d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	e006      	b.n	80034e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689a      	ldr	r2, [r3, #8]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80034de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d108      	bne.n	80034fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034f6:	605a      	str	r2, [r3, #4]
 80034f8:	e007      	b.n	800350a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800351c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800352c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	69d9      	ldr	r1, [r3, #28]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1a      	ldr	r2, [r3, #32]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b20      	cmp	r3, #32
 80035a2:	d138      	bne.n	8003616 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d101      	bne.n	80035b2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035ae:	2302      	movs	r3, #2
 80035b0:	e032      	b.n	8003618 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2224      	movs	r2, #36	@ 0x24
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035e0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003612:	2300      	movs	r3, #0
 8003614:	e000      	b.n	8003618 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003616:	2302      	movs	r3, #2
  }
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b20      	cmp	r3, #32
 8003638:	d139      	bne.n	80036ae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003644:	2302      	movs	r3, #2
 8003646:	e033      	b.n	80036b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	@ 0x24
 8003654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003676:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0201 	orr.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_LCD_Init>:
  * @note   This function can be used only when the LCD is disabled.
  * @param hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t counter;
  HAL_StatusTypeDef status;

  /* Check the LCD handle allocation */
  if (hlcd == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_LCD_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e0af      	b.n	800382e <HAL_LCD_Init+0x172>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast));
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency));
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode));
  assert_param(IS_LCD_MUX_SEGMENT(hlcd->Init.MuxSegment));

  if (hlcd->State == HAL_LCD_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_LCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hlcd->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fb9e 	bl	8000e24 <HAL_LCD_MspInit>
  }

  hlcd->State = HAL_LCD_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 0201 	bic.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e00a      	b.n	800371c <HAL_LCD_Init+0x60>
  {
    hlcd->Instance->RAM[counter] = 0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3304      	adds	r3, #4
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	2200      	movs	r2, #0
 8003714:	605a      	str	r2, [r3, #4]
  for (counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	3301      	adds	r3, #1
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b0f      	cmp	r3, #15
 8003720:	d9f1      	bls.n	8003706 <HAL_LCD_Init+0x4a>
  }
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0204 	orr.w	r2, r2, #4
 8003730:	609a      	str	r2, [r3, #8]
     Set BLINKF[2:0] bits according to hlcd->Init.BlinkFrequency value
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD bit according to hlcd->Init.HighDrive value */
  MODIFY_REG(hlcd->Instance->FCR, \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	4b3f      	ldr	r3, [pc, #252]	@ (8003838 <HAL_LCD_Init+0x17c>)
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6851      	ldr	r1, [r2, #4]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6892      	ldr	r2, [r2, #8]
 8003744:	4311      	orrs	r1, r2
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800374a:	4311      	orrs	r1, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	69d2      	ldr	r2, [r2, #28]
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6a12      	ldr	r2, [r2, #32]
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6992      	ldr	r2, [r2, #24]
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003768:	4311      	orrs	r1, r2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	430b      	orrs	r3, r1
 8003770:	6053      	str	r3, [r2, #4]
              hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  status = LCD_WaitForSynchro(hlcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f862 	bl	800383c <LCD_WaitForSynchro>
 8003778:	4603      	mov	r3, r0
 800377a:	74fb      	strb	r3, [r7, #19]
  if (status != HAL_OK)
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_LCD_Init+0xca>
  {
    return status;
 8003782:	7cfb      	ldrb	r3, [r7, #19]
 8003784:	e053      	b.n	800382e <HAL_LCD_Init+0x172>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time, Pulse On Duration and Contrast:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 01fe 	bic.w	r1, r3, #254	@ 0xfe
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68da      	ldr	r2, [r3, #12]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));

  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

  /* Get timeout */
  tickstart = HAL_GetTick();
 80037be:	f7fd fe79 	bl	80014b4 <HAL_GetTick>
 80037c2:	60f8      	str	r0, [r7, #12]

  /* Wait Until the LCD is enabled */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80037c4:	e00c      	b.n	80037e0 <HAL_LCD_Init+0x124>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80037c6:	f7fd fe75 	bl	80014b4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037d4:	d904      	bls.n	80037e0 <HAL_LCD_Init+0x124>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2208      	movs	r2, #8
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e026      	b.n	800382e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d1eb      	bne.n	80037c6 <HAL_LCD_Init+0x10a>
    }
  }

  /* Get timeout */
  tickstart = HAL_GetTick();
 80037ee:	f7fd fe61 	bl	80014b4 <HAL_GetTick>
 80037f2:	60f8      	str	r0, [r7, #12]

  /*!< Wait Until the LCD Booster is ready */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 80037f4:	e00c      	b.n	8003810 <HAL_LCD_Init+0x154>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 80037f6:	f7fd fe5d 	bl	80014b4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003804:	d904      	bls.n	8003810 <HAL_LCD_Init+0x154>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2210      	movs	r2, #16
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e00e      	b.n	800382e <HAL_LCD_Init+0x172>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b10      	cmp	r3, #16
 800381c:	d1eb      	bne.n	80037f6 <HAL_LCD_Init+0x13a>
    }
  }

  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	639a      	str	r2, [r3, #56]	@ 0x38
  hlcd->State = HAL_LCD_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return status;
 800382c:	7cfb      	ldrb	r3, [r7, #19]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	fc00000e 	.word	0xfc00000e

0800383c <LCD_WaitForSynchro>:
  * @brief  Wait until the LCD FCR register is synchronized in the LCDCLK domain.
  *   This function must be called after any write operation to LCD_FCR register.
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8003844:	f7fd fe36 	bl	80014b4 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

  /* Loop until FCRSF flag is set */
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 800384a:	e00c      	b.n	8003866 <LCD_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 800384c:	f7fd fe32 	bl	80014b4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800385a:	d904      	bls.n	8003866 <LCD_WaitForSynchro+0x2a>
    {
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e007      	b.n	8003876 <LCD_WaitForSynchro+0x3a>
  while (__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0320 	and.w	r3, r3, #32
 8003870:	2b20      	cmp	r3, #32
 8003872:	d1eb      	bne.n	800384c <LCD_WaitForSynchro+0x10>
    }
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3710      	adds	r7, #16
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
	...

08003880 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b05      	ldr	r3, [pc, #20]	@ (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	@ (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40007000 	.word	0x40007000

080038a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038a4:	4b04      	ldr	r3, [pc, #16]	@ (80038b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40007000 	.word	0x40007000

080038bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038ca:	d130      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038cc:	4b23      	ldr	r3, [pc, #140]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d8:	d038      	beq.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038da:	4b20      	ldr	r3, [pc, #128]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038e2:	4a1e      	ldr	r2, [pc, #120]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003960 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2232      	movs	r2, #50	@ 0x32
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	4a1b      	ldr	r2, [pc, #108]	@ (8003964 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	3301      	adds	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003900:	e002      	b.n	8003908 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3b01      	subs	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003908:	4b14      	ldr	r3, [pc, #80]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003914:	d102      	bne.n	800391c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f2      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800391c:	4b0f      	ldr	r3, [pc, #60]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003928:	d110      	bne.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e00f      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800393a:	d007      	beq.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800393c:	4b07      	ldr	r3, [pc, #28]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003944:	4a05      	ldr	r2, [pc, #20]	@ (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003946:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800394a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40007000 	.word	0x40007000
 8003960:	20000000 	.word	0x20000000
 8003964:	431bde83 	.word	0x431bde83

08003968 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800396c:	4b05      	ldr	r3, [pc, #20]	@ (8003984 <HAL_PWREx_EnableVddUSB+0x1c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	4a04      	ldr	r2, [pc, #16]	@ (8003984 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003976:	6053      	str	r3, [r2, #4]
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	40007000 	.word	0x40007000

08003988 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003990:	f7fd fd90 	bl	80014b4 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e063      	b.n	8003a68 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7fd fb03 	bl	8000fc0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80039ba:	f241 3188 	movw	r1, #5000	@ 0x1388
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f858 	bl	8003a74 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	2120      	movs	r1, #32
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f850 	bl	8003a90 <QSPI_WaitFlagStateUntilTimeout>
 80039f0:	4603      	mov	r3, r0
 80039f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80039f4:	7afb      	ldrb	r3, [r7, #11]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d131      	bne.n	8003a5e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003a04:	f023 0310 	bic.w	r3, r3, #16
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6852      	ldr	r2, [r2, #4]
 8003a0c:	0611      	lsls	r1, r2, #24
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	68d2      	ldr	r2, [r2, #12]
 8003a12:	4311      	orrs	r1, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6812      	ldr	r2, [r2, #0]
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4b13      	ldr	r3, [pc, #76]	@ (8003a70 <HAL_QSPI_Init+0xe8>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6912      	ldr	r2, [r2, #16]
 8003a2a:	0411      	lsls	r1, r2, #16
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6952      	ldr	r2, [r2, #20]
 8003a30:	4311      	orrs	r1, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6992      	ldr	r2, [r2, #24]
 8003a36:	4311      	orrs	r1, r2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6812      	ldr	r2, [r2, #0]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0201 	orr.w	r2, r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 8003a66:	7afb      	ldrb	r3, [r7, #11]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	ffe0f8fe 	.word	0xffe0f8fe

08003a74 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003aa0:	e01a      	b.n	8003ad8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d016      	beq.n	8003ad8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fd fd03 	bl	80014b4 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e00e      	b.n	8003af6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1d6      	bne.n	8003aa2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e3ca      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b12:	4b97      	ldr	r3, [pc, #604]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b1c:	4b94      	ldr	r3, [pc, #592]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 80e4 	beq.w	8003cfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <HAL_RCC_OscConfig+0x4a>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b0c      	cmp	r3, #12
 8003b3e:	f040 808b 	bne.w	8003c58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	f040 8087 	bne.w	8003c58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b4a:	4b89      	ldr	r3, [pc, #548]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x62>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e3a2      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	4b82      	ldr	r3, [pc, #520]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d004      	beq.n	8003b7c <HAL_RCC_OscConfig+0x7c>
 8003b72:	4b7f      	ldr	r3, [pc, #508]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b7a:	e005      	b.n	8003b88 <HAL_RCC_OscConfig+0x88>
 8003b7c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b82:	091b      	lsrs	r3, r3, #4
 8003b84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d223      	bcs.n	8003bd4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fd55 	bl	8004640 <RCC_SetFlashLatencyFromMSIRange>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e383      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ba0:	4b73      	ldr	r3, [pc, #460]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a72      	ldr	r2, [pc, #456]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	f043 0308 	orr.w	r3, r3, #8
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	4b70      	ldr	r3, [pc, #448]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	496d      	ldr	r1, [pc, #436]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	4968      	ldr	r1, [pc, #416]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	604b      	str	r3, [r1, #4]
 8003bd2:	e025      	b.n	8003c20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd4:	4b66      	ldr	r3, [pc, #408]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a65      	ldr	r2, [pc, #404]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bda:	f043 0308 	orr.w	r3, r3, #8
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b63      	ldr	r3, [pc, #396]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4960      	ldr	r1, [pc, #384]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	495b      	ldr	r1, [pc, #364]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 fd15 	bl	8004640 <RCC_SetFlashLatencyFromMSIRange>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e343      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c20:	f000 fc4a 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8003c24:	4602      	mov	r2, r0
 8003c26:	4b52      	ldr	r3, [pc, #328]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	091b      	lsrs	r3, r3, #4
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	4950      	ldr	r1, [pc, #320]	@ (8003d74 <HAL_RCC_OscConfig+0x274>)
 8003c32:	5ccb      	ldrb	r3, [r1, r3]
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
 8003c3c:	4a4e      	ldr	r2, [pc, #312]	@ (8003d78 <HAL_RCC_OscConfig+0x278>)
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c40:	4b4e      	ldr	r3, [pc, #312]	@ (8003d7c <HAL_RCC_OscConfig+0x27c>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fd fbe5 	bl	8001414 <HAL_InitTick>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d052      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	e327      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d032      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c60:	4b43      	ldr	r3, [pc, #268]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a42      	ldr	r2, [pc, #264]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd fc22 	bl	80014b4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c74:	f7fd fc1e 	bl	80014b4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e310      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c86:	4b3a      	ldr	r3, [pc, #232]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c92:	4b37      	ldr	r3, [pc, #220]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a36      	ldr	r2, [pc, #216]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003c98:	f043 0308 	orr.w	r3, r3, #8
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4931      	ldr	r1, [pc, #196]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	021b      	lsls	r3, r3, #8
 8003cbe:	492c      	ldr	r1, [pc, #176]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
 8003cc4:	e01a      	b.n	8003cfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cc6:	4b2a      	ldr	r3, [pc, #168]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a29      	ldr	r2, [pc, #164]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003ccc:	f023 0301 	bic.w	r3, r3, #1
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fbef 	bl	80014b4 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cda:	f7fd fbeb 	bl	80014b4 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e2dd      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cec:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x1da>
 8003cf8:	e000      	b.n	8003cfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d074      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x21a>
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d10e      	bne.n	8003d32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d10b      	bne.n	8003d32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1a:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d064      	beq.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d160      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e2ba      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d3a:	d106      	bne.n	8003d4a <HAL_RCC_OscConfig+0x24a>
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0b      	ldr	r2, [pc, #44]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	e026      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d52:	d115      	bne.n	8003d80 <HAL_RCC_OscConfig+0x280>
 8003d54:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a05      	ldr	r2, [pc, #20]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]
 8003d60:	4b03      	ldr	r3, [pc, #12]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a02      	ldr	r2, [pc, #8]	@ (8003d70 <HAL_RCC_OscConfig+0x270>)
 8003d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	e014      	b.n	8003d98 <HAL_RCC_OscConfig+0x298>
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000
 8003d74:	0800a434 	.word	0x0800a434
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	20000004 	.word	0x20000004
 8003d80:	4ba0      	ldr	r3, [pc, #640]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a9f      	ldr	r2, [pc, #636]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	4b9d      	ldr	r3, [pc, #628]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a9c      	ldr	r2, [pc, #624]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d013      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da0:	f7fd fb88 	bl	80014b4 <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fd fb84 	bl	80014b4 <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e276      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dba:	4b92      	ldr	r3, [pc, #584]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d0f0      	beq.n	8003da8 <HAL_RCC_OscConfig+0x2a8>
 8003dc6:	e014      	b.n	8003df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fd fb74 	bl	80014b4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fb70 	bl	80014b4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	@ 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e262      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003de2:	4b88      	ldr	r3, [pc, #544]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2d0>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d060      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d005      	beq.n	8003e10 <HAL_RCC_OscConfig+0x310>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	2b0c      	cmp	r3, #12
 8003e08:	d119      	bne.n	8003e3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d116      	bne.n	8003e3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e10:	4b7c      	ldr	r3, [pc, #496]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_RCC_OscConfig+0x328>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e23f      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e28:	4b76      	ldr	r3, [pc, #472]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	061b      	lsls	r3, r3, #24
 8003e36:	4973      	ldr	r1, [pc, #460]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e3c:	e040      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d023      	beq.n	8003e8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e46:	4b6f      	ldr	r3, [pc, #444]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a6e      	ldr	r2, [pc, #440]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fd fb2f 	bl	80014b4 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fd fb2b 	bl	80014b4 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e21d      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e6c:	4b65      	ldr	r3, [pc, #404]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b62      	ldr	r3, [pc, #392]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	495f      	ldr	r1, [pc, #380]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	e018      	b.n	8003ec0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b5d      	ldr	r3, [pc, #372]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5c      	ldr	r2, [pc, #368]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9a:	f7fd fb0b 	bl	80014b4 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fd fb07 	bl	80014b4 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e1f9      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eb4:	4b53      	ldr	r3, [pc, #332]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f0      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0308 	and.w	r3, r3, #8
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d03c      	beq.n	8003f46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eda:	4a4a      	ldr	r2, [pc, #296]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fae6 	bl	80014b4 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eec:	f7fd fae2 	bl	80014b4 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e1d4      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003efe:	4b41      	ldr	r3, [pc, #260]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0ef      	beq.n	8003eec <HAL_RCC_OscConfig+0x3ec>
 8003f0c:	e01b      	b.n	8003f46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0e:	4b3d      	ldr	r3, [pc, #244]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f14:	4a3b      	ldr	r2, [pc, #236]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f16:	f023 0301 	bic.w	r3, r3, #1
 8003f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1e:	f7fd fac9 	bl	80014b4 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f26:	f7fd fac5 	bl	80014b4 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e1b7      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f38:	4b32      	ldr	r3, [pc, #200]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1ef      	bne.n	8003f26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f000 80a6 	beq.w	80040a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f58:	4b2a      	ldr	r3, [pc, #168]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10d      	bne.n	8003f80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f64:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f68:	4a26      	ldr	r2, [pc, #152]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f70:	4b24      	ldr	r3, [pc, #144]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f80:	4b21      	ldr	r3, [pc, #132]	@ (8004008 <HAL_RCC_OscConfig+0x508>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d118      	bne.n	8003fbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <HAL_RCC_OscConfig+0x508>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1d      	ldr	r2, [pc, #116]	@ (8004008 <HAL_RCC_OscConfig+0x508>)
 8003f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f98:	f7fd fa8c 	bl	80014b4 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa0:	f7fd fa88 	bl	80014b4 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e17a      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb2:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <HAL_RCC_OscConfig+0x508>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d108      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x4d8>
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd6:	e029      	b.n	800402c <HAL_RCC_OscConfig+0x52c>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b05      	cmp	r3, #5
 8003fde:	d115      	bne.n	800400c <HAL_RCC_OscConfig+0x50c>
 8003fe0:	4b08      	ldr	r3, [pc, #32]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe6:	4a07      	ldr	r2, [pc, #28]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ff0:	4b04      	ldr	r3, [pc, #16]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff6:	4a03      	ldr	r2, [pc, #12]	@ (8004004 <HAL_RCC_OscConfig+0x504>)
 8003ff8:	f043 0301 	orr.w	r3, r3, #1
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x52c>
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000
 8004008:	40007000 	.word	0x40007000
 800400c:	4b9c      	ldr	r3, [pc, #624]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800400e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004012:	4a9b      	ldr	r2, [pc, #620]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004014:	f023 0301 	bic.w	r3, r3, #1
 8004018:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800401c:	4b98      	ldr	r3, [pc, #608]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800401e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004022:	4a97      	ldr	r2, [pc, #604]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004024:	f023 0304 	bic.w	r3, r3, #4
 8004028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004034:	f7fd fa3e 	bl	80014b4 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fd fa3a 	bl	80014b4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e12a      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004052:	4b8b      	ldr	r3, [pc, #556]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ed      	beq.n	800403c <HAL_RCC_OscConfig+0x53c>
 8004060:	e015      	b.n	800408e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004062:	f7fd fa27 	bl	80014b4 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fd fa23 	bl	80014b4 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e113      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004080:	4b7f      	ldr	r3, [pc, #508]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ed      	bne.n	800406a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800408e:	7ffb      	ldrb	r3, [r7, #31]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004094:	4b7a      	ldr	r3, [pc, #488]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	4a79      	ldr	r2, [pc, #484]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800409a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800409e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80fe 	beq.w	80042a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	f040 80d0 	bne.w	8004254 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040b4:	4b72      	ldr	r3, [pc, #456]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f003 0203 	and.w	r2, r3, #3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d130      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	3b01      	subs	r3, #1
 80040d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d127      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d11f      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040f4:	2a07      	cmp	r2, #7
 80040f6:	bf14      	ite	ne
 80040f8:	2201      	movne	r2, #1
 80040fa:	2200      	moveq	r2, #0
 80040fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040fe:	4293      	cmp	r3, r2
 8004100:	d113      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	3b01      	subs	r3, #1
 8004110:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004112:	429a      	cmp	r2, r3
 8004114:	d109      	bne.n	800412a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d06e      	beq.n	8004208 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b0c      	cmp	r3, #12
 800412e:	d069      	beq.n	8004204 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004130:	4b53      	ldr	r3, [pc, #332]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800413c:	4b50      	ldr	r3, [pc, #320]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0ad      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800414c:	4b4c      	ldr	r3, [pc, #304]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4b      	ldr	r2, [pc, #300]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004158:	f7fd f9ac 	bl	80014b4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd f9a8 	bl	80014b4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e09a      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	4b43      	ldr	r3, [pc, #268]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	4b40      	ldr	r3, [pc, #256]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4b40      	ldr	r3, [pc, #256]	@ (8004284 <HAL_RCC_OscConfig+0x784>)
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800418e:	3a01      	subs	r2, #1
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004198:	0212      	lsls	r2, r2, #8
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041a0:	0852      	lsrs	r2, r2, #1
 80041a2:	3a01      	subs	r2, #1
 80041a4:	0552      	lsls	r2, r2, #21
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	0652      	lsls	r2, r2, #25
 80041b2:	4311      	orrs	r1, r2
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041b8:	0912      	lsrs	r2, r2, #4
 80041ba:	0452      	lsls	r2, r2, #17
 80041bc:	430a      	orrs	r2, r1
 80041be:	4930      	ldr	r1, [pc, #192]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80041ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80041d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041dc:	f7fd f96a 	bl	80014b4 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e4:	f7fd f966 	bl	80014b4 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e058      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041f6:	4b22      	ldr	r3, [pc, #136]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004202:	e050      	b.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e04f      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004208:	4b1d      	ldr	r3, [pc, #116]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d148      	bne.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004214:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a19      	ldr	r2, [pc, #100]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800421a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800421e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004220:	4b17      	ldr	r3, [pc, #92]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004226:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800422a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800422c:	f7fd f942 	bl	80014b4 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004234:	f7fd f93e 	bl	80014b4 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e030      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004246:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0x734>
 8004252:	e028      	b.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	2b0c      	cmp	r3, #12
 8004258:	d023      	beq.n	80042a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800425a:	4b09      	ldr	r3, [pc, #36]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a08      	ldr	r2, [pc, #32]	@ (8004280 <HAL_RCC_OscConfig+0x780>)
 8004260:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004264:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004266:	f7fd f925 	bl	80014b4 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	e00c      	b.n	8004288 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fd f921 	bl	80014b4 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d905      	bls.n	8004288 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e013      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
 8004280:	40021000 	.word	0x40021000
 8004284:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004288:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ec      	bne.n	800426e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004294:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	4905      	ldr	r1, [pc, #20]	@ (80042b0 <HAL_RCC_OscConfig+0x7b0>)
 800429a:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <HAL_RCC_OscConfig+0x7b4>)
 800429c:	4013      	ands	r3, r2
 800429e:	60cb      	str	r3, [r1, #12]
 80042a0:	e001      	b.n	80042a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40021000 	.word	0x40021000
 80042b4:	feeefffc 	.word	0xfeeefffc

080042b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0e7      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042cc:	4b75      	ldr	r3, [pc, #468]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d910      	bls.n	80042fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042da:	4b72      	ldr	r3, [pc, #456]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f023 0207 	bic.w	r2, r3, #7
 80042e2:	4970      	ldr	r1, [pc, #448]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b6e      	ldr	r3, [pc, #440]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0cf      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d010      	beq.n	800432a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	4b66      	ldr	r3, [pc, #408]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004314:	429a      	cmp	r2, r3
 8004316:	d908      	bls.n	800432a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b63      	ldr	r3, [pc, #396]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4960      	ldr	r1, [pc, #384]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d04c      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b03      	cmp	r3, #3
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	4b5a      	ldr	r3, [pc, #360]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d121      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0a6      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d107      	bne.n	8004366 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	4b54      	ldr	r3, [pc, #336]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d115      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e09a      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800436e:	4b4e      	ldr	r3, [pc, #312]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e08e      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800437e:	4b4a      	ldr	r3, [pc, #296]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e086      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b46      	ldr	r3, [pc, #280]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4943      	ldr	r1, [pc, #268]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a0:	f7fd f888 	bl	80014b4 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fd f884 	bl	80014b4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e06e      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b3a      	ldr	r3, [pc, #232]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d208      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043ec:	4b2e      	ldr	r3, [pc, #184]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	492b      	ldr	r1, [pc, #172]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043fe:	4b29      	ldr	r3, [pc, #164]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d210      	bcs.n	800442e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440c:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 0207 	bic.w	r2, r3, #7
 8004414:	4923      	ldr	r1, [pc, #140]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	4313      	orrs	r3, r2
 800441a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800441c:	4b21      	ldr	r3, [pc, #132]	@ (80044a4 <HAL_RCC_ClockConfig+0x1ec>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d001      	beq.n	800442e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e036      	b.n	800449c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d008      	beq.n	800444c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800443a:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	4918      	ldr	r1, [pc, #96]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d009      	beq.n	800446c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004458:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	4910      	ldr	r1, [pc, #64]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800446c:	f000 f824 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b0d      	ldr	r3, [pc, #52]	@ (80044a8 <HAL_RCC_ClockConfig+0x1f0>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	091b      	lsrs	r3, r3, #4
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	490b      	ldr	r1, [pc, #44]	@ (80044ac <HAL_RCC_ClockConfig+0x1f4>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	f003 031f 	and.w	r3, r3, #31
 8004484:	fa22 f303 	lsr.w	r3, r2, r3
 8004488:	4a09      	ldr	r2, [pc, #36]	@ (80044b0 <HAL_RCC_ClockConfig+0x1f8>)
 800448a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800448c:	4b09      	ldr	r3, [pc, #36]	@ (80044b4 <HAL_RCC_ClockConfig+0x1fc>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fc ffbf 	bl	8001414 <HAL_InitTick>
 8004496:	4603      	mov	r3, r0
 8004498:	72fb      	strb	r3, [r7, #11]

  return status;
 800449a:	7afb      	ldrb	r3, [r7, #11]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40022000 	.word	0x40022000
 80044a8:	40021000 	.word	0x40021000
 80044ac:	0800a434 	.word	0x0800a434
 80044b0:	20000000 	.word	0x20000000
 80044b4:	20000004 	.word	0x20000004

080044b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b089      	sub	sp, #36	@ 0x24
 80044bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	2300      	movs	r3, #0
 80044c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044c6:	4b3e      	ldr	r3, [pc, #248]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044d0:	4b3b      	ldr	r3, [pc, #236]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	f003 0303 	and.w	r3, r3, #3
 80044d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_GetSysClockFreq+0x34>
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	2b0c      	cmp	r3, #12
 80044e4:	d121      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d11e      	bne.n	800452a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044ec:	4b34      	ldr	r3, [pc, #208]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0308 	and.w	r3, r3, #8
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d107      	bne.n	8004508 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044f8:	4b31      	ldr	r3, [pc, #196]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044fe:	0a1b      	lsrs	r3, r3, #8
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e005      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004508:	4b2d      	ldr	r3, [pc, #180]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 030f 	and.w	r3, r3, #15
 8004512:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004514:	4a2b      	ldr	r2, [pc, #172]	@ (80045c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004528:	e00a      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d102      	bne.n	8004536 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004530:	4b25      	ldr	r3, [pc, #148]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004532:	61bb      	str	r3, [r7, #24]
 8004534:	e004      	b.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d101      	bne.n	8004540 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800453c:	4b23      	ldr	r3, [pc, #140]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x114>)
 800453e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d134      	bne.n	80045b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004546:	4b1e      	ldr	r3, [pc, #120]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d003      	beq.n	800455e <HAL_RCC_GetSysClockFreq+0xa6>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b03      	cmp	r3, #3
 800455a:	d003      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0xac>
 800455c:	e005      	b.n	800456a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800455e:	4b1a      	ldr	r3, [pc, #104]	@ (80045c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004560:	617b      	str	r3, [r7, #20]
      break;
 8004562:	e005      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004564:	4b19      	ldr	r3, [pc, #100]	@ (80045cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004566:	617b      	str	r3, [r7, #20]
      break;
 8004568:	e002      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	617b      	str	r3, [r7, #20]
      break;
 800456e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004570:	4b13      	ldr	r3, [pc, #76]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	091b      	lsrs	r3, r3, #4
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	3301      	adds	r3, #1
 800457c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800457e:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	0a1b      	lsrs	r3, r3, #8
 8004584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	fb03 f202 	mul.w	r2, r3, r2
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004596:	4b0a      	ldr	r3, [pc, #40]	@ (80045c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	0e5b      	lsrs	r3, r3, #25
 800459c:	f003 0303 	and.w	r3, r3, #3
 80045a0:	3301      	adds	r3, #1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045b0:	69bb      	ldr	r3, [r7, #24]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3724      	adds	r7, #36	@ 0x24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40021000 	.word	0x40021000
 80045c4:	0800a44c 	.word	0x0800a44c
 80045c8:	00f42400 	.word	0x00f42400
 80045cc:	007a1200 	.word	0x007a1200

080045d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045d4:	4b03      	ldr	r3, [pc, #12]	@ (80045e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000000 	.word	0x20000000

080045e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045ec:	f7ff fff0 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x24>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	4904      	ldr	r1, [pc, #16]	@ (8004610 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045fe:	5ccb      	ldrb	r3, [r1, r3]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004608:	4618      	mov	r0, r3
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40021000 	.word	0x40021000
 8004610:	0800a444 	.word	0x0800a444

08004614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004618:	f7ff ffda 	bl	80045d0 <HAL_RCC_GetHCLKFreq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b06      	ldr	r3, [pc, #24]	@ (8004638 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	0adb      	lsrs	r3, r3, #11
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	4904      	ldr	r1, [pc, #16]	@ (800463c <HAL_RCC_GetPCLK2Freq+0x28>)
 800462a:	5ccb      	ldrb	r3, [r1, r3]
 800462c:	f003 031f 	and.w	r3, r3, #31
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40021000 	.word	0x40021000
 800463c:	0800a444 	.word	0x0800a444

08004640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800464c:	4b2a      	ldr	r3, [pc, #168]	@ (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004658:	f7ff f922 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 800465c:	6178      	str	r0, [r7, #20]
 800465e:	e014      	b.n	800468a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b25      	ldr	r3, [pc, #148]	@ (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004664:	4a24      	ldr	r2, [pc, #144]	@ (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800466a:	6593      	str	r3, [r2, #88]	@ 0x58
 800466c:	4b22      	ldr	r3, [pc, #136]	@ (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004678:	f7ff f912 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 800467c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800467e:	4b1e      	ldr	r3, [pc, #120]	@ (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004682:	4a1d      	ldr	r2, [pc, #116]	@ (80046f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004684:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004688:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004690:	d10b      	bne.n	80046aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b80      	cmp	r3, #128	@ 0x80
 8004696:	d919      	bls.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2ba0      	cmp	r3, #160	@ 0xa0
 800469c:	d902      	bls.n	80046a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800469e:	2302      	movs	r3, #2
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	e013      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046a4:	2301      	movs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	e010      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b80      	cmp	r3, #128	@ 0x80
 80046ae:	d902      	bls.n	80046b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046b0:	2303      	movs	r3, #3
 80046b2:	613b      	str	r3, [r7, #16]
 80046b4:	e00a      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2b80      	cmp	r3, #128	@ 0x80
 80046ba:	d102      	bne.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046bc:	2302      	movs	r3, #2
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	e004      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b70      	cmp	r3, #112	@ 0x70
 80046c6:	d101      	bne.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046c8:	2301      	movs	r3, #1
 80046ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f023 0207 	bic.w	r2, r3, #7
 80046d4:	4909      	ldr	r1, [pc, #36]	@ (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d001      	beq.n	80046ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40021000 	.word	0x40021000
 80046fc:	40022000 	.word	0x40022000

08004700 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004708:	2300      	movs	r3, #0
 800470a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800470c:	2300      	movs	r3, #0
 800470e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004718:	2b00      	cmp	r3, #0
 800471a:	d041      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004720:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004724:	d02a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004726:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800472a:	d824      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800472c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004730:	d008      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004732:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004736:	d81e      	bhi.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800473c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004740:	d010      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004742:	e018      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004744:	4b86      	ldr	r3, [pc, #536]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a85      	ldr	r2, [pc, #532]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800474e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004750:	e015      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3304      	adds	r3, #4
 8004756:	2100      	movs	r1, #0
 8004758:	4618      	mov	r0, r3
 800475a:	f001 f839 	bl	80057d0 <RCCEx_PLLSAI1_Config>
 800475e:	4603      	mov	r3, r0
 8004760:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004762:	e00c      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	3320      	adds	r3, #32
 8004768:	2100      	movs	r1, #0
 800476a:	4618      	mov	r0, r3
 800476c:	f001 f924 	bl	80059b8 <RCCEx_PLLSAI2_Config>
 8004770:	4603      	mov	r3, r0
 8004772:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004774:	e003      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	74fb      	strb	r3, [r7, #19]
      break;
 800477a:	e000      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800477c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477e:	7cfb      	ldrb	r3, [r7, #19]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004784:	4b76      	ldr	r3, [pc, #472]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004792:	4973      	ldr	r1, [pc, #460]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004794:	4313      	orrs	r3, r2
 8004796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800479a:	e001      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800479c:	7cfb      	ldrb	r3, [r7, #19]
 800479e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d041      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047b4:	d02a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047b6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80047ba:	d824      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047c0:	d008      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047c6:	d81e      	bhi.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047d0:	d010      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047d2:	e018      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047d4:	4b62      	ldr	r3, [pc, #392]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a61      	ldr	r2, [pc, #388]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e0:	e015      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3304      	adds	r3, #4
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fff1 	bl	80057d0 <RCCEx_PLLSAI1_Config>
 80047ee:	4603      	mov	r3, r0
 80047f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047f2:	e00c      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	3320      	adds	r3, #32
 80047f8:	2100      	movs	r1, #0
 80047fa:	4618      	mov	r0, r3
 80047fc:	f001 f8dc 	bl	80059b8 <RCCEx_PLLSAI2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004804:	e003      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	74fb      	strb	r3, [r7, #19]
      break;
 800480a:	e000      	b.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800480c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480e:	7cfb      	ldrb	r3, [r7, #19]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004814:	4b52      	ldr	r3, [pc, #328]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004822:	494f      	ldr	r1, [pc, #316]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004824:	4313      	orrs	r3, r2
 8004826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800482a:	e001      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482c:	7cfb      	ldrb	r3, [r7, #19]
 800482e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a0 	beq.w	800497e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800483e:	2300      	movs	r3, #0
 8004840:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004842:	4b47      	ldr	r3, [pc, #284]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800484e:	2301      	movs	r3, #1
 8004850:	e000      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004852:	2300      	movs	r3, #0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485c:	4a40      	ldr	r2, [pc, #256]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004862:	6593      	str	r3, [r2, #88]	@ 0x58
 8004864:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004870:	2301      	movs	r3, #1
 8004872:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004874:	4b3b      	ldr	r3, [pc, #236]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3a      	ldr	r2, [pc, #232]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800487e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004880:	f7fc fe18 	bl	80014b4 <HAL_GetTick>
 8004884:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004888:	f7fc fe14 	bl	80014b4 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d902      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	74fb      	strb	r3, [r7, #19]
        break;
 800489a:	e005      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800489c:	4b31      	ldr	r3, [pc, #196]	@ (8004964 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ef      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d15c      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01f      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d019      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048cc:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048d8:	4b21      	ldr	r3, [pc, #132]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048de:	4a20      	ldr	r2, [pc, #128]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048f8:	4a19      	ldr	r2, [pc, #100]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490a:	f7fc fdd3 	bl	80014b4 <HAL_GetTick>
 800490e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004910:	e00b      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fc fdcf 	bl	80014b4 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d902      	bls.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	74fb      	strb	r3, [r7, #19]
            break;
 8004928:	e006      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492a:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0ec      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10c      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800493e:	4b08      	ldr	r3, [pc, #32]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800494e:	4904      	ldr	r1, [pc, #16]	@ (8004960 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004956:	e009      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004958:	7cfb      	ldrb	r3, [r7, #19]
 800495a:	74bb      	strb	r3, [r7, #18]
 800495c:	e006      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800496c:	7c7b      	ldrb	r3, [r7, #17]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d105      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004972:	4b9e      	ldr	r3, [pc, #632]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	4a9d      	ldr	r2, [pc, #628]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800497c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800498a:	4b98      	ldr	r3, [pc, #608]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f023 0203 	bic.w	r2, r3, #3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004998:	4994      	ldr	r1, [pc, #592]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00a      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049ac:	4b8f      	ldr	r3, [pc, #572]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b2:	f023 020c 	bic.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ba:	498c      	ldr	r1, [pc, #560]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0304 	and.w	r3, r3, #4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049ce:	4b87      	ldr	r3, [pc, #540]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	4983      	ldr	r1, [pc, #524]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049f0:	4b7e      	ldr	r3, [pc, #504]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049fe:	497b      	ldr	r1, [pc, #492]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0310 	and.w	r3, r3, #16
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a12:	4b76      	ldr	r3, [pc, #472]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a20:	4972      	ldr	r1, [pc, #456]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a34:	4b6d      	ldr	r3, [pc, #436]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a42:	496a      	ldr	r1, [pc, #424]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a56:	4b65      	ldr	r3, [pc, #404]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a64:	4961      	ldr	r1, [pc, #388]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a78:	4b5c      	ldr	r3, [pc, #368]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a86:	4959      	ldr	r1, [pc, #356]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a9a:	4b54      	ldr	r3, [pc, #336]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aa8:	4950      	ldr	r1, [pc, #320]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004abc:	4b4b      	ldr	r3, [pc, #300]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	4948      	ldr	r1, [pc, #288]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ade:	4b43      	ldr	r3, [pc, #268]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aec:	493f      	ldr	r1, [pc, #252]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d028      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b00:	4b3a      	ldr	r3, [pc, #232]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b0e:	4937      	ldr	r1, [pc, #220]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b1e:	d106      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b20:	4b32      	ldr	r3, [pc, #200]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	4a31      	ldr	r2, [pc, #196]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2a:	60d3      	str	r3, [r2, #12]
 8004b2c:	e011      	b.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b36:	d10c      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3304      	adds	r3, #4
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fe46 	bl	80057d0 <RCCEx_PLLSAI1_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b48:	7cfb      	ldrb	r3, [r7, #19]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b4e:	7cfb      	ldrb	r3, [r7, #19]
 8004b50:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d028      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b5e:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	491f      	ldr	r1, [pc, #124]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b7c:	d106      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4a1a      	ldr	r2, [pc, #104]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b88:	60d3      	str	r3, [r2, #12]
 8004b8a:	e011      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b94:	d10c      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fe17 	bl	80057d0 <RCCEx_PLLSAI1_Config>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ba6:	7cfb      	ldrb	r3, [r7, #19]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d02b      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bca:	4908      	ldr	r1, [pc, #32]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bda:	d109      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bdc:	4b03      	ldr	r3, [pc, #12]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4a02      	ldr	r2, [pc, #8]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004be6:	60d3      	str	r3, [r2, #12]
 8004be8:	e014      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bf8:	d10c      	bne.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	2101      	movs	r1, #1
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fde5 	bl	80057d0 <RCCEx_PLLSAI1_Config>
 8004c06:	4603      	mov	r3, r0
 8004c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c0a:	7cfb      	ldrb	r3, [r7, #19]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d001      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c10:	7cfb      	ldrb	r3, [r7, #19]
 8004c12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d02f      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c20:	4b2b      	ldr	r3, [pc, #172]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c2e:	4928      	ldr	r1, [pc, #160]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c3e:	d10d      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	2102      	movs	r1, #2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 fdc2 	bl	80057d0 <RCCEx_PLLSAI1_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d014      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	74bb      	strb	r3, [r7, #18]
 8004c5a:	e011      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3320      	adds	r3, #32
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fea3 	bl	80059b8 <RCCEx_PLLSAI2_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c7c:	7cfb      	ldrb	r3, [r7, #19]
 8004c7e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c8c:	4b10      	ldr	r3, [pc, #64]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c9a:	490d      	ldr	r1, [pc, #52]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00b      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cae:	4b08      	ldr	r3, [pc, #32]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cbe:	4904      	ldr	r1, [pc, #16]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cc6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	40021000 	.word	0x40021000

08004cd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ce6:	d13e      	bne.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004ce8:	4bb2      	ldr	r3, [pc, #712]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cf2:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cfa:	d028      	beq.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d02:	f200 8542 	bhi.w	800578a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d0c:	d005      	beq.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d14:	d00e      	beq.n	8004d34 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004d16:	f000 bd38 	b.w	800578a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d1a:	4ba6      	ldr	r3, [pc, #664]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d20:	f003 0302 	and.w	r3, r3, #2
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	f040 8532 	bne.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2e:	61fb      	str	r3, [r7, #28]
      break;
 8004d30:	f000 bd2d 	b.w	800578e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d34:	4b9f      	ldr	r3, [pc, #636]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	f040 8527 	bne.w	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004d44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d48:	61fb      	str	r3, [r7, #28]
      break;
 8004d4a:	f000 bd22 	b.w	8005792 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d4e:	4b99      	ldr	r3, [pc, #612]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d5a:	f040 851c 	bne.w	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004d5e:	4b96      	ldr	r3, [pc, #600]	@ (8004fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004d60:	61fb      	str	r3, [r7, #28]
      break;
 8004d62:	f000 bd18 	b.w	8005796 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d66:	4b93      	ldr	r3, [pc, #588]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d036      	beq.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d840      	bhi.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d003      	beq.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d020      	beq.n	8004dca <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004d88:	e039      	b.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004d8a:	4b8a      	ldr	r3, [pc, #552]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d116      	bne.n	8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004d96:	4b87      	ldr	r3, [pc, #540]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004da2:	4b84      	ldr	r3, [pc, #528]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	e005      	b.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004dae:	4b81      	ldr	r3, [pc, #516]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	4a80      	ldr	r2, [pc, #512]	@ (8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8004dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dc0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004dc2:	e01f      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	61bb      	str	r3, [r7, #24]
      break;
 8004dc8:	e01c      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dca:	4b7a      	ldr	r3, [pc, #488]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dd6:	d102      	bne.n	8004dde <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004dd8:	4b79      	ldr	r3, [pc, #484]	@ (8004fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8004dda:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004ddc:	e012      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
      break;
 8004de2:	e00f      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004de4:	4b73      	ldr	r3, [pc, #460]	@ (8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df0:	d102      	bne.n	8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004df2:	4b74      	ldr	r3, [pc, #464]	@ (8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004df4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004df6:	e005      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
      break;
 8004dfc:	e002      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61bb      	str	r3, [r7, #24]
      break;
 8004e02:	bf00      	nop
    }

    switch(PeriphClk)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e0a:	f000 80dd 	beq.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e14:	f200 84c1 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e1e:	f000 80d3 	beq.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e28:	f200 84b7 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e32:	f000 835f 	beq.w	80054f4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e3c:	f200 84ad 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e46:	f000 847e 	beq.w	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e50:	f200 84a3 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e5a:	f000 82cd 	beq.w	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e64:	f200 8499 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e6e:	f000 80ab 	beq.w	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e78:	f200 848f 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e82:	f000 8090 	beq.w	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e8c:	f200 8485 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e96:	d07f      	beq.n	8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e9e:	f200 847c 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea8:	f000 8403 	beq.w	80056b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb2:	f200 8472 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ebc:	f000 83af 	beq.w	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec6:	f200 8468 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed0:	f000 8379 	beq.w	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eda:	f200 845e 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2b80      	cmp	r3, #128	@ 0x80
 8004ee2:	f000 8344 	beq.w	800556e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b80      	cmp	r3, #128	@ 0x80
 8004eea:	f200 8456 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b20      	cmp	r3, #32
 8004ef2:	d84b      	bhi.n	8004f8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 844f 	beq.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	2b1f      	cmp	r3, #31
 8004f02:	f200 844a 	bhi.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004f06:	a201      	add	r2, pc, #4	@ (adr r2, 8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f0c:	080050f5 	.word	0x080050f5
 8004f10:	08005163 	.word	0x08005163
 8004f14:	0800579b 	.word	0x0800579b
 8004f18:	080051f7 	.word	0x080051f7
 8004f1c:	0800579b 	.word	0x0800579b
 8004f20:	0800579b 	.word	0x0800579b
 8004f24:	0800579b 	.word	0x0800579b
 8004f28:	0800527d 	.word	0x0800527d
 8004f2c:	0800579b 	.word	0x0800579b
 8004f30:	0800579b 	.word	0x0800579b
 8004f34:	0800579b 	.word	0x0800579b
 8004f38:	0800579b 	.word	0x0800579b
 8004f3c:	0800579b 	.word	0x0800579b
 8004f40:	0800579b 	.word	0x0800579b
 8004f44:	0800579b 	.word	0x0800579b
 8004f48:	080052f5 	.word	0x080052f5
 8004f4c:	0800579b 	.word	0x0800579b
 8004f50:	0800579b 	.word	0x0800579b
 8004f54:	0800579b 	.word	0x0800579b
 8004f58:	0800579b 	.word	0x0800579b
 8004f5c:	0800579b 	.word	0x0800579b
 8004f60:	0800579b 	.word	0x0800579b
 8004f64:	0800579b 	.word	0x0800579b
 8004f68:	0800579b 	.word	0x0800579b
 8004f6c:	0800579b 	.word	0x0800579b
 8004f70:	0800579b 	.word	0x0800579b
 8004f74:	0800579b 	.word	0x0800579b
 8004f78:	0800579b 	.word	0x0800579b
 8004f7c:	0800579b 	.word	0x0800579b
 8004f80:	0800579b 	.word	0x0800579b
 8004f84:	0800579b 	.word	0x0800579b
 8004f88:	08005377 	.word	0x08005377
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b40      	cmp	r3, #64	@ 0x40
 8004f90:	f000 82c1 	beq.w	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004f94:	f000 bc01 	b.w	800579a <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004f98:	69b9      	ldr	r1, [r7, #24]
 8004f9a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004f9e:	f000 fde9 	bl	8005b74 <RCCEx_GetSAIxPeriphCLKFreq>
 8004fa2:	61f8      	str	r0, [r7, #28]
      break;
 8004fa4:	e3fa      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004fac:	f000 fde2 	bl	8005b74 <RCCEx_GetSAIxPeriphCLKFreq>
 8004fb0:	61f8      	str	r0, [r7, #28]
      break;
 8004fb2:	e3f3      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	0003d090 	.word	0x0003d090
 8004fbc:	0800a44c 	.word	0x0800a44c
 8004fc0:	00f42400 	.word	0x00f42400
 8004fc4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004fc8:	4ba9      	ldr	r3, [pc, #676]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004fda:	d00c      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004fe2:	d87f      	bhi.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004fea:	d04e      	beq.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ff2:	d01d      	beq.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004ff4:	e076      	b.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d172      	bne.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005002:	4b9b      	ldr	r3, [pc, #620]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800500e:	4b98      	ldr	r3, [pc, #608]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	e005      	b.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800501a:	4b95      	ldr	r3, [pc, #596]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800501c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005020:	0a1b      	lsrs	r3, r3, #8
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	4a93      	ldr	r2, [pc, #588]	@ (8005274 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8005028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800502c:	61fb      	str	r3, [r7, #28]
          break;
 800502e:	e05b      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005030:	4b8f      	ldr	r3, [pc, #572]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005038:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800503c:	d156      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800503e:	4b8c      	ldr	r3, [pc, #560]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005046:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800504a:	d14f      	bne.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800504c:	4b88      	ldr	r3, [pc, #544]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005056:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	fb03 f202 	mul.w	r2, r3, r2
 8005060:	4b83      	ldr	r3, [pc, #524]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	091b      	lsrs	r3, r3, #4
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	3301      	adds	r3, #1
 800506c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005070:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8005072:	4b7f      	ldr	r3, [pc, #508]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	0d5b      	lsrs	r3, r3, #21
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	3301      	adds	r3, #1
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	fbb2 f3f3 	udiv	r3, r2, r3
 8005086:	61fb      	str	r3, [r7, #28]
          break;
 8005088:	e030      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800508a:	4b79      	ldr	r3, [pc, #484]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005096:	d12b      	bne.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8005098:	4b75      	ldr	r3, [pc, #468]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050a4:	d124      	bne.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80050a6:	4b72      	ldr	r3, [pc, #456]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	0a1b      	lsrs	r3, r3, #8
 80050ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050b0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	fb03 f202 	mul.w	r2, r3, r2
 80050ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	3301      	adds	r3, #1
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80050cc:	4b68      	ldr	r3, [pc, #416]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	0d5b      	lsrs	r3, r3, #21
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	61fb      	str	r3, [r7, #28]
          break;
 80050e2:	e005      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80050e4:	bf00      	nop
 80050e6:	e359      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050e8:	bf00      	nop
 80050ea:	e357      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050ec:	bf00      	nop
 80050ee:	e355      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80050f0:	bf00      	nop
        break;
 80050f2:	e353      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80050f4:	4b5e      	ldr	r3, [pc, #376]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d827      	bhi.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	0800511d 	.word	0x0800511d
 8005110:	08005125 	.word	0x08005125
 8005114:	0800512d 	.word	0x0800512d
 8005118:	08005141 	.word	0x08005141
          frequency = HAL_RCC_GetPCLK2Freq();
 800511c:	f7ff fa7a 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 8005120:	61f8      	str	r0, [r7, #28]
          break;
 8005122:	e01d      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8005124:	f7ff f9c8 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8005128:	61f8      	str	r0, [r7, #28]
          break;
 800512a:	e019      	b.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800512c:	4b50      	ldr	r3, [pc, #320]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005138:	d10f      	bne.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800513a:	4b4f      	ldr	r3, [pc, #316]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800513c:	61fb      	str	r3, [r7, #28]
          break;
 800513e:	e00c      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005140:	4b4b      	ldr	r3, [pc, #300]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d107      	bne.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005152:	61fb      	str	r3, [r7, #28]
          break;
 8005154:	e003      	b.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8005156:	bf00      	nop
 8005158:	e320      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800515a:	bf00      	nop
 800515c:	e31e      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800515e:	bf00      	nop
        break;
 8005160:	e31c      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005162:	4b43      	ldr	r3, [pc, #268]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f003 030c 	and.w	r3, r3, #12
 800516c:	613b      	str	r3, [r7, #16]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d83a      	bhi.n	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8005174:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051b1 	.word	0x080051b1
 8005180:	080051eb 	.word	0x080051eb
 8005184:	080051eb 	.word	0x080051eb
 8005188:	080051eb 	.word	0x080051eb
 800518c:	080051b9 	.word	0x080051b9
 8005190:	080051eb 	.word	0x080051eb
 8005194:	080051eb 	.word	0x080051eb
 8005198:	080051eb 	.word	0x080051eb
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051eb 	.word	0x080051eb
 80051a4:	080051eb 	.word	0x080051eb
 80051a8:	080051eb 	.word	0x080051eb
 80051ac:	080051d5 	.word	0x080051d5
          frequency = HAL_RCC_GetPCLK1Freq();
 80051b0:	f7ff fa1a 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80051b4:	61f8      	str	r0, [r7, #28]
          break;
 80051b6:	e01d      	b.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80051b8:	f7ff f97e 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80051bc:	61f8      	str	r0, [r7, #28]
          break;
 80051be:	e019      	b.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051cc:	d10f      	bne.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80051ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80051d0:	61fb      	str	r3, [r7, #28]
          break;
 80051d2:	e00c      	b.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051d4:	4b26      	ldr	r3, [pc, #152]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d107      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80051e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051e6:	61fb      	str	r3, [r7, #28]
          break;
 80051e8:	e003      	b.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80051ea:	bf00      	nop
 80051ec:	e2d6      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051ee:	bf00      	nop
 80051f0:	e2d4      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80051f2:	bf00      	nop
        break;
 80051f4:	e2d2      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80051f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b30      	cmp	r3, #48	@ 0x30
 8005206:	d021      	beq.n	800524c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b30      	cmp	r3, #48	@ 0x30
 800520c:	d829      	bhi.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	2b20      	cmp	r3, #32
 8005212:	d011      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	2b20      	cmp	r3, #32
 8005218:	d823      	bhi.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b10      	cmp	r3, #16
 8005224:	d004      	beq.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8005226:	e01c      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005228:	f7ff f9de 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 800522c:	61f8      	str	r0, [r7, #28]
          break;
 800522e:	e01d      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8005230:	f7ff f942 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8005234:	61f8      	str	r0, [r7, #28]
          break;
 8005236:	e019      	b.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005238:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005244:	d10f      	bne.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8005246:	4b0c      	ldr	r3, [pc, #48]	@ (8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8005248:	61fb      	str	r3, [r7, #28]
          break;
 800524a:	e00c      	b.n	8005266 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800524c:	4b08      	ldr	r3, [pc, #32]	@ (8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d107      	bne.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800525a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800525e:	61fb      	str	r3, [r7, #28]
          break;
 8005260:	e003      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8005262:	bf00      	nop
 8005264:	e29a      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005266:	bf00      	nop
 8005268:	e298      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800526a:	bf00      	nop
        break;
 800526c:	e296      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800526e:	bf00      	nop
 8005270:	40021000 	.word	0x40021000
 8005274:	0800a44c 	.word	0x0800a44c
 8005278:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800527c:	4b9b      	ldr	r3, [pc, #620]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2bc0      	cmp	r3, #192	@ 0xc0
 800528c:	d021      	beq.n	80052d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2bc0      	cmp	r3, #192	@ 0xc0
 8005292:	d829      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d011      	beq.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b80      	cmp	r3, #128	@ 0x80
 800529e:	d823      	bhi.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d004      	beq.n	80052b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80052ac:	e01c      	b.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052ae:	f7ff f99b 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80052b2:	61f8      	str	r0, [r7, #28]
          break;
 80052b4:	e01d      	b.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80052b6:	f7ff f8ff 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80052ba:	61f8      	str	r0, [r7, #28]
          break;
 80052bc:	e019      	b.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052be:	4b8b      	ldr	r3, [pc, #556]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ca:	d10f      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80052cc:	4b88      	ldr	r3, [pc, #544]	@ (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80052ce:	61fb      	str	r3, [r7, #28]
          break;
 80052d0:	e00c      	b.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80052d2:	4b86      	ldr	r3, [pc, #536]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d107      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80052e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e4:	61fb      	str	r3, [r7, #28]
          break;
 80052e6:	e003      	b.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80052e8:	bf00      	nop
 80052ea:	e257      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80052ec:	bf00      	nop
 80052ee:	e255      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80052f0:	bf00      	nop
        break;
 80052f2:	e253      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80052f4:	4b7d      	ldr	r3, [pc, #500]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005306:	d025      	beq.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800530e:	d82c      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005316:	d013      	beq.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800531e:	d824      	bhi.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800532c:	d004      	beq.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800532e:	e01c      	b.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005330:	f7ff f95a 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005334:	61f8      	str	r0, [r7, #28]
          break;
 8005336:	e01d      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8005338:	f7ff f8be 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800533c:	61f8      	str	r0, [r7, #28]
          break;
 800533e:	e019      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005340:	4b6a      	ldr	r3, [pc, #424]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800534c:	d10f      	bne.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800534e:	4b68      	ldr	r3, [pc, #416]	@ (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8005350:	61fb      	str	r3, [r7, #28]
          break;
 8005352:	e00c      	b.n	800536e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005354:	4b65      	ldr	r3, [pc, #404]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b02      	cmp	r3, #2
 8005360:	d107      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005366:	61fb      	str	r3, [r7, #28]
          break;
 8005368:	e003      	b.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800536a:	bf00      	nop
 800536c:	e216      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800536e:	bf00      	nop
 8005370:	e214      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005372:	bf00      	nop
        break;
 8005374:	e212      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005376:	4b5d      	ldr	r3, [pc, #372]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005388:	d025      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005390:	d82c      	bhi.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005398:	d013      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053a0:	d824      	bhi.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d004      	beq.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ae:	d004      	beq.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80053b0:	e01c      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80053b2:	f7ff f919 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80053b6:	61f8      	str	r0, [r7, #28]
          break;
 80053b8:	e01d      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80053ba:	f7ff f87d 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80053be:	61f8      	str	r0, [r7, #28]
          break;
 80053c0:	e019      	b.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053c2:	4b4a      	ldr	r3, [pc, #296]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ce:	d10f      	bne.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80053d0:	4b47      	ldr	r3, [pc, #284]	@ (80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80053d2:	61fb      	str	r3, [r7, #28]
          break;
 80053d4:	e00c      	b.n	80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053d6:	4b45      	ldr	r3, [pc, #276]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d107      	bne.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80053e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e8:	61fb      	str	r3, [r7, #28]
          break;
 80053ea:	e003      	b.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80053ec:	bf00      	nop
 80053ee:	e1d5      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053f0:	bf00      	nop
 80053f2:	e1d3      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80053f4:	bf00      	nop
        break;
 80053f6:	e1d1      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80053f8:	4b3c      	ldr	r3, [pc, #240]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005402:	613b      	str	r3, [r7, #16]
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800540a:	d00c      	beq.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005412:	d864      	bhi.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800541a:	d008      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005422:	d030      	beq.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8005424:	e05b      	b.n	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005426:	f7ff f847 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800542a:	61f8      	str	r0, [r7, #28]
          break;
 800542c:	e05c      	b.n	80054e8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800542e:	4b2f      	ldr	r3, [pc, #188]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005436:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800543a:	d152      	bne.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800543c:	4b2b      	ldr	r3, [pc, #172]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d04c      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005448:	4b28      	ldr	r3, [pc, #160]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	0a1b      	lsrs	r3, r3, #8
 800544e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005452:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	fb03 f202 	mul.w	r2, r3, r2
 800545c:	4b23      	ldr	r3, [pc, #140]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	f003 0307 	and.w	r3, r3, #7
 8005466:	3301      	adds	r3, #1
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800546e:	4b1f      	ldr	r3, [pc, #124]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	0e5b      	lsrs	r3, r3, #25
 8005474:	f003 0303 	and.w	r3, r3, #3
 8005478:	3301      	adds	r3, #1
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005482:	61fb      	str	r3, [r7, #28]
          break;
 8005484:	e02d      	b.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005486:	4b19      	ldr	r3, [pc, #100]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800548e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005492:	d128      	bne.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8005494:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80054a0:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	0a1b      	lsrs	r3, r3, #8
 80054a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054aa:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	fb03 f202 	mul.w	r2, r3, r2
 80054b4:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	3301      	adds	r3, #1
 80054c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80054c6:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	0e5b      	lsrs	r3, r3, #25
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	3301      	adds	r3, #1
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	69ba      	ldr	r2, [r7, #24]
 80054d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80054da:	61fb      	str	r3, [r7, #28]
          break;
 80054dc:	e003      	b.n	80054e6 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80054de:	bf00      	nop
 80054e0:	e15c      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80054e2:	bf00      	nop
 80054e4:	e15a      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80054e6:	bf00      	nop
        break;
 80054e8:	e158      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000
 80054f0:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80054f4:	4b9d      	ldr	r3, [pc, #628]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054fe:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d103      	bne.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005506:	f7ff f885 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 800550a:	61f8      	str	r0, [r7, #28]
        break;
 800550c:	e146      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800550e:	f7fe ffd3 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 8005512:	61f8      	str	r0, [r7, #28]
        break;
 8005514:	e142      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005516:	4b95      	ldr	r3, [pc, #596]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005528:	d013      	beq.n	8005552 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005530:	d819      	bhi.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800553e:	d004      	beq.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8005540:	e011      	b.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005542:	f7ff f851 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005546:	61f8      	str	r0, [r7, #28]
          break;
 8005548:	e010      	b.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800554a:	f7fe ffb5 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800554e:	61f8      	str	r0, [r7, #28]
          break;
 8005550:	e00c      	b.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005552:	4b86      	ldr	r3, [pc, #536]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800555e:	d104      	bne.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8005560:	4b83      	ldr	r3, [pc, #524]	@ (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005562:	61fb      	str	r3, [r7, #28]
          break;
 8005564:	e001      	b.n	800556a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8005566:	bf00      	nop
 8005568:	e118      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800556a:	bf00      	nop
        break;
 800556c:	e116      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800556e:	4b7f      	ldr	r3, [pc, #508]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005574:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005578:	613b      	str	r3, [r7, #16]
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005580:	d013      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005588:	d819      	bhi.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005596:	d004      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8005598:	e011      	b.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 800559a:	f7ff f825 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 800559e:	61f8      	str	r0, [r7, #28]
          break;
 80055a0:	e010      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80055a2:	f7fe ff89 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80055a6:	61f8      	str	r0, [r7, #28]
          break;
 80055a8:	e00c      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80055aa:	4b70      	ldr	r3, [pc, #448]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055b6:	d104      	bne.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80055b8:	4b6d      	ldr	r3, [pc, #436]	@ (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80055ba:	61fb      	str	r3, [r7, #28]
          break;
 80055bc:	e001      	b.n	80055c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80055be:	bf00      	nop
 80055c0:	e0ec      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80055c2:	bf00      	nop
        break;
 80055c4:	e0ea      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80055c6:	4b69      	ldr	r3, [pc, #420]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d8:	d013      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055e0:	d819      	bhi.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d004      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ee:	d004      	beq.n	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80055f0:	e011      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80055f2:	f7fe fff9 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80055f6:	61f8      	str	r0, [r7, #28]
          break;
 80055f8:	e010      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80055fa:	f7fe ff5d 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80055fe:	61f8      	str	r0, [r7, #28]
          break;
 8005600:	e00c      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005602:	4b5a      	ldr	r3, [pc, #360]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800560a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800560e:	d104      	bne.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8005610:	4b57      	ldr	r3, [pc, #348]	@ (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005612:	61fb      	str	r3, [r7, #28]
          break;
 8005614:	e001      	b.n	800561a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8005616:	bf00      	nop
 8005618:	e0c0      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800561a:	bf00      	nop
        break;
 800561c:	e0be      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800561e:	4b53      	ldr	r3, [pc, #332]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005630:	d02c      	beq.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005638:	d833      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005640:	d01a      	beq.n	8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005648:	d82b      	bhi.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d004      	beq.n	800565a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005656:	d004      	beq.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8005658:	e023      	b.n	80056a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800565a:	f7fe ffc5 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 800565e:	61f8      	str	r0, [r7, #28]
          break;
 8005660:	e026      	b.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005662:	4b42      	ldr	r3, [pc, #264]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005664:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b02      	cmp	r3, #2
 800566e:	d11a      	bne.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8005670:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005674:	61fb      	str	r3, [r7, #28]
          break;
 8005676:	e016      	b.n	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005678:	4b3c      	ldr	r3, [pc, #240]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005680:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005684:	d111      	bne.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8005686:	4b3a      	ldr	r3, [pc, #232]	@ (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8005688:	61fb      	str	r3, [r7, #28]
          break;
 800568a:	e00e      	b.n	80056aa <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800568c:	4b37      	ldr	r3, [pc, #220]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800568e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b02      	cmp	r3, #2
 8005698:	d109      	bne.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 800569a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800569e:	61fb      	str	r3, [r7, #28]
          break;
 80056a0:	e005      	b.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80056a2:	bf00      	nop
 80056a4:	e07a      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056a6:	bf00      	nop
 80056a8:	e078      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056aa:	bf00      	nop
 80056ac:	e076      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80056ae:	bf00      	nop
        break;
 80056b0:	e074      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80056b2:	4b2e      	ldr	r3, [pc, #184]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80056bc:	613b      	str	r3, [r7, #16]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056c4:	d02c      	beq.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056cc:	d833      	bhi.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d4:	d01a      	beq.n	800570c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056dc:	d82b      	bhi.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d004      	beq.n	80056ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ea:	d004      	beq.n	80056f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80056ec:	e023      	b.n	8005736 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80056ee:	f7fe ff7b 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80056f2:	61f8      	str	r0, [r7, #28]
          break;
 80056f4:	e026      	b.n	8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80056f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b02      	cmp	r3, #2
 8005702:	d11a      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8005704:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005708:	61fb      	str	r3, [r7, #28]
          break;
 800570a:	e016      	b.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800570c:	4b17      	ldr	r3, [pc, #92]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005718:	d111      	bne.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800571c:	61fb      	str	r3, [r7, #28]
          break;
 800571e:	e00e      	b.n	800573e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005720:	4b12      	ldr	r3, [pc, #72]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d109      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800572e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005732:	61fb      	str	r3, [r7, #28]
          break;
 8005734:	e005      	b.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8005736:	bf00      	nop
 8005738:	e030      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800573a:	bf00      	nop
 800573c:	e02e      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800573e:	bf00      	nop
 8005740:	e02c      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8005742:	bf00      	nop
        break;
 8005744:	e02a      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8005746:	4b09      	ldr	r3, [pc, #36]	@ (800576c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8005748:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800574c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005750:	613b      	str	r3, [r7, #16]
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800575e:	d009      	beq.n	8005774 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8005760:	e012      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005762:	f7fe ff41 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8005766:	61f8      	str	r0, [r7, #28]
          break;
 8005768:	e00e      	b.n	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 800576a:	bf00      	nop
 800576c:	40021000 	.word	0x40021000
 8005770:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005774:	4b0c      	ldr	r3, [pc, #48]	@ (80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800577c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005780:	d101      	bne.n	8005786 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8005782:	4b0a      	ldr	r3, [pc, #40]	@ (80057ac <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005784:	61fb      	str	r3, [r7, #28]
          break;
 8005786:	bf00      	nop
        break;
 8005788:	e008      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800578a:	bf00      	nop
 800578c:	e006      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800578e:	bf00      	nop
 8005790:	e004      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005792:	bf00      	nop
 8005794:	e002      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8005796:	bf00      	nop
 8005798:	e000      	b.n	800579c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800579a:	bf00      	nop
    }
  }

  return(frequency);
 800579c:	69fb      	ldr	r3, [r7, #28]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	40021000 	.word	0x40021000
 80057ac:	00f42400 	.word	0x00f42400

080057b0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a04      	ldr	r2, [pc, #16]	@ (80057cc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80057ba:	f043 0304 	orr.w	r3, r3, #4
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40021000 	.word	0x40021000

080057d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057de:	4b75      	ldr	r3, [pc, #468]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d018      	beq.n	800581c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057ea:	4b72      	ldr	r3, [pc, #456]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0203 	and.w	r2, r3, #3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d10d      	bne.n	8005816 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
       ||
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005802:	4b6c      	ldr	r3, [pc, #432]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	685b      	ldr	r3, [r3, #4]
       ||
 8005812:	429a      	cmp	r2, r3
 8005814:	d047      	beq.n	80058a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	73fb      	strb	r3, [r7, #15]
 800581a:	e044      	b.n	80058a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d018      	beq.n	8005856 <RCCEx_PLLSAI1_Config+0x86>
 8005824:	2b03      	cmp	r3, #3
 8005826:	d825      	bhi.n	8005874 <RCCEx_PLLSAI1_Config+0xa4>
 8005828:	2b01      	cmp	r3, #1
 800582a:	d002      	beq.n	8005832 <RCCEx_PLLSAI1_Config+0x62>
 800582c:	2b02      	cmp	r3, #2
 800582e:	d009      	beq.n	8005844 <RCCEx_PLLSAI1_Config+0x74>
 8005830:	e020      	b.n	8005874 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005832:	4b60      	ldr	r3, [pc, #384]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d11d      	bne.n	800587a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005842:	e01a      	b.n	800587a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005844:	4b5b      	ldr	r3, [pc, #364]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800584c:	2b00      	cmp	r3, #0
 800584e:	d116      	bne.n	800587e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005854:	e013      	b.n	800587e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005856:	4b57      	ldr	r3, [pc, #348]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10f      	bne.n	8005882 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005862:	4b54      	ldr	r3, [pc, #336]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005872:	e006      	b.n	8005882 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	73fb      	strb	r3, [r7, #15]
      break;
 8005878:	e004      	b.n	8005884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005882:	bf00      	nop
    }

    if(status == HAL_OK)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800588a:	4b4a      	ldr	r3, [pc, #296]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6819      	ldr	r1, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	3b01      	subs	r3, #1
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	430b      	orrs	r3, r1
 80058a0:	4944      	ldr	r1, [pc, #272]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d17d      	bne.n	80059a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80058ac:	4b41      	ldr	r3, [pc, #260]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a40      	ldr	r2, [pc, #256]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058b8:	f7fb fdfc 	bl	80014b4 <HAL_GetTick>
 80058bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058be:	e009      	b.n	80058d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058c0:	f7fb fdf8 	bl	80014b4 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d902      	bls.n	80058d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	73fb      	strb	r3, [r7, #15]
        break;
 80058d2:	e005      	b.n	80058e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80058d4:	4b37      	ldr	r3, [pc, #220]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1ef      	bne.n	80058c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d160      	bne.n	80059a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d111      	bne.n	8005910 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ec:	4b31      	ldr	r3, [pc, #196]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80058f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	6892      	ldr	r2, [r2, #8]
 80058fc:	0211      	lsls	r1, r2, #8
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	68d2      	ldr	r2, [r2, #12]
 8005902:	0912      	lsrs	r2, r2, #4
 8005904:	0452      	lsls	r2, r2, #17
 8005906:	430a      	orrs	r2, r1
 8005908:	492a      	ldr	r1, [pc, #168]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
 800590e:	e027      	b.n	8005960 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d112      	bne.n	800593c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005916:	4b27      	ldr	r3, [pc, #156]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800591e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6892      	ldr	r2, [r2, #8]
 8005926:	0211      	lsls	r1, r2, #8
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6912      	ldr	r2, [r2, #16]
 800592c:	0852      	lsrs	r2, r2, #1
 800592e:	3a01      	subs	r2, #1
 8005930:	0552      	lsls	r2, r2, #21
 8005932:	430a      	orrs	r2, r1
 8005934:	491f      	ldr	r1, [pc, #124]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]
 800593a:	e011      	b.n	8005960 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800593c:	4b1d      	ldr	r3, [pc, #116]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005944:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6892      	ldr	r2, [r2, #8]
 800594c:	0211      	lsls	r1, r2, #8
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6952      	ldr	r2, [r2, #20]
 8005952:	0852      	lsrs	r2, r2, #1
 8005954:	3a01      	subs	r2, #1
 8005956:	0652      	lsls	r2, r2, #25
 8005958:	430a      	orrs	r2, r1
 800595a:	4916      	ldr	r1, [pc, #88]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800595c:	4313      	orrs	r3, r2
 800595e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005960:	4b14      	ldr	r3, [pc, #80]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a13      	ldr	r2, [pc, #76]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800596a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596c:	f7fb fda2 	bl	80014b4 <HAL_GetTick>
 8005970:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005972:	e009      	b.n	8005988 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005974:	f7fb fd9e 	bl	80014b4 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d902      	bls.n	8005988 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	73fb      	strb	r3, [r7, #15]
          break;
 8005986:	e005      	b.n	8005994 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005988:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d0ef      	beq.n	8005974 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800599a:	4b06      	ldr	r3, [pc, #24]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	4904      	ldr	r1, [pc, #16]	@ (80059b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	40021000 	.word	0x40021000

080059b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059c6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d018      	beq.n	8005a04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80059d2:	4b67      	ldr	r3, [pc, #412]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0203 	and.w	r2, r3, #3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d10d      	bne.n	80059fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
       ||
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059ea:	4b61      	ldr	r3, [pc, #388]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
       ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d047      	beq.n	8005a8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	73fb      	strb	r3, [r7, #15]
 8005a02:	e044      	b.n	8005a8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d018      	beq.n	8005a3e <RCCEx_PLLSAI2_Config+0x86>
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d825      	bhi.n	8005a5c <RCCEx_PLLSAI2_Config+0xa4>
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d002      	beq.n	8005a1a <RCCEx_PLLSAI2_Config+0x62>
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d009      	beq.n	8005a2c <RCCEx_PLLSAI2_Config+0x74>
 8005a18:	e020      	b.n	8005a5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a1a:	4b55      	ldr	r3, [pc, #340]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d11d      	bne.n	8005a62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2a:	e01a      	b.n	8005a62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a2c:	4b50      	ldr	r3, [pc, #320]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d116      	bne.n	8005a66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a3c:	e013      	b.n	8005a66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a3e:	4b4c      	ldr	r3, [pc, #304]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a4a:	4b49      	ldr	r3, [pc, #292]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a5a:	e006      	b.n	8005a6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a60:	e004      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a62:	bf00      	nop
 8005a64:	e002      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a72:	4b3f      	ldr	r3, [pc, #252]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6819      	ldr	r1, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	430b      	orrs	r3, r1
 8005a88:	4939      	ldr	r1, [pc, #228]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d167      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a94:	4b36      	ldr	r3, [pc, #216]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a35      	ldr	r2, [pc, #212]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa0:	f7fb fd08 	bl	80014b4 <HAL_GetTick>
 8005aa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005aa6:	e009      	b.n	8005abc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aa8:	f7fb fd04 	bl	80014b4 <HAL_GetTick>
 8005aac:	4602      	mov	r2, r0
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d902      	bls.n	8005abc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aba:	e005      	b.n	8005ac8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005abc:	4b2c      	ldr	r3, [pc, #176]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d1ef      	bne.n	8005aa8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d14a      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d111      	bne.n	8005af8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ad4:	4b26      	ldr	r3, [pc, #152]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005adc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	6892      	ldr	r2, [r2, #8]
 8005ae4:	0211      	lsls	r1, r2, #8
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	0912      	lsrs	r2, r2, #4
 8005aec:	0452      	lsls	r2, r2, #17
 8005aee:	430a      	orrs	r2, r1
 8005af0:	491f      	ldr	r1, [pc, #124]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	614b      	str	r3, [r1, #20]
 8005af6:	e011      	b.n	8005b1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005af8:	4b1d      	ldr	r3, [pc, #116]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005b00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	6892      	ldr	r2, [r2, #8]
 8005b08:	0211      	lsls	r1, r2, #8
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6912      	ldr	r2, [r2, #16]
 8005b0e:	0852      	lsrs	r2, r2, #1
 8005b10:	3a01      	subs	r2, #1
 8005b12:	0652      	lsls	r2, r2, #25
 8005b14:	430a      	orrs	r2, r1
 8005b16:	4916      	ldr	r1, [pc, #88]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005b1c:	4b14      	ldr	r3, [pc, #80]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a13      	ldr	r2, [pc, #76]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fb fcc4 	bl	80014b4 <HAL_GetTick>
 8005b2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b2e:	e009      	b.n	8005b44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b30:	f7fb fcc0 	bl	80014b4 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d902      	bls.n	8005b44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	73fb      	strb	r3, [r7, #15]
          break;
 8005b42:	e005      	b.n	8005b50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d0ef      	beq.n	8005b30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b56:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	4904      	ldr	r1, [pc, #16]	@ (8005b70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	40021000 	.word	0x40021000

08005b74 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b089      	sub	sp, #36	@ 0x24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b90:	d10c      	bne.n	8005bac <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005b92:	4b6e      	ldr	r3, [pc, #440]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b98:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005b9c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005ba4:	d112      	bne.n	8005bcc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8005d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e00f      	b.n	8005bcc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bb2:	d10b      	bne.n	8005bcc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005bb4:	4b65      	ldr	r3, [pc, #404]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bba:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005bbe:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005bc6:	d101      	bne.n	8005bcc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005bc8:	4b61      	ldr	r3, [pc, #388]	@ (8005d50 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005bca:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f040 80b4 	bne.w	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005bde:	d003      	beq.n	8005be8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005be6:	d135      	bne.n	8005c54 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005be8:	4b58      	ldr	r3, [pc, #352]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf4:	f040 80a1 	bne.w	8005d3a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8005bf8:	4b54      	ldr	r3, [pc, #336]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 809a 	beq.w	8005d3a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c06:	4b51      	ldr	r3, [pc, #324]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	091b      	lsrs	r3, r3, #4
 8005c0c:	f003 0307 	and.w	r3, r3, #7
 8005c10:	3301      	adds	r3, #1
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c18:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c24:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005c2c:	4b47      	ldr	r3, [pc, #284]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005c38:	2311      	movs	r3, #17
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e001      	b.n	8005c42 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005c3e:	2307      	movs	r3, #7
 8005c40:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	fb03 f202 	mul.w	r2, r3, r2
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005c52:	e072      	b.n	8005d3a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d133      	bne.n	8005cc2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005c5a:	4b3c      	ldr	r3, [pc, #240]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c66:	d169      	bne.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005c68:	4b38      	ldr	r3, [pc, #224]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d063      	beq.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005c74:	4b35      	ldr	r3, [pc, #212]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	091b      	lsrs	r3, r3, #4
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	3301      	adds	r3, #1
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c86:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005c88:	4b30      	ldr	r3, [pc, #192]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c92:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10a      	bne.n	8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d002      	beq.n	8005cac <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8005ca6:	2311      	movs	r3, #17
 8005ca8:	617b      	str	r3, [r7, #20]
 8005caa:	e001      	b.n	8005cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005cac:	2307      	movs	r3, #7
 8005cae:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	fb03 f202 	mul.w	r2, r3, r2
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e03c      	b.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cc8:	d003      	beq.n	8005cd2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005cd0:	d134      	bne.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cde:	d12d      	bne.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d027      	beq.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005cec:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005d00:	4b12      	ldr	r3, [pc, #72]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	0a1b      	lsrs	r3, r3, #8
 8005d06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d0a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005d12:	4b0e      	ldr	r3, [pc, #56]	@ (8005d4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8005d1e:	2311      	movs	r3, #17
 8005d20:	617b      	str	r3, [r7, #20]
 8005d22:	e001      	b.n	8005d28 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005d24:	2307      	movs	r3, #7
 8005d26:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	fb03 f202 	mul.w	r2, r3, r2
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e000      	b.n	8005d3c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005d3a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3724      	adds	r7, #36	@ 0x24
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40021000 	.word	0x40021000
 8005d50:	001fff68 	.word	0x001fff68

08005d54 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e155      	b.n	8006012 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fb fa06 	bl	800118c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f959 	bl	8006038 <SAI_Disable>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e140      	b.n	8006012 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2202      	movs	r2, #2
 8005d94:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d00c      	beq.n	8005dba <HAL_SAI_Init+0x66>
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d80d      	bhi.n	8005dc0 <HAL_SAI_Init+0x6c>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <HAL_SAI_Init+0x5a>
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d003      	beq.n	8005db4 <HAL_SAI_Init+0x60>
 8005dac:	e008      	b.n	8005dc0 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
      break;
 8005db2:	e008      	b.n	8005dc6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005db4:	2310      	movs	r3, #16
 8005db6:	61fb      	str	r3, [r7, #28]
      break;
 8005db8:	e005      	b.n	8005dc6 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005dba:	2320      	movs	r3, #32
 8005dbc:	61fb      	str	r3, [r7, #28]
      break;
 8005dbe:	e002      	b.n	8005dc6 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
      break;
 8005dc4:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d81d      	bhi.n	8005e0a <HAL_SAI_Init+0xb6>
 8005dce:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <HAL_SAI_Init+0x80>)
 8005dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005deb 	.word	0x08005deb
 8005ddc:	08005df3 	.word	0x08005df3
 8005de0:	08005dfb 	.word	0x08005dfb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	617b      	str	r3, [r7, #20]
      break;
 8005de8:	e012      	b.n	8005e10 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005dea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005dee:	617b      	str	r3, [r7, #20]
      break;
 8005df0:	e00e      	b.n	8005e10 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005df2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005df6:	617b      	str	r3, [r7, #20]
      break;
 8005df8:	e00a      	b.n	8005e10 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005dfa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005dfe:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
      break;
 8005e08:	e002      	b.n	8005e10 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
      break;
 8005e0e:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a81      	ldr	r2, [pc, #516]	@ (800601c <HAL_SAI_Init+0x2c8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <HAL_SAI_Init+0xd0>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a80      	ldr	r2, [pc, #512]	@ (8006020 <HAL_SAI_Init+0x2cc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d103      	bne.n	8005e2c <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005e24:	4a7f      	ldr	r2, [pc, #508]	@ (8006024 <HAL_SAI_Init+0x2d0>)
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e002      	b.n	8005e32 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005e2c:	4a7e      	ldr	r2, [pc, #504]	@ (8006028 <HAL_SAI_Init+0x2d4>)
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d041      	beq.n	8005ebe <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a77      	ldr	r2, [pc, #476]	@ (800601c <HAL_SAI_Init+0x2c8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d004      	beq.n	8005e4e <HAL_SAI_Init+0xfa>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a75      	ldr	r2, [pc, #468]	@ (8006020 <HAL_SAI_Init+0x2cc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d105      	bne.n	8005e5a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005e4e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005e52:	f7fe ff3f 	bl	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e56:	6138      	str	r0, [r7, #16]
 8005e58:	e004      	b.n	8005e64 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005e5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005e5e:	f7fe ff39 	bl	8004cd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005e62:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	005b      	lsls	r3, r3, #1
 8005e6e:	461a      	mov	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	025b      	lsls	r3, r3, #9
 8005e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4a6b      	ldr	r2, [pc, #428]	@ (800602c <HAL_SAI_Init+0x2d8>)
 8005e80:	fba2 2303 	umull	r2, r3, r2, r3
 8005e84:	08da      	lsrs	r2, r3, #3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	4b67      	ldr	r3, [pc, #412]	@ (800602c <HAL_SAI_Init+0x2d8>)
 8005e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	1aca      	subs	r2, r1, r3
 8005e9e:	2a08      	cmp	r2, #8
 8005ea0:	d904      	bls.n	8005eac <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb0:	2b04      	cmp	r3, #4
 8005eb2:	d104      	bne.n	8005ebe <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	085a      	lsrs	r2, r3, #1
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_SAI_Init+0x17a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d109      	bne.n	8005ee2 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_SAI_Init+0x186>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	e001      	b.n	8005ede <HAL_SAI_Init+0x18a>
 8005eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e008      	b.n	8005ef4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d102      	bne.n	8005ef0 <HAL_SAI_Init+0x19c>
 8005eea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005eee:	e000      	b.n	8005ef2 <HAL_SAI_Init+0x19e>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6819      	ldr	r1, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b4c      	ldr	r3, [pc, #304]	@ (8006030 <HAL_SAI_Init+0x2dc>)
 8005f00:	400b      	ands	r3, r1
 8005f02:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f12:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f18:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1e:	431a      	orrs	r2, r3
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005f2c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005f38:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	051b      	lsls	r3, r3, #20
 8005f40:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	6812      	ldr	r2, [r2, #0]
 8005f54:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005f58:	f023 030f 	bic.w	r3, r3, #15
 8005f5c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6859      	ldr	r1, [r3, #4]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699a      	ldr	r2, [r3, #24]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6c:	431a      	orrs	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	4b2b      	ldr	r3, [pc, #172]	@ (8006034 <HAL_SAI_Init+0x2e0>)
 8005f88:	400b      	ands	r3, r1
 8005f8a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6899      	ldr	r1, [r3, #8]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f96:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005f9c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005fa2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8005fa8:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005fb2:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68d9      	ldr	r1, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005fca:	400b      	ands	r3, r1
 8005fcc:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68d9      	ldr	r1, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fdc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe2:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005fe4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fea:	3b01      	subs	r3, #1
 8005fec:	021b      	lsls	r3, r3, #8
 8005fee:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3720      	adds	r7, #32
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	40015404 	.word	0x40015404
 8006020:	40015424 	.word	0x40015424
 8006024:	40015400 	.word	0x40015400
 8006028:	40015800 	.word	0x40015800
 800602c:	cccccccd 	.word	0xcccccccd
 8006030:	ff05c010 	.word	0xff05c010
 8006034:	fff88000 	.word	0xfff88000

08006038 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8006040:	4b18      	ldr	r3, [pc, #96]	@ (80060a4 <SAI_Disable+0x6c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <SAI_Disable+0x70>)
 8006046:	fba2 2303 	umull	r2, r3, r2, r3
 800604a:	0b1b      	lsrs	r3, r3, #12
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006062:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10a      	bne.n	8006080 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006070:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	72fb      	strb	r3, [r7, #11]
      break;
 800607e:	e009      	b.n	8006094 <SAI_Disable+0x5c>
    }
    count--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3b01      	subs	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1e7      	bne.n	8006064 <SAI_Disable+0x2c>

  return status;
 8006094:	7afb      	ldrb	r3, [r7, #11]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20000000 	.word	0x20000000
 80060a8:	95cbec1b 	.word	0x95cbec1b

080060ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e095      	b.n	80061ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d108      	bne.n	80060d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060ce:	d009      	beq.n	80060e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
 80060d6:	e005      	b.n	80060e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d106      	bne.n	8006104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fa ffa2 	bl	8001048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800611a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006124:	d902      	bls.n	800612c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e002      	b.n	8006132 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800612c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006130:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800613a:	d007      	beq.n	800614c <HAL_SPI_Init+0xa0>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006144:	d002      	beq.n	800614c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618e:	ea42 0103 	orr.w	r1, r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006196:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 0204 	and.w	r2, r3, #4
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	431a      	orrs	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80061c8:	ea42 0103 	orr.w	r1, r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b082      	sub	sp, #8
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e040      	b.n	8006286 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7fa ff5b 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2224      	movs	r2, #36	@ 0x24
 800621e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0201 	bic.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fae1 	bl	8006800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f826 	bl	8006290 <UART_SetConfig>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e01b      	b.n	8006286 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800625c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800626c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f042 0201 	orr.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 fb60 	bl	8006944 <UART_CheckIdleState>
 8006284:	4603      	mov	r3, r0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006294:	b08a      	sub	sp, #40	@ 0x28
 8006296:	af00      	add	r7, sp, #0
 8006298:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	431a      	orrs	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	4ba4      	ldr	r3, [pc, #656]	@ (8006550 <UART_SetConfig+0x2c0>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	68fa      	ldr	r2, [r7, #12]
 80062c4:	6812      	ldr	r2, [r2, #0]
 80062c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80062c8:	430b      	orrs	r3, r1
 80062ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a99      	ldr	r2, [pc, #612]	@ (8006554 <UART_SetConfig+0x2c4>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d004      	beq.n	80062fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f8:	4313      	orrs	r3, r2
 80062fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a90      	ldr	r2, [pc, #576]	@ (8006558 <UART_SetConfig+0x2c8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d126      	bne.n	8006368 <UART_SetConfig+0xd8>
 800631a:	4b90      	ldr	r3, [pc, #576]	@ (800655c <UART_SetConfig+0x2cc>)
 800631c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	2b03      	cmp	r3, #3
 8006326:	d81b      	bhi.n	8006360 <UART_SetConfig+0xd0>
 8006328:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <UART_SetConfig+0xa0>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006341 	.word	0x08006341
 8006334:	08006351 	.word	0x08006351
 8006338:	08006349 	.word	0x08006349
 800633c:	08006359 	.word	0x08006359
 8006340:	2301      	movs	r3, #1
 8006342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006346:	e116      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006348:	2302      	movs	r3, #2
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800634e:	e112      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006350:	2304      	movs	r3, #4
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006356:	e10e      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006358:	2308      	movs	r3, #8
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635e:	e10a      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006360:	2310      	movs	r3, #16
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006366:	e106      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a7c      	ldr	r2, [pc, #496]	@ (8006560 <UART_SetConfig+0x2d0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d138      	bne.n	80063e4 <UART_SetConfig+0x154>
 8006372:	4b7a      	ldr	r3, [pc, #488]	@ (800655c <UART_SetConfig+0x2cc>)
 8006374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b0c      	cmp	r3, #12
 800637e:	d82d      	bhi.n	80063dc <UART_SetConfig+0x14c>
 8006380:	a201      	add	r2, pc, #4	@ (adr r2, 8006388 <UART_SetConfig+0xf8>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063dd 	.word	0x080063dd
 8006390:	080063dd 	.word	0x080063dd
 8006394:	080063dd 	.word	0x080063dd
 8006398:	080063cd 	.word	0x080063cd
 800639c:	080063dd 	.word	0x080063dd
 80063a0:	080063dd 	.word	0x080063dd
 80063a4:	080063dd 	.word	0x080063dd
 80063a8:	080063c5 	.word	0x080063c5
 80063ac:	080063dd 	.word	0x080063dd
 80063b0:	080063dd 	.word	0x080063dd
 80063b4:	080063dd 	.word	0x080063dd
 80063b8:	080063d5 	.word	0x080063d5
 80063bc:	2300      	movs	r3, #0
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c2:	e0d8      	b.n	8006576 <UART_SetConfig+0x2e6>
 80063c4:	2302      	movs	r3, #2
 80063c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ca:	e0d4      	b.n	8006576 <UART_SetConfig+0x2e6>
 80063cc:	2304      	movs	r3, #4
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d2:	e0d0      	b.n	8006576 <UART_SetConfig+0x2e6>
 80063d4:	2308      	movs	r3, #8
 80063d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063da:	e0cc      	b.n	8006576 <UART_SetConfig+0x2e6>
 80063dc:	2310      	movs	r3, #16
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063e2:	e0c8      	b.n	8006576 <UART_SetConfig+0x2e6>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006564 <UART_SetConfig+0x2d4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d125      	bne.n	800643a <UART_SetConfig+0x1aa>
 80063ee:	4b5b      	ldr	r3, [pc, #364]	@ (800655c <UART_SetConfig+0x2cc>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80063f8:	2b30      	cmp	r3, #48	@ 0x30
 80063fa:	d016      	beq.n	800642a <UART_SetConfig+0x19a>
 80063fc:	2b30      	cmp	r3, #48	@ 0x30
 80063fe:	d818      	bhi.n	8006432 <UART_SetConfig+0x1a2>
 8006400:	2b20      	cmp	r3, #32
 8006402:	d00a      	beq.n	800641a <UART_SetConfig+0x18a>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d814      	bhi.n	8006432 <UART_SetConfig+0x1a2>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d002      	beq.n	8006412 <UART_SetConfig+0x182>
 800640c:	2b10      	cmp	r3, #16
 800640e:	d008      	beq.n	8006422 <UART_SetConfig+0x192>
 8006410:	e00f      	b.n	8006432 <UART_SetConfig+0x1a2>
 8006412:	2300      	movs	r3, #0
 8006414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006418:	e0ad      	b.n	8006576 <UART_SetConfig+0x2e6>
 800641a:	2302      	movs	r3, #2
 800641c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006420:	e0a9      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006422:	2304      	movs	r3, #4
 8006424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006428:	e0a5      	b.n	8006576 <UART_SetConfig+0x2e6>
 800642a:	2308      	movs	r3, #8
 800642c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006430:	e0a1      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006432:	2310      	movs	r3, #16
 8006434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006438:	e09d      	b.n	8006576 <UART_SetConfig+0x2e6>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a4a      	ldr	r2, [pc, #296]	@ (8006568 <UART_SetConfig+0x2d8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d125      	bne.n	8006490 <UART_SetConfig+0x200>
 8006444:	4b45      	ldr	r3, [pc, #276]	@ (800655c <UART_SetConfig+0x2cc>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800644e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006450:	d016      	beq.n	8006480 <UART_SetConfig+0x1f0>
 8006452:	2bc0      	cmp	r3, #192	@ 0xc0
 8006454:	d818      	bhi.n	8006488 <UART_SetConfig+0x1f8>
 8006456:	2b80      	cmp	r3, #128	@ 0x80
 8006458:	d00a      	beq.n	8006470 <UART_SetConfig+0x1e0>
 800645a:	2b80      	cmp	r3, #128	@ 0x80
 800645c:	d814      	bhi.n	8006488 <UART_SetConfig+0x1f8>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <UART_SetConfig+0x1d8>
 8006462:	2b40      	cmp	r3, #64	@ 0x40
 8006464:	d008      	beq.n	8006478 <UART_SetConfig+0x1e8>
 8006466:	e00f      	b.n	8006488 <UART_SetConfig+0x1f8>
 8006468:	2300      	movs	r3, #0
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646e:	e082      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006470:	2302      	movs	r3, #2
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006476:	e07e      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006478:	2304      	movs	r3, #4
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647e:	e07a      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006480:	2308      	movs	r3, #8
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006486:	e076      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006488:	2310      	movs	r3, #16
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648e:	e072      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a35      	ldr	r2, [pc, #212]	@ (800656c <UART_SetConfig+0x2dc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d12a      	bne.n	80064f0 <UART_SetConfig+0x260>
 800649a:	4b30      	ldr	r3, [pc, #192]	@ (800655c <UART_SetConfig+0x2cc>)
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064a8:	d01a      	beq.n	80064e0 <UART_SetConfig+0x250>
 80064aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ae:	d81b      	bhi.n	80064e8 <UART_SetConfig+0x258>
 80064b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064b4:	d00c      	beq.n	80064d0 <UART_SetConfig+0x240>
 80064b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064ba:	d815      	bhi.n	80064e8 <UART_SetConfig+0x258>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <UART_SetConfig+0x238>
 80064c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064c4:	d008      	beq.n	80064d8 <UART_SetConfig+0x248>
 80064c6:	e00f      	b.n	80064e8 <UART_SetConfig+0x258>
 80064c8:	2300      	movs	r3, #0
 80064ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ce:	e052      	b.n	8006576 <UART_SetConfig+0x2e6>
 80064d0:	2302      	movs	r3, #2
 80064d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d6:	e04e      	b.n	8006576 <UART_SetConfig+0x2e6>
 80064d8:	2304      	movs	r3, #4
 80064da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064de:	e04a      	b.n	8006576 <UART_SetConfig+0x2e6>
 80064e0:	2308      	movs	r3, #8
 80064e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e6:	e046      	b.n	8006576 <UART_SetConfig+0x2e6>
 80064e8:	2310      	movs	r3, #16
 80064ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ee:	e042      	b.n	8006576 <UART_SetConfig+0x2e6>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a17      	ldr	r2, [pc, #92]	@ (8006554 <UART_SetConfig+0x2c4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d13a      	bne.n	8006570 <UART_SetConfig+0x2e0>
 80064fa:	4b18      	ldr	r3, [pc, #96]	@ (800655c <UART_SetConfig+0x2cc>)
 80064fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006500:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006504:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006508:	d01a      	beq.n	8006540 <UART_SetConfig+0x2b0>
 800650a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800650e:	d81b      	bhi.n	8006548 <UART_SetConfig+0x2b8>
 8006510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006514:	d00c      	beq.n	8006530 <UART_SetConfig+0x2a0>
 8006516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800651a:	d815      	bhi.n	8006548 <UART_SetConfig+0x2b8>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <UART_SetConfig+0x298>
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006524:	d008      	beq.n	8006538 <UART_SetConfig+0x2a8>
 8006526:	e00f      	b.n	8006548 <UART_SetConfig+0x2b8>
 8006528:	2300      	movs	r3, #0
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652e:	e022      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006530:	2302      	movs	r3, #2
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006536:	e01e      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653e:	e01a      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006546:	e016      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654e:	e012      	b.n	8006576 <UART_SetConfig+0x2e6>
 8006550:	efff69f3 	.word	0xefff69f3
 8006554:	40008000 	.word	0x40008000
 8006558:	40013800 	.word	0x40013800
 800655c:	40021000 	.word	0x40021000
 8006560:	40004400 	.word	0x40004400
 8006564:	40004800 	.word	0x40004800
 8006568:	40004c00 	.word	0x40004c00
 800656c:	40005000 	.word	0x40005000
 8006570:	2310      	movs	r3, #16
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a9f      	ldr	r2, [pc, #636]	@ (80067f8 <UART_SetConfig+0x568>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d17a      	bne.n	8006676 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006580:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006584:	2b08      	cmp	r3, #8
 8006586:	d824      	bhi.n	80065d2 <UART_SetConfig+0x342>
 8006588:	a201      	add	r2, pc, #4	@ (adr r2, 8006590 <UART_SetConfig+0x300>)
 800658a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658e:	bf00      	nop
 8006590:	080065b5 	.word	0x080065b5
 8006594:	080065d3 	.word	0x080065d3
 8006598:	080065bd 	.word	0x080065bd
 800659c:	080065d3 	.word	0x080065d3
 80065a0:	080065c3 	.word	0x080065c3
 80065a4:	080065d3 	.word	0x080065d3
 80065a8:	080065d3 	.word	0x080065d3
 80065ac:	080065d3 	.word	0x080065d3
 80065b0:	080065cb 	.word	0x080065cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065b4:	f7fe f818 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80065b8:	61f8      	str	r0, [r7, #28]
        break;
 80065ba:	e010      	b.n	80065de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065bc:	4b8f      	ldr	r3, [pc, #572]	@ (80067fc <UART_SetConfig+0x56c>)
 80065be:	61fb      	str	r3, [r7, #28]
        break;
 80065c0:	e00d      	b.n	80065de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065c2:	f7fd ff79 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80065c6:	61f8      	str	r0, [r7, #28]
        break;
 80065c8:	e009      	b.n	80065de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065ce:	61fb      	str	r3, [r7, #28]
        break;
 80065d0:	e005      	b.n	80065de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065d2:	2300      	movs	r3, #0
 80065d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80065dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80fb 	beq.w	80067dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	4613      	mov	r3, r2
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	4413      	add	r3, r2
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d305      	bcc.n	8006602 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d903      	bls.n	800660a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006608:	e0e8      	b.n	80067dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2200      	movs	r2, #0
 800660e:	461c      	mov	r4, r3
 8006610:	4615      	mov	r5, r2
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	f04f 0300 	mov.w	r3, #0
 800661a:	022b      	lsls	r3, r5, #8
 800661c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006620:	0222      	lsls	r2, r4, #8
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	6849      	ldr	r1, [r1, #4]
 8006626:	0849      	lsrs	r1, r1, #1
 8006628:	2000      	movs	r0, #0
 800662a:	4688      	mov	r8, r1
 800662c:	4681      	mov	r9, r0
 800662e:	eb12 0a08 	adds.w	sl, r2, r8
 8006632:	eb43 0b09 	adc.w	fp, r3, r9
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	603b      	str	r3, [r7, #0]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006644:	4650      	mov	r0, sl
 8006646:	4659      	mov	r1, fp
 8006648:	f7f9 fdbe 	bl	80001c8 <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4613      	mov	r3, r2
 8006652:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800665a:	d308      	bcc.n	800666e <UART_SetConfig+0x3de>
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006662:	d204      	bcs.n	800666e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	e0b6      	b.n	80067dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006674:	e0b2      	b.n	80067dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800667e:	d15e      	bne.n	800673e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006680:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006684:	2b08      	cmp	r3, #8
 8006686:	d828      	bhi.n	80066da <UART_SetConfig+0x44a>
 8006688:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <UART_SetConfig+0x400>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066bd 	.word	0x080066bd
 8006698:	080066c5 	.word	0x080066c5
 800669c:	080066db 	.word	0x080066db
 80066a0:	080066cb 	.word	0x080066cb
 80066a4:	080066db 	.word	0x080066db
 80066a8:	080066db 	.word	0x080066db
 80066ac:	080066db 	.word	0x080066db
 80066b0:	080066d3 	.word	0x080066d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7fd ff98 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 80066b8:	61f8      	str	r0, [r7, #28]
        break;
 80066ba:	e014      	b.n	80066e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066bc:	f7fd ffaa 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 80066c0:	61f8      	str	r0, [r7, #28]
        break;
 80066c2:	e010      	b.n	80066e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066c4:	4b4d      	ldr	r3, [pc, #308]	@ (80067fc <UART_SetConfig+0x56c>)
 80066c6:	61fb      	str	r3, [r7, #28]
        break;
 80066c8:	e00d      	b.n	80066e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ca:	f7fd fef5 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 80066ce:	61f8      	str	r0, [r7, #28]
        break;
 80066d0:	e009      	b.n	80066e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066d6:	61fb      	str	r3, [r7, #28]
        break;
 80066d8:	e005      	b.n	80066e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d077      	beq.n	80067dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	005a      	lsls	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	085b      	lsrs	r3, r3, #1
 80066f6:	441a      	add	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006700:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b0f      	cmp	r3, #15
 8006706:	d916      	bls.n	8006736 <UART_SetConfig+0x4a6>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800670e:	d212      	bcs.n	8006736 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f023 030f 	bic.w	r3, r3, #15
 8006718:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	b29b      	uxth	r3, r3
 8006720:	f003 0307 	and.w	r3, r3, #7
 8006724:	b29a      	uxth	r2, r3
 8006726:	8afb      	ldrh	r3, [r7, #22]
 8006728:	4313      	orrs	r3, r2
 800672a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	8afa      	ldrh	r2, [r7, #22]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e052      	b.n	80067dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800673c:	e04e      	b.n	80067dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800673e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006742:	2b08      	cmp	r3, #8
 8006744:	d827      	bhi.n	8006796 <UART_SetConfig+0x506>
 8006746:	a201      	add	r2, pc, #4	@ (adr r2, 800674c <UART_SetConfig+0x4bc>)
 8006748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	08006781 	.word	0x08006781
 8006758:	08006797 	.word	0x08006797
 800675c:	08006787 	.word	0x08006787
 8006760:	08006797 	.word	0x08006797
 8006764:	08006797 	.word	0x08006797
 8006768:	08006797 	.word	0x08006797
 800676c:	0800678f 	.word	0x0800678f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006770:	f7fd ff3a 	bl	80045e8 <HAL_RCC_GetPCLK1Freq>
 8006774:	61f8      	str	r0, [r7, #28]
        break;
 8006776:	e014      	b.n	80067a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006778:	f7fd ff4c 	bl	8004614 <HAL_RCC_GetPCLK2Freq>
 800677c:	61f8      	str	r0, [r7, #28]
        break;
 800677e:	e010      	b.n	80067a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006780:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <UART_SetConfig+0x56c>)
 8006782:	61fb      	str	r3, [r7, #28]
        break;
 8006784:	e00d      	b.n	80067a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006786:	f7fd fe97 	bl	80044b8 <HAL_RCC_GetSysClockFreq>
 800678a:	61f8      	str	r0, [r7, #28]
        break;
 800678c:	e009      	b.n	80067a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800678e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006792:	61fb      	str	r3, [r7, #28]
        break;
 8006794:	e005      	b.n	80067a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067a0:	bf00      	nop
    }

    if (pclk != 0U)
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d019      	beq.n	80067dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	085a      	lsrs	r2, r3, #1
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	441a      	add	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b0f      	cmp	r3, #15
 80067c0:	d909      	bls.n	80067d6 <UART_SetConfig+0x546>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067c8:	d205      	bcs.n	80067d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60da      	str	r2, [r3, #12]
 80067d4:	e002      	b.n	80067dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80067e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3728      	adds	r7, #40	@ 0x28
 80067f0:	46bd      	mov	sp, r7
 80067f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f6:	bf00      	nop
 80067f8:	40008000 	.word	0x40008000
 80067fc:	00f42400 	.word	0x00f42400

08006800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00a      	beq.n	800682a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00a      	beq.n	800684c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006872:	f003 0304 	and.w	r3, r3, #4
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006894:	f003 0310 	and.w	r3, r3, #16
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	f003 0320 	and.w	r3, r3, #32
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00a      	beq.n	80068d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01a      	beq.n	8006916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068fe:	d10a      	bne.n	8006916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b098      	sub	sp, #96	@ 0x60
 8006948:	af02      	add	r7, sp, #8
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006954:	f7fa fdae 	bl	80014b4 <HAL_GetTick>
 8006958:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b08      	cmp	r3, #8
 8006966:	d12e      	bne.n	80069c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006968:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f88c 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d021      	beq.n	80069c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800698a:	e853 3f00 	ldrex	r3, [r3]
 800698e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006992:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006996:	653b      	str	r3, [r7, #80]	@ 0x50
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069a8:	e841 2300 	strex	r3, r2, [r1]
 80069ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1e6      	bne.n	8006982 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2220      	movs	r2, #32
 80069b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e062      	b.n	8006a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d149      	bne.n	8006a68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069dc:	2200      	movs	r2, #0
 80069de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f856 	bl	8006a94 <UART_WaitOnFlagUntilTimeout>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d03c      	beq.n	8006a68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	623b      	str	r3, [r7, #32]
   return(result);
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e6      	bne.n	80069ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3308      	adds	r3, #8
 8006a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a40:	61fa      	str	r2, [r7, #28]
 8006a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	69b9      	ldr	r1, [r7, #24]
 8006a46:	69fa      	ldr	r2, [r7, #28]
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e5      	bne.n	8006a20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e011      	b.n	8006a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3758      	adds	r7, #88	@ 0x58
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa4:	e04f      	b.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d04b      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aae:	f7fa fd01 	bl	80014b4 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d302      	bcc.n	8006ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d101      	bne.n	8006ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e04e      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0304 	and.w	r3, r3, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d037      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b80      	cmp	r3, #128	@ 0x80
 8006ada:	d034      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	2b40      	cmp	r3, #64	@ 0x40
 8006ae0:	d031      	beq.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69db      	ldr	r3, [r3, #28]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d110      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2208      	movs	r2, #8
 8006af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f838 	bl	8006b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2208      	movs	r2, #8
 8006b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e029      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b20:	d111      	bne.n	8006b46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f81e 	bl	8006b6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e00f      	b.n	8006b66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	bf0c      	ite	eq
 8006b56:	2301      	moveq	r3, #1
 8006b58:	2300      	movne	r3, #0
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d0a0      	beq.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b095      	sub	sp, #84	@ 0x54
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e6      	bne.n	8006b76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	f023 0301 	bic.w	r3, r3, #1
 8006bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3308      	adds	r3, #8
 8006bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e5      	bne.n	8006ba8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d118      	bne.n	8006c16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	f023 0310 	bic.w	r3, r3, #16
 8006bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c02:	61bb      	str	r3, [r7, #24]
 8006c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6979      	ldr	r1, [r7, #20]
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e6      	bne.n	8006be4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006c2a:	bf00      	nop
 8006c2c:	3754      	adds	r7, #84	@ 0x54
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c36:	b084      	sub	sp, #16
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	f107 001c 	add.w	r0, r7, #28
 8006c44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f9bd 	bl	8006fd4 <USB_CoreReset>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006c5e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c72:	e005      	b.n	8006c80 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c78:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c8c:	b004      	add	sp, #16
 8006c8e:	4770      	bx	lr

08006c90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f043 0201 	orr.w	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	370c      	adds	r7, #12
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr

08006cb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 0201 	bic.w	r2, r3, #1
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d115      	bne.n	8006d22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d02:	200a      	movs	r0, #10
 8006d04:	f7fa fbe2 	bl	80014cc <HAL_Delay>
      ms += 10U;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	330a      	adds	r3, #10
 8006d0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f952 	bl	8006fb8 <USB_GetMode>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d01e      	beq.n	8006d58 <USB_SetCurrentMode+0x84>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d1e:	d9f0      	bls.n	8006d02 <USB_SetCurrentMode+0x2e>
 8006d20:	e01a      	b.n	8006d58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d115      	bne.n	8006d54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d34:	200a      	movs	r0, #10
 8006d36:	f7fa fbc9 	bl	80014cc <HAL_Delay>
      ms += 10U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	330a      	adds	r3, #10
 8006d3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f000 f939 	bl	8006fb8 <USB_GetMode>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <USB_SetCurrentMode+0x84>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d50:	d9f0      	bls.n	8006d34 <USB_SetCurrentMode+0x60>
 8006d52:	e001      	b.n	8006d58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e005      	b.n	8006d64 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d5c:	d101      	bne.n	8006d62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d86:	d901      	bls.n	8006d8c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d88:	2303      	movs	r3, #3
 8006d8a:	e01b      	b.n	8006dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	daf2      	bge.n	8006d7a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	019b      	lsls	r3, r3, #6
 8006d9c:	f043 0220 	orr.w	r2, r3, #32
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	3301      	adds	r3, #1
 8006da8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006db0:	d901      	bls.n	8006db6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e006      	b.n	8006dc4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d0f0      	beq.n	8006da4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006de8:	d901      	bls.n	8006dee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e018      	b.n	8006e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	daf2      	bge.n	8006ddc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	3301      	adds	r3, #1
 8006e04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e0c:	d901      	bls.n	8006e12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e006      	b.n	8006e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0310 	and.w	r3, r3, #16
 8006e1a:	2b10      	cmp	r3, #16
 8006e1c:	d0f0      	beq.n	8006e00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	4611      	mov	r1, r2
 8006e38:	461a      	mov	r2, r3
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	71fb      	strb	r3, [r7, #7]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006e4a:	88bb      	ldrh	r3, [r7, #4]
 8006e4c:	3303      	adds	r3, #3
 8006e4e:	089b      	lsrs	r3, r3, #2
 8006e50:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8006e52:	2300      	movs	r3, #0
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	e018      	b.n	8006e8a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e58:	79fb      	ldrb	r3, [r7, #7]
 8006e5a:	031a      	lsls	r2, r3, #12
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4413      	add	r3, r2
 8006e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e64:	461a      	mov	r2, r3
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	3301      	adds	r3, #1
 8006e82:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	3301      	adds	r3, #1
 8006e88:	61bb      	str	r3, [r7, #24]
 8006e8a:	69ba      	ldr	r2, [r7, #24]
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d3e2      	bcc.n	8006e58 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3724      	adds	r7, #36	@ 0x24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b08b      	sub	sp, #44	@ 0x2c
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	089b      	lsrs	r3, r3, #2
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006ebe:	88fb      	ldrh	r3, [r7, #6]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	623b      	str	r3, [r7, #32]
 8006eca:	e014      	b.n	8006ef6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed6:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	3301      	adds	r3, #1
 8006edc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eec:	3301      	adds	r3, #1
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	623b      	str	r3, [r7, #32]
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d3e6      	bcc.n	8006ecc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006efe:	8bfb      	ldrh	r3, [r7, #30]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01e      	beq.n	8006f42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0e:	461a      	mov	r2, r3
 8006f10:	f107 0310 	add.w	r3, r7, #16
 8006f14:	6812      	ldr	r2, [r2, #0]
 8006f16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f18:	693a      	ldr	r2, [r7, #16]
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	701a      	strb	r2, [r3, #0]
      i++;
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	3301      	adds	r3, #1
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006f36:	8bfb      	ldrh	r3, [r7, #30]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f3c:	8bfb      	ldrh	r3, [r7, #30]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1ea      	bne.n	8006f18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	372c      	adds	r7, #44	@ 0x2c
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f68:	68fb      	ldr	r3, [r7, #12]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f86:	78fb      	ldrb	r3, [r7, #3]
 8006f88:	015a      	lsls	r2, r3, #5
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006faa:	68bb      	ldr	r3, [r7, #8]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fec:	d901      	bls.n	8006ff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e01b      	b.n	800702a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	daf2      	bge.n	8006fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f043 0201 	orr.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007016:	d901      	bls.n	800701c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e006      	b.n	800702a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d0f0      	beq.n	800700a <USB_CoreReset+0x36>

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007038:	b084      	sub	sp, #16
 800703a:	b580      	push	{r7, lr}
 800703c:	b086      	sub	sp, #24
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800704a:	2300      	movs	r3, #0
 800704c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007058:	461a      	mov	r2, r3
 800705a:	2300      	movs	r3, #0
 800705c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800706e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007084:	f023 0304 	bic.w	r3, r3, #4
 8007088:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800708a:	2110      	movs	r1, #16
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7ff fe6d 	bl	8006d6c <USB_FlushTxFifo>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fe97 	bl	8006dd0 <USB_FlushRxFifo>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	e015      	b.n	80070de <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	015a      	lsls	r2, r3, #5
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4413      	add	r3, r2
 80070ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070be:	461a      	mov	r2, r3
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295
 80070c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d2:	461a      	mov	r2, r3
 80070d4:	2300      	movs	r3, #0
 80070d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	3301      	adds	r3, #1
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070e2:	461a      	mov	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d3e3      	bcc.n	80070b2 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f04f 32ff 	mov.w	r2, #4294967295
 80070f6:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2280      	movs	r2, #128	@ 0x80
 80070fc:	625a      	str	r2, [r3, #36]	@ 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <USB_HostInit+0xfc>)
 8007102:	629a      	str	r2, [r3, #40]	@ 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a0c      	ldr	r2, [pc, #48]	@ (8007138 <USB_HostInit+0x100>)
 8007108:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	f043 0210 	orr.w	r2, r3, #16
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	4b07      	ldr	r3, [pc, #28]	@ (800713c <USB_HostInit+0x104>)
 800711e:	4313      	orrs	r3, r2
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007124:	7dfb      	ldrb	r3, [r7, #23]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007130:	b004      	add	sp, #16
 8007132:	4770      	bx	lr
 8007134:	00600080 	.word	0x00600080
 8007138:	004000e0 	.word	0x004000e0
 800713c:	a3200008 	.word	0xa3200008

08007140 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	78fb      	ldrb	r3, [r7, #3]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	68f9      	ldr	r1, [r7, #12]
 8007174:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007178:	4313      	orrs	r3, r2
 800717a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d107      	bne.n	8007192 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007188:	461a      	mov	r2, r3
 800718a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800718e:	6053      	str	r3, [r2, #4]
 8007190:	e00c      	b.n	80071ac <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007192:	78fb      	ldrb	r3, [r7, #3]
 8007194:	2b02      	cmp	r3, #2
 8007196:	d107      	bne.n	80071a8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800719e:	461a      	mov	r2, r3
 80071a0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80071a4:	6053      	str	r3, [r2, #4]
 80071a6:	e001      	b.n	80071ac <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071da:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071e8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071ea:	2064      	movs	r0, #100	@ 0x64
 80071ec:	f7fa f96e 	bl	80014cc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80071fe:	200a      	movs	r0, #10
 8007200:	f7fa f964 	bl	80014cc <HAL_Delay>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800720e:	b480      	push	{r7}
 8007210:	b085      	sub	sp, #20
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
 8007216:	460b      	mov	r3, r1
 8007218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007232:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <USB_DriveVbus+0x44>
 800723e:	78fb      	ldrb	r3, [r7, #3]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d106      	bne.n	8007252 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800724c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007250:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725c:	d109      	bne.n	8007272 <USB_DriveVbus+0x64>
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d106      	bne.n	8007272 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800726c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007270:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800728c:	2300      	movs	r3, #0
 800728e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	0c5b      	lsrs	r3, r3, #17
 800729e:	f003 0303 	and.w	r3, r3, #3
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3714      	adds	r7, #20
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b085      	sub	sp, #20
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	b29b      	uxth	r3, r3
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	70fb      	strb	r3, [r7, #3]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70bb      	strb	r3, [r7, #2]
 80072e6:	4613      	mov	r3, r2
 80072e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80072f2:	78fb      	ldrb	r3, [r7, #3]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fe:	461a      	mov	r2, r3
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007306:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800730a:	2b03      	cmp	r3, #3
 800730c:	d867      	bhi.n	80073de <USB_HC_Init+0x10e>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <USB_HC_Init+0x44>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	08007325 	.word	0x08007325
 8007318:	080073a1 	.word	0x080073a1
 800731c:	08007325 	.word	0x08007325
 8007320:	08007363 	.word	0x08007363
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	4413      	add	r3, r2
 800732c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007330:	461a      	mov	r2, r3
 8007332:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007336:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007338:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	da51      	bge.n	80073e4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	78fa      	ldrb	r2, [r7, #3]
 8007350:	0151      	lsls	r1, r2, #5
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	440a      	add	r2, r1
 8007356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800735a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800735e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007360:	e040      	b.n	80073e4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736e:	461a      	mov	r2, r3
 8007370:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007374:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007376:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800737a:	2b00      	cmp	r3, #0
 800737c:	da34      	bge.n	80073e8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	4413      	add	r3, r2
 8007386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	440a      	add	r2, r1
 8007394:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800739c:	60d3      	str	r3, [r2, #12]
      }

      break;
 800739e:	e023      	b.n	80073e8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ac:	461a      	mov	r2, r3
 80073ae:	f240 2325 	movw	r3, #549	@ 0x225
 80073b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	da17      	bge.n	80073ec <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	78fa      	ldrb	r2, [r7, #3]
 80073cc:	0151      	lsls	r1, r2, #5
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	440a      	add	r2, r1
 80073d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073d6:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80073da:	60d3      	str	r3, [r2, #12]
      }
      break;
 80073dc:	e006      	b.n	80073ec <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	77fb      	strb	r3, [r7, #31]
      break;
 80073e2:	e004      	b.n	80073ee <USB_HC_Init+0x11e>
      break;
 80073e4:	bf00      	nop
 80073e6:	e002      	b.n	80073ee <USB_HC_Init+0x11e>
      break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <USB_HC_Init+0x11e>
      break;
 80073ec:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	78fa      	ldrb	r2, [r7, #3]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	440a      	add	r2, r1
 8007404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007408:	f043 0302 	orr.w	r3, r3, #2
 800740c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007414:	699a      	ldr	r2, [r3, #24]
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	2101      	movs	r1, #1
 800741e:	fa01 f303 	lsl.w	r3, r1, r3
 8007422:	6939      	ldr	r1, [r7, #16]
 8007424:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007428:	4313      	orrs	r3, r2
 800742a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007438:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800743c:	2b00      	cmp	r3, #0
 800743e:	da03      	bge.n	8007448 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007440:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007444:	61bb      	str	r3, [r7, #24]
 8007446:	e001      	b.n	800744c <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ff17 	bl	8007280 <USB_GetHostSpeed>
 8007452:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007454:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007458:	2b02      	cmp	r3, #2
 800745a:	d106      	bne.n	800746a <USB_HC_Init+0x19a>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b02      	cmp	r3, #2
 8007460:	d003      	beq.n	800746a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	e001      	b.n	800746e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800746e:	787b      	ldrb	r3, [r7, #1]
 8007470:	059b      	lsls	r3, r3, #22
 8007472:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007476:	78bb      	ldrb	r3, [r7, #2]
 8007478:	02db      	lsls	r3, r3, #11
 800747a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800747e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007480:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007484:	049b      	lsls	r3, r3, #18
 8007486:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800748a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800748c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800748e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007492:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	431a      	orrs	r2, r3
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	0151      	lsls	r1, r2, #5
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	440a      	add	r2, r1
 80074a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074ac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d003      	beq.n	80074be <USB_HC_Init+0x1ee>
 80074b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10f      	bne.n	80074de <USB_HC_Init+0x20e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	78fa      	ldrb	r2, [r7, #3]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	693a      	ldr	r2, [r7, #16]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80074dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80074de:	7ffb      	ldrb	r3, [r7, #31]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3720      	adds	r7, #32
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80074fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007500:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d018      	beq.n	800753c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	8952      	ldrh	r2, [r2, #10]
 8007512:	4413      	add	r3, r2
 8007514:	3b01      	subs	r3, #1
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	8952      	ldrh	r2, [r2, #10]
 800751a:	fbb3 f3f2 	udiv	r3, r3, r2
 800751e:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8007520:	8bfa      	ldrh	r2, [r7, #30]
 8007522:	8a7b      	ldrh	r3, [r7, #18]
 8007524:	429a      	cmp	r2, r3
 8007526:	d90b      	bls.n	8007540 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8007528:	8a7b      	ldrh	r3, [r7, #18]
 800752a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800752c:	8bfb      	ldrh	r3, [r7, #30]
 800752e:	683a      	ldr	r2, [r7, #0]
 8007530:	8952      	ldrh	r2, [r2, #10]
 8007532:	fb03 f202 	mul.w	r2, r3, r2
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	615a      	str	r2, [r3, #20]
 800753a:	e001      	b.n	8007540 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800753c:	2301      	movs	r3, #1
 800753e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	78db      	ldrb	r3, [r3, #3]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007548:	8bfb      	ldrh	r3, [r7, #30]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	8952      	ldrh	r2, [r2, #10]
 800754e:	fb03 f202 	mul.w	r2, r3, r2
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	615a      	str	r2, [r3, #20]
 8007556:	e003      	b.n	8007560 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	699a      	ldr	r2, [r3, #24]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	615a      	str	r2, [r3, #20]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007568:	8bfb      	ldrh	r3, [r7, #30]
 800756a:	04d9      	lsls	r1, r3, #19
 800756c:	4b59      	ldr	r3, [pc, #356]	@ (80076d4 <USB_HC_StartXfer+0x1ec>)
 800756e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007570:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	7b1b      	ldrb	r3, [r3, #12]
 8007576:	075b      	lsls	r3, r3, #29
 8007578:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800757c:	6979      	ldr	r1, [r7, #20]
 800757e:	0148      	lsls	r0, r1, #5
 8007580:	69b9      	ldr	r1, [r7, #24]
 8007582:	4401      	add	r1, r0
 8007584:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007588:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800758a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	bf0c      	ite	eq
 800759c:	2301      	moveq	r3, #1
 800759e:	2300      	movne	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	0151      	lsls	r1, r2, #5
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	440a      	add	r2, r1
 80075ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075be:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80075c2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	7c7b      	ldrb	r3, [r7, #17]
 80075d4:	075b      	lsls	r3, r3, #29
 80075d6:	6979      	ldr	r1, [r7, #20]
 80075d8:	0148      	lsls	r0, r1, #5
 80075da:	69b9      	ldr	r1, [r7, #24]
 80075dc:	4401      	add	r1, r0
 80075de:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80075e2:	4313      	orrs	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075fc:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	78db      	ldrb	r3, [r3, #3]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d004      	beq.n	8007610 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800760c:	60bb      	str	r3, [r7, #8]
 800760e:	e003      	b.n	8007618 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007616:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800761e:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	4413      	add	r3, r2
 8007628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800762c:	461a      	mov	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	78db      	ldrb	r3, [r3, #3]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d147      	bne.n	80076ca <USB_HC_StartXfer+0x1e2>
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d043      	beq.n	80076ca <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	7a1b      	ldrb	r3, [r3, #8]
 8007646:	2b03      	cmp	r3, #3
 8007648:	d830      	bhi.n	80076ac <USB_HC_StartXfer+0x1c4>
 800764a:	a201      	add	r2, pc, #4	@ (adr r2, 8007650 <USB_HC_StartXfer+0x168>)
 800764c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007650:	08007661 	.word	0x08007661
 8007654:	08007685 	.word	0x08007685
 8007658:	08007661 	.word	0x08007661
 800765c:	08007685 	.word	0x08007685
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	3303      	adds	r3, #3
 8007666:	089b      	lsrs	r3, r3, #2
 8007668:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800766a:	89fa      	ldrh	r2, [r7, #14]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007670:	b29b      	uxth	r3, r3
 8007672:	429a      	cmp	r2, r3
 8007674:	d91c      	bls.n	80076b0 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	f043 0220 	orr.w	r2, r3, #32
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	619a      	str	r2, [r3, #24]
        }
        break;
 8007682:	e015      	b.n	80076b0 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	3303      	adds	r3, #3
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800768e:	89fa      	ldrh	r2, [r7, #14]
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	b29b      	uxth	r3, r3
 800769a:	429a      	cmp	r2, r3
 800769c:	d90a      	bls.n	80076b4 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	619a      	str	r2, [r3, #24]
        }
        break;
 80076aa:	e003      	b.n	80076b4 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 80076ac:	bf00      	nop
 80076ae:	e002      	b.n	80076b6 <USB_HC_StartXfer+0x1ce>
        break;
 80076b0:	bf00      	nop
 80076b2:	e000      	b.n	80076b6 <USB_HC_StartXfer+0x1ce>
        break;
 80076b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	6919      	ldr	r1, [r3, #16]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	785a      	ldrb	r2, [r3, #1]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f7ff fbb1 	bl	8006e2c <USB_WritePacket>
  }

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3720      	adds	r7, #32
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	1ff80000 	.word	0x1ff80000

080076d8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076ea:	695b      	ldr	r3, [r3, #20]
 80076ec:	b29b      	uxth	r3, r3
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b089      	sub	sp, #36	@ 0x24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	0c9b      	lsrs	r3, r3, #18
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	4413      	add	r3, r2
 8007730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	0fdb      	lsrs	r3, r3, #31
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	015a      	lsls	r2, r3, #5
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	4413      	add	r3, r2
 8007746:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	0fdb      	lsrs	r3, r3, #31
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b20      	cmp	r3, #32
 800775e:	d10d      	bne.n	800777c <USB_HC_Halt+0x82>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <USB_HC_Halt+0x82>
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d002      	beq.n	8007778 <USB_HC_Halt+0x7e>
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d101      	bne.n	800777c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	e0d8      	b.n	800792e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <USB_HC_Halt+0x8e>
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d173      	bne.n	8007870 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	4413      	add	r3, r2
 8007790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69ba      	ldr	r2, [r7, #24]
 8007798:	0151      	lsls	r1, r2, #5
 800779a:	69fa      	ldr	r2, [r7, #28]
 800779c:	440a      	add	r2, r1
 800779e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80077a6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d14a      	bne.n	800784a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d133      	bne.n	8007828 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	0151      	lsls	r1, r2, #5
 80077f2:	69fa      	ldr	r2, [r7, #28]
 80077f4:	440a      	add	r2, r1
 80077f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077fe:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	3301      	adds	r3, #1
 8007804:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800780c:	d82e      	bhi.n	800786c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	015a      	lsls	r2, r3, #5
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	4413      	add	r3, r2
 8007816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007824:	d0ec      	beq.n	8007800 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007826:	e081      	b.n	800792c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	440a      	add	r2, r1
 800783e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007846:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007848:	e070      	b.n	800792c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	0151      	lsls	r1, r2, #5
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	440a      	add	r2, r1
 8007860:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007864:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007868:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800786a:	e05f      	b.n	800792c <USB_HC_Halt+0x232>
            break;
 800786c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800786e:	e05d      	b.n	800792c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	440a      	add	r2, r1
 8007886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800788a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800788e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d133      	bne.n	8007908 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	0151      	lsls	r1, r2, #5
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	440a      	add	r2, r1
 80078b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80078be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	0151      	lsls	r1, r2, #5
 80078d2:	69fa      	ldr	r2, [r7, #28]
 80078d4:	440a      	add	r2, r1
 80078d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078de:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	3301      	adds	r3, #1
 80078e4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ec:	d81d      	bhi.n	800792a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007904:	d0ec      	beq.n	80078e0 <USB_HC_Halt+0x1e6>
 8007906:	e011      	b.n	800792c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	4413      	add	r3, r2
 8007910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	69fa      	ldr	r2, [r7, #28]
 800791c:	440a      	add	r2, r1
 800791e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007922:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e000      	b.n	800792c <USB_HC_Halt+0x232>
          break;
 800792a:	bf00      	nop
    }
  }

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	@ 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b088      	sub	sp, #32
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007942:	2300      	movs	r3, #0
 8007944:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff f9af 	bl	8006cb2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007954:	2110      	movs	r1, #16
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fa08 	bl	8006d6c <USB_FlushTxFifo>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff fa32 	bl	8006dd0 <USB_FlushRxFifo>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007976:	2300      	movs	r3, #0
 8007978:	61bb      	str	r3, [r7, #24]
 800797a:	e01f      	b.n	80079bc <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007992:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800799a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079a2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	015a      	lsls	r2, r3, #5
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	4413      	add	r3, r2
 80079ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079b0:	461a      	mov	r2, r3
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	3301      	adds	r3, #1
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	2b0f      	cmp	r3, #15
 80079c0:	d9dc      	bls.n	800797c <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80079c2:	2300      	movs	r3, #0
 80079c4:	61bb      	str	r3, [r7, #24]
 80079c6:	e034      	b.n	8007a32 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079de:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079e6:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80079ee:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fc:	461a      	mov	r2, r3
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a0e:	d80c      	bhi.n	8007a2a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a10:	69bb      	ldr	r3, [r7, #24]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a26:	d0ec      	beq.n	8007a02 <USB_StopHost+0xc8>
 8007a28:	e000      	b.n	8007a2c <USB_StopHost+0xf2>
        break;
 8007a2a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	61bb      	str	r3, [r7, #24]
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	2b0f      	cmp	r3, #15
 8007a36:	d9c7      	bls.n	80079c8 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295
 8007a44:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4c:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7ff f91e 	bl	8006c90 <USB_EnableGlobalInt>

  return ret;
 8007a54:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007a5e:	b590      	push	{r4, r7, lr}
 8007a60:	b089      	sub	sp, #36	@ 0x24
 8007a62:	af04      	add	r7, sp, #16
 8007a64:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007a66:	2301      	movs	r3, #1
 8007a68:	2202      	movs	r2, #2
 8007a6a:	2102      	movs	r1, #2
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fc86 	bl	800837e <USBH_FindInterface>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2bff      	cmp	r3, #255	@ 0xff
 8007a7a:	d002      	beq.n	8007a82 <USBH_CDC_InterfaceInit+0x24>
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d901      	bls.n	8007a86 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007a82:	2302      	movs	r3, #2
 8007a84:	e13d      	b.n	8007d02 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fc5b 	bl	8008346 <USBH_SelectInterface>
 8007a90:	4603      	mov	r3, r0
 8007a92:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	e131      	b.n	8007d02 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007aa4:	2050      	movs	r0, #80	@ 0x50
 8007aa6:	f002 fb6b 	bl	800a180 <malloc>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e11f      	b.n	8007d02 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007ac2:	2250      	movs	r2, #80	@ 0x50
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	68b8      	ldr	r0, [r7, #8]
 8007ac8:	f002 fc18 	bl	800a2fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007acc:	7bfb      	ldrb	r3, [r7, #15]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	211a      	movs	r1, #26
 8007ad2:	fb01 f303 	mul.w	r3, r1, r3
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b25b      	sxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	da15      	bge.n	8007b10 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ae4:	7bfb      	ldrb	r3, [r7, #15]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	211a      	movs	r1, #26
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	4413      	add	r3, r2
 8007af0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	211a      	movs	r1, #26
 8007b00:	fb01 f303 	mul.w	r3, r1, r3
 8007b04:	4413      	add	r3, r2
 8007b06:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 ffbf 	bl	8009a9a <USBH_AllocPipe>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	7819      	ldrb	r1, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	7858      	ldrb	r0, [r3, #1]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b38:	68ba      	ldr	r2, [r7, #8]
 8007b3a:	8952      	ldrh	r2, [r2, #10]
 8007b3c:	9202      	str	r2, [sp, #8]
 8007b3e:	2203      	movs	r2, #3
 8007b40:	9201      	str	r2, [sp, #4]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4623      	mov	r3, r4
 8007b46:	4602      	mov	r2, r0
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 ff77 	bl	8009a3c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f002 fa8a 	bl	800a070 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	2200      	movs	r2, #0
 8007b60:	210a      	movs	r1, #10
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fc0b 	bl	800837e <USBH_FindInterface>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2bff      	cmp	r3, #255	@ 0xff
 8007b70:	d002      	beq.n	8007b78 <USBH_CDC_InterfaceInit+0x11a>
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d901      	bls.n	8007b7c <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	e0c2      	b.n	8007d02 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	211a      	movs	r1, #26
 8007b82:	fb01 f303 	mul.w	r3, r1, r3
 8007b86:	4413      	add	r3, r2
 8007b88:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	b25b      	sxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	da16      	bge.n	8007bc2 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	211a      	movs	r1, #26
 8007b9a:	fb01 f303 	mul.w	r3, r1, r3
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ba4:	781a      	ldrb	r2, [r3, #0]
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007baa:	7bfb      	ldrb	r3, [r7, #15]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	211a      	movs	r1, #26
 8007bb0:	fb01 f303 	mul.w	r3, r1, r3
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007bba:	881a      	ldrh	r2, [r3, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	835a      	strh	r2, [r3, #26]
 8007bc0:	e015      	b.n	8007bee <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	211a      	movs	r1, #26
 8007bc8:	fb01 f303 	mul.w	r3, r1, r3
 8007bcc:	4413      	add	r3, r2
 8007bce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007bd2:	781a      	ldrb	r2, [r3, #0]
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	211a      	movs	r1, #26
 8007bde:	fb01 f303 	mul.w	r3, r1, r3
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007be8:	881a      	ldrh	r2, [r3, #0]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	211a      	movs	r1, #26
 8007bf4:	fb01 f303 	mul.w	r3, r1, r3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	b25b      	sxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	da16      	bge.n	8007c34 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	211a      	movs	r1, #26
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	211a      	movs	r1, #26
 8007c22:	fb01 f303 	mul.w	r3, r1, r3
 8007c26:	4413      	add	r3, r2
 8007c28:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c2c:	881a      	ldrh	r2, [r3, #0]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	835a      	strh	r2, [r3, #26]
 8007c32:	e015      	b.n	8007c60 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	211a      	movs	r1, #26
 8007c3a:	fb01 f303 	mul.w	r3, r1, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007c44:	781a      	ldrb	r2, [r3, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	211a      	movs	r1, #26
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007c5a:	881a      	ldrh	r2, [r3, #0]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	7b9b      	ldrb	r3, [r3, #14]
 8007c64:	4619      	mov	r1, r3
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 ff17 	bl	8009a9a <USBH_AllocPipe>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	461a      	mov	r2, r3
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	7bdb      	ldrb	r3, [r3, #15]
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 ff0d 	bl	8009a9a <USBH_AllocPipe>
 8007c80:	4603      	mov	r3, r0
 8007c82:	461a      	mov	r2, r3
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	7b59      	ldrb	r1, [r3, #13]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	7b98      	ldrb	r0, [r3, #14]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	8b12      	ldrh	r2, [r2, #24]
 8007ca0:	9202      	str	r2, [sp, #8]
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	9201      	str	r2, [sp, #4]
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	4623      	mov	r3, r4
 8007caa:	4602      	mov	r2, r0
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f001 fec5 	bl	8009a3c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	7b19      	ldrb	r1, [r3, #12]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	7bd8      	ldrb	r0, [r3, #15]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	8b52      	ldrh	r2, [r2, #26]
 8007cca:	9202      	str	r2, [sp, #8]
 8007ccc:	2202      	movs	r2, #2
 8007cce:	9201      	str	r2, [sp, #4]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	4623      	mov	r3, r4
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f001 feb0 	bl	8009a3c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	7b5b      	ldrb	r3, [r3, #13]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f002 f9bf 	bl	800a070 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	7b1b      	ldrb	r3, [r3, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f002 f9b8 	bl	800a070 <USBH_LL_SetToggle>

  return USBH_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd90      	pop	{r4, r7, pc}

08007d0a <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b084      	sub	sp, #16
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00e      	beq.n	8007d42 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	4619      	mov	r1, r3
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 fea5 	bl	8009a7a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	4619      	mov	r1, r3
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fed0 	bl	8009adc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	7b1b      	ldrb	r3, [r3, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00e      	beq.n	8007d68 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	7b1b      	ldrb	r3, [r3, #12]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f001 fe92 	bl	8009a7a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	7b1b      	ldrb	r3, [r3, #12]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f001 febd 	bl	8009adc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	7b5b      	ldrb	r3, [r3, #13]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00e      	beq.n	8007d8e <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	7b5b      	ldrb	r3, [r3, #13]
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 fe7f 	bl	8009a7a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	7b5b      	ldrb	r3, [r3, #13]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 feaa 	bl	8009adc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d94:	69db      	ldr	r3, [r3, #28]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00b      	beq.n	8007db2 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f002 f9f4 	bl	800a190 <free>
    phost->pActiveClass->pData = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dae:	2200      	movs	r2, #0
 8007db0:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3340      	adds	r3, #64	@ 0x40
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f8b2 	bl	8007f3e <GetLineCoding>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007dea:	2102      	movs	r1, #2
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
	...

08007dfc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e04:	2301      	movs	r3, #1
 8007e06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e12:	69db      	ldr	r3, [r3, #28]
 8007e14:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007e1c:	2b04      	cmp	r3, #4
 8007e1e:	d877      	bhi.n	8007f10 <USBH_CDC_Process+0x114>
 8007e20:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <USBH_CDC_Process+0x2c>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e3d 	.word	0x08007e3d
 8007e2c:	08007e43 	.word	0x08007e43
 8007e30:	08007e73 	.word	0x08007e73
 8007e34:	08007ee7 	.word	0x08007ee7
 8007e38:	08007ef5 	.word	0x08007ef5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e40:	e06d      	b.n	8007f1e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e46:	4619      	mov	r1, r3
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f897 	bl	8007f7c <SetLineCoding>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d104      	bne.n	8007e62 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007e60:	e058      	b.n	8007f14 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007e62:	7bbb      	ldrb	r3, [r7, #14]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d055      	beq.n	8007f14 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2204      	movs	r2, #4
 8007e6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007e70:	e050      	b.n	8007f14 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	3340      	adds	r3, #64	@ 0x40
 8007e76:	4619      	mov	r1, r3
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f860 	bl	8007f3e <GetLineCoding>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d126      	bne.n	8007ed6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e9a:	791b      	ldrb	r3, [r3, #4]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d13b      	bne.n	8007f18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eaa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d133      	bne.n	8007f18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007eba:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d12b      	bne.n	8007f18 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ec8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d124      	bne.n	8007f18 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f958 	bl	8008184 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ed4:	e020      	b.n	8007f18 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007ed6:	7bbb      	ldrb	r3, [r7, #14]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d01d      	beq.n	8007f18 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2204      	movs	r2, #4
 8007ee0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007ee4:	e018      	b.n	8007f18 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 f867 	bl	8007fba <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f8da 	bl	80080a6 <CDC_ProcessReception>
      break;
 8007ef2:	e014      	b.n	8007f1e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 f81a 	bl	8008f30 <USBH_ClrFeature>
 8007efc:	4603      	mov	r3, r0
 8007efe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007f00:	7bbb      	ldrb	r3, [r7, #14]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007f0e:	e005      	b.n	8007f1c <USBH_CDC_Process+0x120>

    default:
      break;
 8007f10:	bf00      	nop
 8007f12:	e004      	b.n	8007f1e <USBH_CDC_Process+0x122>
      break;
 8007f14:	bf00      	nop
 8007f16:	e002      	b.n	8007f1e <USBH_CDC_Process+0x122>
      break;
 8007f18:	bf00      	nop
 8007f1a:	e000      	b.n	8007f1e <USBH_CDC_Process+0x122>
      break;
 8007f1c:	bf00      	nop

  }

  return status;
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	3710      	adds	r7, #16
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b082      	sub	sp, #8
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
 8007f46:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	22a1      	movs	r2, #161	@ 0xa1
 8007f4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2221      	movs	r2, #33	@ 0x21
 8007f52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2207      	movs	r2, #7
 8007f64:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2207      	movs	r2, #7
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 fb14 	bl	800959a <USBH_CtlReq>
 8007f72:	4603      	mov	r3, r0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2221      	movs	r2, #33	@ 0x21
 8007f8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2220      	movs	r2, #32
 8007f90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2207      	movs	r2, #7
 8007fa2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	2207      	movs	r2, #7
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f001 faf5 	bl	800959a <USBH_CtlReq>
 8007fb0:	4603      	mov	r3, r0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3708      	adds	r7, #8
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b086      	sub	sp, #24
 8007fbe:	af02      	add	r7, sp, #8
 8007fc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fc8:	69db      	ldr	r3, [r3, #28]
 8007fca:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d002      	beq.n	8007fe0 <CDC_ProcessTransmission+0x26>
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d023      	beq.n	8008026 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007fde:	e05e      	b.n	800809e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	8b12      	ldrh	r2, [r2, #24]
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d90b      	bls.n	8008004 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	69d9      	ldr	r1, [r3, #28]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	8b1a      	ldrh	r2, [r3, #24]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	7b5b      	ldrb	r3, [r3, #13]
 8007ff8:	2001      	movs	r0, #1
 8007ffa:	9000      	str	r0, [sp, #0]
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 fcda 	bl	80099b6 <USBH_BulkSendData>
 8008002:	e00b      	b.n	800801c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800800c:	b29a      	uxth	r2, r3
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	7b5b      	ldrb	r3, [r3, #13]
 8008012:	2001      	movs	r0, #1
 8008014:	9000      	str	r0, [sp, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f001 fccd 	bl	80099b6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008024:	e03b      	b.n	800809e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	7b5b      	ldrb	r3, [r3, #13]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fff5 	bl	800a01c <USBH_LL_GetURBState>
 8008032:	4603      	mov	r3, r0
 8008034:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008036:	7afb      	ldrb	r3, [r7, #11]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d128      	bne.n	800808e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	8b12      	ldrh	r2, [r2, #24]
 8008044:	4293      	cmp	r3, r2
 8008046:	d90e      	bls.n	8008066 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	8b12      	ldrh	r2, [r2, #24]
 8008050:	1a9a      	subs	r2, r3, r2
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	8b12      	ldrh	r2, [r2, #24]
 800805e:	441a      	add	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	61da      	str	r2, [r3, #28]
 8008064:	e002      	b.n	800806c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d004      	beq.n	800807e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800807c:	e00e      	b.n	800809c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f868 	bl	800815c <USBH_CDC_TransmitCallback>
      break;
 800808c:	e006      	b.n	800809c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d103      	bne.n	800809c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800809c:	bf00      	nop
  }
}
 800809e:	bf00      	nop
 80080a0:	3710      	adds	r7, #16
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b086      	sub	sp, #24
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d002      	beq.n	80080cc <CDC_ProcessReception+0x26>
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d00e      	beq.n	80080e8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80080ca:	e043      	b.n	8008154 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6a19      	ldr	r1, [r3, #32]
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	8b5a      	ldrh	r2, [r3, #26]
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	7b1b      	ldrb	r3, [r3, #12]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f001 fc91 	bl	8009a00 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2204      	movs	r2, #4
 80080e2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80080e6:	e035      	b.n	8008154 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	7b1b      	ldrb	r3, [r3, #12]
 80080ec:	4619      	mov	r1, r3
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f001 ff94 	bl	800a01c <USBH_LL_GetURBState>
 80080f4:	4603      	mov	r3, r0
 80080f6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80080f8:	7cfb      	ldrb	r3, [r7, #19]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d129      	bne.n	8008152 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	7b1b      	ldrb	r3, [r3, #12]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f001 fef7 	bl	8009ef8 <USBH_LL_GetLastXferSize>
 800810a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008110:	68fa      	ldr	r2, [r7, #12]
 8008112:	429a      	cmp	r2, r3
 8008114:	d016      	beq.n	8008144 <CDC_ProcessReception+0x9e>
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	8b5b      	ldrh	r3, [r3, #26]
 800811a:	461a      	mov	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4293      	cmp	r3, r2
 8008120:	d110      	bne.n	8008144 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	1ad2      	subs	r2, r2, r3
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	6a1a      	ldr	r2, [r3, #32]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	441a      	add	r2, r3
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2203      	movs	r2, #3
 800813e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008142:	e006      	b.n	8008152 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f80f 	bl	8008170 <USBH_CDC_ReceiveCallback>
      break;
 8008152:	bf00      	nop
  }
}
 8008154:	bf00      	nop
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d101      	bne.n	80081b0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80081ac:	2302      	movs	r3, #2
 80081ae:	e029      	b.n	8008204 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	79fa      	ldrb	r2, [r7, #7]
 80081b4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f81f 	bl	800820c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f001 fdc7 	bl	8009d90 <USBH_LL_Init>

  return USBH_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	e009      	b.n	8008232 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	33e0      	adds	r3, #224	@ 0xe0
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	2200      	movs	r2, #0
 800822a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d9f2      	bls.n	800821e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008238:	2300      	movs	r3, #0
 800823a:	60fb      	str	r3, [r7, #12]
 800823c:	e009      	b.n	8008252 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008248:	2200      	movs	r2, #0
 800824a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008258:	d3f1      	bcc.n	800823e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2240      	movs	r2, #64	@ 0x40
 800827e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	331c      	adds	r3, #28
 80082aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082ae:	2100      	movs	r1, #0
 80082b0:	4618      	mov	r0, r3
 80082b2:	f002 f823 	bl	800a2fc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80082bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80082c0:	2100      	movs	r1, #0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 f81a 	bl	800a2fc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80082ce:	2212      	movs	r2, #18
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f002 f812 	bl	800a2fc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80082de:	223e      	movs	r2, #62	@ 0x3e
 80082e0:	2100      	movs	r1, #0
 80082e2:	4618      	mov	r0, r3
 80082e4:	f002 f80a 	bl	800a2fc <memset>

  return USBH_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b085      	sub	sp, #20
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d016      	beq.n	8008334 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10e      	bne.n	800832e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008316:	1c59      	adds	r1, r3, #1
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	33de      	adds	r3, #222	@ 0xde
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	73fb      	strb	r3, [r7, #15]
 800832c:	e004      	b.n	8008338 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	73fb      	strb	r3, [r7, #15]
 8008332:	e001      	b.n	8008338 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3714      	adds	r7, #20
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr

08008346 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008346:	b480      	push	{r7}
 8008348:	b085      	sub	sp, #20
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008352:	2300      	movs	r3, #0
 8008354:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800835c:	78fa      	ldrb	r2, [r7, #3]
 800835e:	429a      	cmp	r2, r3
 8008360:	d204      	bcs.n	800836c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	78fa      	ldrb	r2, [r7, #3]
 8008366:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800836a:	e001      	b.n	8008370 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800836c:	2302      	movs	r3, #2
 800836e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr

0800837e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800837e:	b480      	push	{r7}
 8008380:	b087      	sub	sp, #28
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	461a      	mov	r2, r3
 800838c:	4603      	mov	r3, r0
 800838e:	70fb      	strb	r3, [r7, #3]
 8008390:	460b      	mov	r3, r1
 8008392:	70bb      	strb	r3, [r7, #2]
 8008394:	4613      	mov	r3, r2
 8008396:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80083a6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083a8:	e025      	b.n	80083f6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	221a      	movs	r2, #26
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	3308      	adds	r3, #8
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4413      	add	r3, r2
 80083b8:	3302      	adds	r3, #2
 80083ba:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	795b      	ldrb	r3, [r3, #5]
 80083c0:	78fa      	ldrb	r2, [r7, #3]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d002      	beq.n	80083cc <USBH_FindInterface+0x4e>
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	2bff      	cmp	r3, #255	@ 0xff
 80083ca:	d111      	bne.n	80083f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80083d0:	78ba      	ldrb	r2, [r7, #2]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d002      	beq.n	80083dc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083d6:	78bb      	ldrb	r3, [r7, #2]
 80083d8:	2bff      	cmp	r3, #255	@ 0xff
 80083da:	d109      	bne.n	80083f0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80083e0:	787a      	ldrb	r2, [r7, #1]
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d002      	beq.n	80083ec <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80083e6:	787b      	ldrb	r3, [r7, #1]
 80083e8:	2bff      	cmp	r3, #255	@ 0xff
 80083ea:	d101      	bne.n	80083f0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	e006      	b.n	80083fe <USBH_FindInterface+0x80>
    }
    if_ix++;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	3301      	adds	r3, #1
 80083f4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d9d6      	bls.n	80083aa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80083fc:	23ff      	movs	r3, #255	@ 0xff
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fcf8 	bl	8009e08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008418:	2101      	movs	r1, #1
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f001 fe11 	bl	800a042 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
	...

0800842c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af04      	add	r7, sp, #16
 8008432:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008434:	2302      	movs	r3, #2
 8008436:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008438:	2300      	movs	r3, #0
 800843a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008442:	b2db      	uxtb	r3, r3
 8008444:	2b01      	cmp	r3, #1
 8008446:	d102      	bne.n	800844e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2203      	movs	r2, #3
 800844c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b0b      	cmp	r3, #11
 8008456:	f200 81bb 	bhi.w	80087d0 <USBH_Process+0x3a4>
 800845a:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <USBH_Process+0x34>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008491 	.word	0x08008491
 8008464:	080084c3 	.word	0x080084c3
 8008468:	0800852b 	.word	0x0800852b
 800846c:	0800876b 	.word	0x0800876b
 8008470:	080087d1 	.word	0x080087d1
 8008474:	080085cb 	.word	0x080085cb
 8008478:	08008711 	.word	0x08008711
 800847c:	08008601 	.word	0x08008601
 8008480:	08008621 	.word	0x08008621
 8008484:	0800863f 	.word	0x0800863f
 8008488:	08008683 	.word	0x08008683
 800848c:	08008753 	.word	0x08008753
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 819b 	beq.w	80087d4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80084a4:	20c8      	movs	r0, #200	@ 0xc8
 80084a6:	f001 fe18 	bl	800a0da <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f001 fd09 	bl	8009ec2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084c0:	e188      	b.n	80087d4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d107      	bne.n	80084dc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2202      	movs	r2, #2
 80084d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80084da:	e18a      	b.n	80087f2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80084e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084e6:	d914      	bls.n	8008512 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80084ee:	3301      	adds	r3, #1
 80084f0:	b2da      	uxtb	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d903      	bls.n	800850a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	220d      	movs	r2, #13
 8008506:	701a      	strb	r2, [r3, #0]
      break;
 8008508:	e173      	b.n	80087f2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]
      break;
 8008510:	e16f      	b.n	80087f2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008518:	f103 020a 	add.w	r2, r3, #10
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008522:	200a      	movs	r0, #10
 8008524:	f001 fdd9 	bl	800a0da <USBH_Delay>
      break;
 8008528:	e163      	b.n	80087f2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800853a:	2104      	movs	r1, #4
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008540:	2064      	movs	r0, #100	@ 0x64
 8008542:	f001 fdca 	bl	800a0da <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fc94 	bl	8009e74 <USBH_LL_GetSpeed>
 800854c:	4603      	mov	r3, r0
 800854e:	461a      	mov	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2205      	movs	r2, #5
 800855a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800855c:	2100      	movs	r1, #0
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f001 fa9b 	bl	8009a9a <USBH_AllocPipe>
 8008564:	4603      	mov	r3, r0
 8008566:	461a      	mov	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800856c:	2180      	movs	r1, #128	@ 0x80
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 fa93 	bl	8009a9a <USBH_AllocPipe>
 8008574:	4603      	mov	r3, r0
 8008576:	461a      	mov	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7919      	ldrb	r1, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008590:	9202      	str	r2, [sp, #8]
 8008592:	2200      	movs	r2, #0
 8008594:	9201      	str	r2, [sp, #4]
 8008596:	9300      	str	r3, [sp, #0]
 8008598:	4603      	mov	r3, r0
 800859a:	2280      	movs	r2, #128	@ 0x80
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 fa4d 	bl	8009a3c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7959      	ldrb	r1, [r3, #5]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80085b6:	9202      	str	r2, [sp, #8]
 80085b8:	2200      	movs	r2, #0
 80085ba:	9201      	str	r2, [sp, #4]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4603      	mov	r3, r0
 80085c0:	2200      	movs	r2, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 fa3a 	bl	8009a3c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085c8:	e113      	b.n	80087f2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f000 f916 	bl	80087fc <USBH_HandleEnum>
 80085d0:	4603      	mov	r3, r0
 80085d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 80fd 	bne.w	80087d8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2200      	movs	r2, #0
 80085e2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d103      	bne.n	80085f8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2208      	movs	r2, #8
 80085f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80085f6:	e0ef      	b.n	80087d8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2207      	movs	r2, #7
 80085fc:	701a      	strb	r2, [r3, #0]
      break;
 80085fe:	e0eb      	b.n	80087d8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008606:	2b00      	cmp	r3, #0
 8008608:	f000 80e8 	beq.w	80087dc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008612:	2101      	movs	r1, #1
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2208      	movs	r2, #8
 800861c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800861e:	e0dd      	b.n	80087dc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc3a 	bl	8008ea2 <USBH_SetCfg>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	f040 80d5 	bne.w	80087e0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2209      	movs	r2, #9
 800863a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800863c:	e0d0      	b.n	80087e0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008644:	f003 0320 	and.w	r3, r3, #32
 8008648:	2b00      	cmp	r3, #0
 800864a:	d016      	beq.n	800867a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800864c:	2101      	movs	r1, #1
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fc4a 	bl	8008ee8 <USBH_SetFeature>
 8008654:	4603      	mov	r3, r0
 8008656:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b00      	cmp	r3, #0
 800865e:	d103      	bne.n	8008668 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	220a      	movs	r2, #10
 8008664:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008666:	e0bd      	b.n	80087e4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	2b03      	cmp	r3, #3
 800866e:	f040 80b9 	bne.w	80087e4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	220a      	movs	r2, #10
 8008676:	701a      	strb	r2, [r3, #0]
      break;
 8008678:	e0b4      	b.n	80087e4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	220a      	movs	r2, #10
 800867e:	701a      	strb	r2, [r3, #0]
      break;
 8008680:	e0b0      	b.n	80087e4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 80ad 	beq.w	80087e8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008696:	2300      	movs	r3, #0
 8008698:	73fb      	strb	r3, [r7, #15]
 800869a:	e016      	b.n	80086ca <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800869c:	7bfa      	ldrb	r2, [r7, #15]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	32de      	adds	r2, #222	@ 0xde
 80086a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086a6:	791a      	ldrb	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d108      	bne.n	80086c4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80086b2:	7bfa      	ldrb	r2, [r7, #15]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	32de      	adds	r2, #222	@ 0xde
 80086b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80086c2:	e005      	b.n	80086d0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	3301      	adds	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0e5      	beq.n	800869c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d016      	beq.n	8008708 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d109      	bne.n	8008700 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2206      	movs	r2, #6
 80086f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80086f8:	2103      	movs	r1, #3
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086fe:	e073      	b.n	80087e8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	220d      	movs	r2, #13
 8008704:	701a      	strb	r2, [r3, #0]
      break;
 8008706:	e06f      	b.n	80087e8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	220d      	movs	r2, #13
 800870c:	701a      	strb	r2, [r3, #0]
      break;
 800870e:	e06b      	b.n	80087e8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d017      	beq.n	800874a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	4798      	blx	r3
 8008726:	4603      	mov	r3, r0
 8008728:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	d103      	bne.n	800873a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	220b      	movs	r2, #11
 8008736:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008738:	e058      	b.n	80087ec <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800873a:	7bbb      	ldrb	r3, [r7, #14]
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b02      	cmp	r3, #2
 8008740:	d154      	bne.n	80087ec <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	220d      	movs	r2, #13
 8008746:	701a      	strb	r2, [r3, #0]
      break;
 8008748:	e050      	b.n	80087ec <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	220d      	movs	r2, #13
 800874e:	701a      	strb	r2, [r3, #0]
      break;
 8008750:	e04c      	b.n	80087ec <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d049      	beq.n	80087f0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
      }
      break;
 8008768:	e042      	b.n	80087f0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f7ff fd4a 	bl	800820c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087a6:	2105      	movs	r1, #5
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d107      	bne.n	80087c8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f7ff fe22 	bl	800840a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80087c6:	e014      	b.n	80087f2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 fb1d 	bl	8009e08 <USBH_LL_Start>
      break;
 80087ce:	e010      	b.n	80087f2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80087d0:	bf00      	nop
 80087d2:	e00e      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087d4:	bf00      	nop
 80087d6:	e00c      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087d8:	bf00      	nop
 80087da:	e00a      	b.n	80087f2 <USBH_Process+0x3c6>
    break;
 80087dc:	bf00      	nop
 80087de:	e008      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087e0:	bf00      	nop
 80087e2:	e006      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087e4:	bf00      	nop
 80087e6:	e004      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087e8:	bf00      	nop
 80087ea:	e002      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087ec:	bf00      	nop
 80087ee:	e000      	b.n	80087f2 <USBH_Process+0x3c6>
      break;
 80087f0:	bf00      	nop
  }
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008808:	2301      	movs	r3, #1
 800880a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	785b      	ldrb	r3, [r3, #1]
 8008810:	2b07      	cmp	r3, #7
 8008812:	f200 81bd 	bhi.w	8008b90 <USBH_HandleEnum+0x394>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <USBH_HandleEnum+0x20>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	0800883d 	.word	0x0800883d
 8008820:	080088f7 	.word	0x080088f7
 8008824:	08008961 	.word	0x08008961
 8008828:	080089eb 	.word	0x080089eb
 800882c:	08008a55 	.word	0x08008a55
 8008830:	08008ac5 	.word	0x08008ac5
 8008834:	08008b0b 	.word	0x08008b0b
 8008838:	08008b51 	.word	0x08008b51
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800883c:	2108      	movs	r1, #8
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f000 fa4c 	bl	8008cdc <USBH_Get_DevDesc>
 8008844:	4603      	mov	r3, r0
 8008846:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d12e      	bne.n	80088ac <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	7919      	ldrb	r1, [r3, #4]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008872:	9202      	str	r2, [sp, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	9201      	str	r2, [sp, #4]
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	4603      	mov	r3, r0
 800887c:	2280      	movs	r2, #128	@ 0x80
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f8dc 	bl	8009a3c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	7959      	ldrb	r1, [r3, #5]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008898:	9202      	str	r2, [sp, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	9201      	str	r2, [sp, #4]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4603      	mov	r3, r0
 80088a2:	2200      	movs	r2, #0
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f001 f8c9 	bl	8009a3c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80088aa:	e173      	b.n	8008b94 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80088ac:	7bbb      	ldrb	r3, [r7, #14]
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	f040 8170 	bne.w	8008b94 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088ba:	3301      	adds	r3, #1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d903      	bls.n	80088d6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	220d      	movs	r2, #13
 80088d2:	701a      	strb	r2, [r3, #0]
      break;
 80088d4:	e15e      	b.n	8008b94 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	795b      	ldrb	r3, [r3, #5]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 f8fd 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	791b      	ldrb	r3, [r3, #4]
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f001 f8f7 	bl	8009adc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	701a      	strb	r2, [r3, #0]
      break;
 80088f4:	e14e      	b.n	8008b94 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80088f6:	2112      	movs	r1, #18
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f9ef 	bl	8008cdc <USBH_Get_DevDesc>
 80088fe:	4603      	mov	r3, r0
 8008900:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d103      	bne.n	8008910 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2202      	movs	r2, #2
 800890c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800890e:	e143      	b.n	8008b98 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b03      	cmp	r3, #3
 8008914:	f040 8140 	bne.w	8008b98 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800891e:	3301      	adds	r3, #1
 8008920:	b2da      	uxtb	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800892e:	2b03      	cmp	r3, #3
 8008930:	d903      	bls.n	800893a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	220d      	movs	r2, #13
 8008936:	701a      	strb	r2, [r3, #0]
      break;
 8008938:	e12e      	b.n	8008b98 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	795b      	ldrb	r3, [r3, #5]
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 f8cb 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 f8c5 	bl	8009adc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
      break;
 800895e:	e11b      	b.n	8008b98 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008960:	2101      	movs	r1, #1
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa79 	bl	8008e5a <USBH_SetAddress>
 8008968:	4603      	mov	r3, r0
 800896a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d130      	bne.n	80089d4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008972:	2002      	movs	r0, #2
 8008974:	f001 fbb1 	bl	800a0da <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2203      	movs	r2, #3
 8008984:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	7919      	ldrb	r1, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800899a:	9202      	str	r2, [sp, #8]
 800899c:	2200      	movs	r2, #0
 800899e:	9201      	str	r2, [sp, #4]
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	4603      	mov	r3, r0
 80089a4:	2280      	movs	r2, #128	@ 0x80
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 f848 	bl	8009a3c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7959      	ldrb	r1, [r3, #5]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80089c0:	9202      	str	r2, [sp, #8]
 80089c2:	2200      	movs	r2, #0
 80089c4:	9201      	str	r2, [sp, #4]
 80089c6:	9300      	str	r3, [sp, #0]
 80089c8:	4603      	mov	r3, r0
 80089ca:	2200      	movs	r2, #0
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 f835 	bl	8009a3c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80089d2:	e0e3      	b.n	8008b9c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	f040 80e0 	bne.w	8008b9c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	220d      	movs	r2, #13
 80089e0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	705a      	strb	r2, [r3, #1]
      break;
 80089e8:	e0d8      	b.n	8008b9c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80089ea:	2109      	movs	r1, #9
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f9a1 	bl	8008d34 <USBH_Get_CfgDesc>
 80089f2:	4603      	mov	r3, r0
 80089f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089f6:	7bbb      	ldrb	r3, [r7, #14]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2204      	movs	r2, #4
 8008a00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a02:	e0cd      	b.n	8008ba0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	f040 80ca 	bne.w	8008ba0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a12:	3301      	adds	r3, #1
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d903      	bls.n	8008a2e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	220d      	movs	r2, #13
 8008a2a:	701a      	strb	r2, [r3, #0]
      break;
 8008a2c:	e0b8      	b.n	8008ba0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	795b      	ldrb	r3, [r3, #5]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 f851 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	791b      	ldrb	r3, [r3, #4]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 f84b 	bl	8009adc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	701a      	strb	r2, [r3, #0]
      break;
 8008a52:	e0a5      	b.n	8008ba0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 f969 	bl	8008d34 <USBH_Get_CfgDesc>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a66:	7bbb      	ldrb	r3, [r7, #14]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d103      	bne.n	8008a74 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2205      	movs	r2, #5
 8008a70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008a72:	e097      	b.n	8008ba4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a74:	7bbb      	ldrb	r3, [r7, #14]
 8008a76:	2b03      	cmp	r3, #3
 8008a78:	f040 8094 	bne.w	8008ba4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a82:	3301      	adds	r3, #1
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008a92:	2b03      	cmp	r3, #3
 8008a94:	d903      	bls.n	8008a9e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	220d      	movs	r2, #13
 8008a9a:	701a      	strb	r2, [r3, #0]
      break;
 8008a9c:	e082      	b.n	8008ba4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	795b      	ldrb	r3, [r3, #5]
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f001 f819 	bl	8009adc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	791b      	ldrb	r3, [r3, #4]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 f813 	bl	8009adc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
      break;
 8008ac2:	e06f      	b.n	8008ba4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d019      	beq.n	8008b02 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ada:	23ff      	movs	r3, #255	@ 0xff
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f953 	bl	8008d88 <USBH_Get_StringDesc>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2206      	movs	r2, #6
 8008af0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008af2:	e059      	b.n	8008ba8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d156      	bne.n	8008ba8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2206      	movs	r2, #6
 8008afe:	705a      	strb	r2, [r3, #1]
      break;
 8008b00:	e052      	b.n	8008ba8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2206      	movs	r2, #6
 8008b06:	705a      	strb	r2, [r3, #1]
      break;
 8008b08:	e04e      	b.n	8008ba8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d019      	beq.n	8008b48 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008b20:	23ff      	movs	r3, #255	@ 0xff
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f930 	bl	8008d88 <USBH_Get_StringDesc>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d103      	bne.n	8008b3a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2207      	movs	r2, #7
 8008b36:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b38:	e038      	b.n	8008bac <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d135      	bne.n	8008bac <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2207      	movs	r2, #7
 8008b44:	705a      	strb	r2, [r3, #1]
      break;
 8008b46:	e031      	b.n	8008bac <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2207      	movs	r2, #7
 8008b4c:	705a      	strb	r2, [r3, #1]
      break;
 8008b4e:	e02d      	b.n	8008bac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d017      	beq.n	8008b8a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008b66:	23ff      	movs	r3, #255	@ 0xff
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f90d 	bl	8008d88 <USBH_Get_StringDesc>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008b72:	7bbb      	ldrb	r3, [r7, #14]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008b7c:	e018      	b.n	8008bb0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b7e:	7bbb      	ldrb	r3, [r7, #14]
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d115      	bne.n	8008bb0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
      break;
 8008b88:	e012      	b.n	8008bb0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b8e:	e00f      	b.n	8008bb0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008b90:	bf00      	nop
 8008b92:	e00e      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008b94:	bf00      	nop
 8008b96:	e00c      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e00a      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e008      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e006      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e004      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008ba8:	bf00      	nop
 8008baa:	e002      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <USBH_HandleEnum+0x3b6>
      break;
 8008bb0:	bf00      	nop
  }
  return Status;
 8008bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	683a      	ldr	r2, [r7, #0]
 8008bca:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008be8:	1c5a      	adds	r2, r3, #1
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f804 	bl	8008bfe <USBH_HandleSof>
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b0b      	cmp	r3, #11
 8008c0e:	d10a      	bne.n	8008c26 <USBH_HandleSof+0x28>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d005      	beq.n	8008c26 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	4798      	blx	r3
  }
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008c3e:	bf00      	nop
}
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b083      	sub	sp, #12
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008c5a:	bf00      	nop
}
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b083      	sub	sp, #12
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 f8c2 	bl	8009e3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	791b      	ldrb	r3, [r3, #4]
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 ff0b 	bl	8009adc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	795b      	ldrb	r3, [r3, #5]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 ff05 	bl	8009adc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b086      	sub	sp, #24
 8008ce0:	af02      	add	r7, sp, #8
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008ce8:	887b      	ldrh	r3, [r7, #2]
 8008cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cee:	d901      	bls.n	8008cf4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e01b      	b.n	8008d2c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008cfa:	887b      	ldrh	r3, [r7, #2]
 8008cfc:	9300      	str	r3, [sp, #0]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d04:	2100      	movs	r1, #0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 f872 	bl	8008df0 <USBH_GetDescriptor>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d1c:	887a      	ldrh	r2, [r7, #2]
 8008d1e:	4619      	mov	r1, r3
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f929 	bl	8008f78 <USBH_ParseDevDesc>
 8008d26:	4603      	mov	r3, r0
 8008d28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af02      	add	r7, sp, #8
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	331c      	adds	r3, #28
 8008d44:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008d46:	887b      	ldrh	r3, [r7, #2]
 8008d48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d4c:	d901      	bls.n	8008d52 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e016      	b.n	8008d80 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008d52:	887b      	ldrh	r3, [r7, #2]
 8008d54:	9300      	str	r3, [sp, #0]
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f846 	bl	8008df0 <USBH_GetDescriptor>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d107      	bne.n	8008d7e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008d6e:	887b      	ldrh	r3, [r7, #2]
 8008d70:	461a      	mov	r2, r3
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9af 	bl	80090d8 <USBH_ParseCfgDesc>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	607a      	str	r2, [r7, #4]
 8008d92:	461a      	mov	r2, r3
 8008d94:	460b      	mov	r3, r1
 8008d96:	72fb      	strb	r3, [r7, #11]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008d9c:	893b      	ldrh	r3, [r7, #8]
 8008d9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008da2:	d802      	bhi.n	8008daa <USBH_Get_StringDesc+0x22>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008daa:	2303      	movs	r3, #3
 8008dac:	e01c      	b.n	8008de8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008dae:	7afb      	ldrb	r3, [r7, #11]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008db6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008dbe:	893b      	ldrh	r3, [r7, #8]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f000 f812 	bl	8008df0 <USBH_GetDescriptor>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d107      	bne.n	8008de6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ddc:	893a      	ldrh	r2, [r7, #8]
 8008dde:	6879      	ldr	r1, [r7, #4]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 fb8d 	bl	8009500 <USBH_ParseStringDesc>
  }

  return status;
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	72fb      	strb	r3, [r7, #11]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	789b      	ldrb	r3, [r3, #2]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d11c      	bne.n	8008e44 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008e0a:	7afb      	ldrb	r3, [r7, #11]
 8008e0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2206      	movs	r2, #6
 8008e1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	893a      	ldrh	r2, [r7, #8]
 8008e20:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008e22:	893b      	ldrh	r3, [r7, #8]
 8008e24:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e2c:	d104      	bne.n	8008e38 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f240 4209 	movw	r2, #1033	@ 0x409
 8008e34:	829a      	strh	r2, [r3, #20]
 8008e36:	e002      	b.n	8008e3e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8b3a      	ldrh	r2, [r7, #24]
 8008e42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008e44:	8b3b      	ldrh	r3, [r7, #24]
 8008e46:	461a      	mov	r2, r3
 8008e48:	6879      	ldr	r1, [r7, #4]
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fba5 	bl	800959a <USBH_CtlReq>
 8008e50:	4603      	mov	r3, r0
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}

08008e5a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008e5a:	b580      	push	{r7, lr}
 8008e5c:	b082      	sub	sp, #8
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	460b      	mov	r3, r1
 8008e64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	789b      	ldrb	r3, [r3, #2]
 8008e6a:	2b01      	cmp	r3, #1
 8008e6c:	d10f      	bne.n	8008e8e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2205      	movs	r2, #5
 8008e78:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008e7a:	78fb      	ldrb	r3, [r7, #3]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fb81 	bl	800959a <USBH_CtlReq>
 8008e98:	4603      	mov	r3, r0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	789b      	ldrb	r3, [r3, #2]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d10e      	bne.n	8008ed4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2209      	movs	r2, #9
 8008ec0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	887a      	ldrh	r2, [r7, #2]
 8008ec6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fb5e 	bl	800959a <USBH_CtlReq>
 8008ede:	4603      	mov	r3, r0
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	789b      	ldrb	r3, [r3, #2]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d10f      	bne.n	8008f1c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2203      	movs	r2, #3
 8008f06:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008f08:	78fb      	ldrb	r3, [r7, #3]
 8008f0a:	b29a      	uxth	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	2100      	movs	r1, #0
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fb3a 	bl	800959a <USBH_CtlReq>
 8008f26:	4603      	mov	r3, r0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	460b      	mov	r3, r1
 8008f3a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	789b      	ldrb	r3, [r3, #2]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d10f      	bne.n	8008f64 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008f64:	2200      	movs	r2, #0
 8008f66:	2100      	movs	r1, #0
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb16 	bl	800959a <USBH_CtlReq>
 8008f6e:	4603      	mov	r3, r0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3708      	adds	r7, #8
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b087      	sub	sp, #28
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	4613      	mov	r3, r2
 8008f84:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008f8c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d101      	bne.n	8008f9c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e094      	b.n	80090c6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	781a      	ldrb	r2, [r3, #0]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	785a      	ldrb	r2, [r3, #1]
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	3302      	adds	r3, #2
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	3303      	adds	r3, #3
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	021b      	lsls	r3, r3, #8
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	791a      	ldrb	r2, [r3, #4]
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	795a      	ldrb	r2, [r3, #5]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	799a      	ldrb	r2, [r3, #6]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	79da      	ldrb	r2, [r3, #7]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d004      	beq.n	8008ffa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d11b      	bne.n	8009032 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	79db      	ldrb	r3, [r3, #7]
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	dc0f      	bgt.n	8009022 <USBH_ParseDevDesc+0xaa>
 8009002:	2b08      	cmp	r3, #8
 8009004:	db0f      	blt.n	8009026 <USBH_ParseDevDesc+0xae>
 8009006:	3b08      	subs	r3, #8
 8009008:	4a32      	ldr	r2, [pc, #200]	@ (80090d4 <USBH_ParseDevDesc+0x15c>)
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b00      	cmp	r3, #0
 8009014:	bf14      	ite	ne
 8009016:	2301      	movne	r3, #1
 8009018:	2300      	moveq	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d106      	bne.n	800902e <USBH_ParseDevDesc+0xb6>
 8009020:	e001      	b.n	8009026 <USBH_ParseDevDesc+0xae>
 8009022:	2b40      	cmp	r3, #64	@ 0x40
 8009024:	d003      	beq.n	800902e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2208      	movs	r2, #8
 800902a:	71da      	strb	r2, [r3, #7]
        break;
 800902c:	e000      	b.n	8009030 <USBH_ParseDevDesc+0xb8>
        break;
 800902e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009030:	e00e      	b.n	8009050 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009038:	2b02      	cmp	r3, #2
 800903a:	d107      	bne.n	800904c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	79db      	ldrb	r3, [r3, #7]
 8009040:	2b08      	cmp	r3, #8
 8009042:	d005      	beq.n	8009050 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2208      	movs	r2, #8
 8009048:	71da      	strb	r2, [r3, #7]
 800904a:	e001      	b.n	8009050 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800904c:	2303      	movs	r3, #3
 800904e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009050:	88fb      	ldrh	r3, [r7, #6]
 8009052:	2b08      	cmp	r3, #8
 8009054:	d936      	bls.n	80090c4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	3308      	adds	r3, #8
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	461a      	mov	r2, r3
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	3309      	adds	r3, #9
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	021b      	lsls	r3, r3, #8
 8009066:	b29b      	uxth	r3, r3
 8009068:	4313      	orrs	r3, r2
 800906a:	b29a      	uxth	r2, r3
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	330a      	adds	r3, #10
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	330b      	adds	r3, #11
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	b29b      	uxth	r3, r3
 8009082:	4313      	orrs	r3, r2
 8009084:	b29a      	uxth	r2, r3
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	330c      	adds	r3, #12
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	330d      	adds	r3, #13
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	021b      	lsls	r3, r3, #8
 800909a:	b29b      	uxth	r3, r3
 800909c:	4313      	orrs	r3, r2
 800909e:	b29a      	uxth	r2, r3
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	7b9a      	ldrb	r2, [r3, #14]
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	7bda      	ldrb	r2, [r3, #15]
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	7c1a      	ldrb	r2, [r3, #16]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	7c5a      	ldrb	r2, [r3, #17]
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	01000101 	.word	0x01000101

080090d8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08c      	sub	sp, #48	@ 0x30
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	4613      	mov	r3, r2
 80090e4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80090ec:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80090ee:	2300      	movs	r3, #0
 80090f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80090fa:	2300      	movs	r3, #0
 80090fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009106:	2302      	movs	r3, #2
 8009108:	e0da      	b.n	80092c0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	2b09      	cmp	r3, #9
 8009114:	d002      	beq.n	800911c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009118:	2209      	movs	r2, #9
 800911a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	785a      	ldrb	r2, [r3, #1]
 8009128:	6a3b      	ldr	r3, [r7, #32]
 800912a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3302      	adds	r3, #2
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	3303      	adds	r3, #3
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	b29b      	uxth	r3, r3
 800913e:	4313      	orrs	r3, r2
 8009140:	b29b      	uxth	r3, r3
 8009142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009146:	bf28      	it	cs
 8009148:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800914c:	b29a      	uxth	r2, r3
 800914e:	6a3b      	ldr	r3, [r7, #32]
 8009150:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	791a      	ldrb	r2, [r3, #4]
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	795a      	ldrb	r2, [r3, #5]
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	799a      	ldrb	r2, [r3, #6]
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	79da      	ldrb	r2, [r3, #7]
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	7a1a      	ldrb	r2, [r3, #8]
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800917a:	88fb      	ldrh	r3, [r7, #6]
 800917c:	2b09      	cmp	r3, #9
 800917e:	f240 809d 	bls.w	80092bc <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009182:	2309      	movs	r3, #9
 8009184:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800918a:	e081      	b.n	8009290 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800918c:	f107 0316 	add.w	r3, r7, #22
 8009190:	4619      	mov	r1, r3
 8009192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009194:	f000 f9e7 	bl	8009566 <USBH_GetNextDesc>
 8009198:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800919a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919c:	785b      	ldrb	r3, [r3, #1]
 800919e:	2b04      	cmp	r3, #4
 80091a0:	d176      	bne.n	8009290 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80091a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	2b09      	cmp	r3, #9
 80091a8:	d002      	beq.n	80091b0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80091aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ac:	2209      	movs	r2, #9
 80091ae:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80091b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80091b4:	221a      	movs	r2, #26
 80091b6:	fb02 f303 	mul.w	r3, r2, r3
 80091ba:	3308      	adds	r3, #8
 80091bc:	6a3a      	ldr	r2, [r7, #32]
 80091be:	4413      	add	r3, r2
 80091c0:	3302      	adds	r3, #2
 80091c2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80091c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091c6:	69f8      	ldr	r0, [r7, #28]
 80091c8:	f000 f87e 	bl	80092c8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091d6:	e043      	b.n	8009260 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80091d8:	f107 0316 	add.w	r3, r7, #22
 80091dc:	4619      	mov	r1, r3
 80091de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091e0:	f000 f9c1 	bl	8009566 <USBH_GetNextDesc>
 80091e4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e8:	785b      	ldrb	r3, [r3, #1]
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d138      	bne.n	8009260 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	795b      	ldrb	r3, [r3, #5]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d113      	bne.n	800921e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d003      	beq.n	8009206 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	799b      	ldrb	r3, [r3, #6]
 8009202:	2b03      	cmp	r3, #3
 8009204:	d10b      	bne.n	800921e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	79db      	ldrb	r3, [r3, #7]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10b      	bne.n	8009226 <USBH_ParseCfgDesc+0x14e>
 800920e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	2b09      	cmp	r3, #9
 8009214:	d007      	beq.n	8009226 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009218:	2209      	movs	r2, #9
 800921a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800921c:	e003      	b.n	8009226 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	2207      	movs	r2, #7
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	e000      	b.n	8009228 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009226:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800922c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009230:	3201      	adds	r2, #1
 8009232:	00d2      	lsls	r2, r2, #3
 8009234:	211a      	movs	r1, #26
 8009236:	fb01 f303 	mul.w	r3, r1, r3
 800923a:	4413      	add	r3, r2
 800923c:	3308      	adds	r3, #8
 800923e:	6a3a      	ldr	r2, [r7, #32]
 8009240:	4413      	add	r3, r2
 8009242:	3304      	adds	r3, #4
 8009244:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009248:	69b9      	ldr	r1, [r7, #24]
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f870 	bl	8009330 <USBH_ParseEPDesc>
 8009250:	4603      	mov	r3, r0
 8009252:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009256:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800925a:	3301      	adds	r3, #1
 800925c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	791b      	ldrb	r3, [r3, #4]
 8009264:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009268:	429a      	cmp	r2, r3
 800926a:	d204      	bcs.n	8009276 <USBH_ParseCfgDesc+0x19e>
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	885a      	ldrh	r2, [r3, #2]
 8009270:	8afb      	ldrh	r3, [r7, #22]
 8009272:	429a      	cmp	r2, r3
 8009274:	d8b0      	bhi.n	80091d8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	791b      	ldrb	r3, [r3, #4]
 800927a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800927e:	429a      	cmp	r2, r3
 8009280:	d201      	bcs.n	8009286 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009282:	2303      	movs	r3, #3
 8009284:	e01c      	b.n	80092c0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009286:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800928a:	3301      	adds	r3, #1
 800928c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009290:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009294:	2b01      	cmp	r3, #1
 8009296:	d805      	bhi.n	80092a4 <USBH_ParseCfgDesc+0x1cc>
 8009298:	6a3b      	ldr	r3, [r7, #32]
 800929a:	885a      	ldrh	r2, [r3, #2]
 800929c:	8afb      	ldrh	r3, [r7, #22]
 800929e:	429a      	cmp	r2, r3
 80092a0:	f63f af74 	bhi.w	800918c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80092a4:	6a3b      	ldr	r3, [r7, #32]
 80092a6:	791b      	ldrb	r3, [r3, #4]
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	bf28      	it	cs
 80092ac:	2302      	movcs	r3, #2
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d201      	bcs.n	80092bc <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e001      	b.n	80092c0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80092bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3730      	adds	r7, #48	@ 0x30
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781a      	ldrb	r2, [r3, #0]
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	785a      	ldrb	r2, [r3, #1]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	789a      	ldrb	r2, [r3, #2]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	78da      	ldrb	r2, [r3, #3]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	3304      	adds	r3, #4
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	bf28      	it	cs
 80092fc:	2302      	movcs	r3, #2
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	795a      	ldrb	r2, [r3, #5]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	799a      	ldrb	r2, [r3, #6]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	79da      	ldrb	r2, [r3, #7]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	7a1a      	ldrb	r2, [r3, #8]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	721a      	strb	r2, [r3, #8]
}
 8009324:	bf00      	nop
 8009326:	370c      	adds	r7, #12
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	785a      	ldrb	r2, [r3, #1]
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	789a      	ldrb	r2, [r3, #2]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	78da      	ldrb	r2, [r3, #3]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	3304      	adds	r3, #4
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3305      	adds	r3, #5
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	021b      	lsls	r3, r3, #8
 8009370:	b29b      	uxth	r3, r3
 8009372:	4313      	orrs	r3, r2
 8009374:	b29a      	uxth	r2, r3
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	799a      	ldrb	r2, [r3, #6]
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	889b      	ldrh	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d009      	beq.n	800939e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800938e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009392:	d804      	bhi.n	800939e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800939c:	d901      	bls.n	80093a2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800939e:	2303      	movs	r3, #3
 80093a0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d136      	bne.n	800941a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	78db      	ldrb	r3, [r3, #3]
 80093b0:	f003 0303 	and.w	r3, r3, #3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d108      	bne.n	80093ca <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	889b      	ldrh	r3, [r3, #4]
 80093bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093c0:	f240 8097 	bls.w	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093c4:	2303      	movs	r3, #3
 80093c6:	75fb      	strb	r3, [r7, #23]
 80093c8:	e093      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	78db      	ldrb	r3, [r3, #3]
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d107      	bne.n	80093e6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	889b      	ldrh	r3, [r3, #4]
 80093da:	2b40      	cmp	r3, #64	@ 0x40
 80093dc:	f240 8089 	bls.w	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80093e0:	2303      	movs	r3, #3
 80093e2:	75fb      	strb	r3, [r7, #23]
 80093e4:	e085      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	78db      	ldrb	r3, [r3, #3]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d005      	beq.n	80093fe <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	78db      	ldrb	r3, [r3, #3]
 80093f6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d10a      	bne.n	8009414 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	799b      	ldrb	r3, [r3, #6]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <USBH_ParseEPDesc+0xde>
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	799b      	ldrb	r3, [r3, #6]
 800940a:	2b10      	cmp	r3, #16
 800940c:	d970      	bls.n	80094f0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800940e:	2303      	movs	r3, #3
 8009410:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009412:	e06d      	b.n	80094f0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009414:	2303      	movs	r3, #3
 8009416:	75fb      	strb	r3, [r7, #23]
 8009418:	e06b      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009420:	2b01      	cmp	r3, #1
 8009422:	d13c      	bne.n	800949e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	78db      	ldrb	r3, [r3, #3]
 8009428:	f003 0303 	and.w	r3, r3, #3
 800942c:	2b02      	cmp	r3, #2
 800942e:	d005      	beq.n	800943c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	78db      	ldrb	r3, [r3, #3]
 8009434:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	889b      	ldrh	r3, [r3, #4]
 8009440:	2b40      	cmp	r3, #64	@ 0x40
 8009442:	d956      	bls.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009444:	2303      	movs	r3, #3
 8009446:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009448:	e053      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	f003 0303 	and.w	r3, r3, #3
 8009452:	2b01      	cmp	r3, #1
 8009454:	d10e      	bne.n	8009474 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	799b      	ldrb	r3, [r3, #6]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d007      	beq.n	800946e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009462:	2b10      	cmp	r3, #16
 8009464:	d803      	bhi.n	800946e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800946a:	2b40      	cmp	r3, #64	@ 0x40
 800946c:	d941      	bls.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800946e:	2303      	movs	r3, #3
 8009470:	75fb      	strb	r3, [r7, #23]
 8009472:	e03e      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	78db      	ldrb	r3, [r3, #3]
 8009478:	f003 0303 	and.w	r3, r3, #3
 800947c:	2b03      	cmp	r3, #3
 800947e:	d10b      	bne.n	8009498 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	799b      	ldrb	r3, [r3, #6]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <USBH_ParseEPDesc+0x162>
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	889b      	ldrh	r3, [r3, #4]
 800948c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009490:	d32f      	bcc.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009492:	2303      	movs	r3, #3
 8009494:	75fb      	strb	r3, [r7, #23]
 8009496:	e02c      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009498:	2303      	movs	r3, #3
 800949a:	75fb      	strb	r3, [r7, #23]
 800949c:	e029      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d120      	bne.n	80094ea <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	78db      	ldrb	r3, [r3, #3]
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d106      	bne.n	80094c2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	889b      	ldrh	r3, [r3, #4]
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d01a      	beq.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094bc:	2303      	movs	r3, #3
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	e017      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	78db      	ldrb	r3, [r3, #3]
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	d10a      	bne.n	80094e4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	799b      	ldrb	r3, [r3, #6]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <USBH_ParseEPDesc+0x1ae>
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	889b      	ldrh	r3, [r3, #4]
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d909      	bls.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80094de:	2303      	movs	r3, #3
 80094e0:	75fb      	strb	r3, [r7, #23]
 80094e2:	e006      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80094e4:	2303      	movs	r3, #3
 80094e6:	75fb      	strb	r3, [r7, #23]
 80094e8:	e003      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80094ea:	2303      	movs	r3, #3
 80094ec:	75fb      	strb	r3, [r7, #23]
 80094ee:	e000      	b.n	80094f2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80094f0:	bf00      	nop
  }

  return status;
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	371c      	adds	r7, #28
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3301      	adds	r3, #1
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b03      	cmp	r3, #3
 8009516:	d120      	bne.n	800955a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	1e9a      	subs	r2, r3, #2
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	4293      	cmp	r3, r2
 8009522:	bf28      	it	cs
 8009524:	4613      	movcs	r3, r2
 8009526:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3302      	adds	r3, #2
 800952c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800952e:	2300      	movs	r3, #0
 8009530:	82fb      	strh	r3, [r7, #22]
 8009532:	e00b      	b.n	800954c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009534:	8afb      	ldrh	r3, [r7, #22]
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	4413      	add	r3, r2
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	3301      	adds	r3, #1
 8009544:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009546:	8afb      	ldrh	r3, [r7, #22]
 8009548:	3302      	adds	r3, #2
 800954a:	82fb      	strh	r3, [r7, #22]
 800954c:	8afa      	ldrh	r2, [r7, #22]
 800954e:	8abb      	ldrh	r3, [r7, #20]
 8009550:	429a      	cmp	r2, r3
 8009552:	d3ef      	bcc.n	8009534 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
  }
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr

08009566 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009566:	b480      	push	{r7}
 8009568:	b085      	sub	sp, #20
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
 800956e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	881b      	ldrh	r3, [r3, #0]
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	7812      	ldrb	r2, [r2, #0]
 8009578:	4413      	add	r3, r2
 800957a:	b29a      	uxth	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4413      	add	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800958c:	68fb      	ldr	r3, [r7, #12]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	60b9      	str	r1, [r7, #8]
 80095a4:	4613      	mov	r3, r2
 80095a6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80095a8:	2301      	movs	r3, #1
 80095aa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	789b      	ldrb	r3, [r3, #2]
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d002      	beq.n	80095ba <USBH_CtlReq+0x20>
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d00f      	beq.n	80095d8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80095b8:	e027      	b.n	800960a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2202      	movs	r2, #2
 80095d0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80095d2:	2301      	movs	r3, #1
 80095d4:	75fb      	strb	r3, [r7, #23]
      break;
 80095d6:	e018      	b.n	800960a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f81b 	bl	8009614 <USBH_HandleControl>
 80095de:	4603      	mov	r3, r0
 80095e0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <USBH_CtlReq+0x54>
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d106      	bne.n	80095fc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2201      	movs	r2, #1
 80095f2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	761a      	strb	r2, [r3, #24]
      break;
 80095fa:	e005      	b.n	8009608 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d102      	bne.n	8009608 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	709a      	strb	r2, [r3, #2]
      break;
 8009608:	bf00      	nop
  }
  return status;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af02      	add	r7, sp, #8
 800961a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800961c:	2301      	movs	r3, #1
 800961e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009620:	2300      	movs	r3, #0
 8009622:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7e1b      	ldrb	r3, [r3, #24]
 8009628:	3b01      	subs	r3, #1
 800962a:	2b0a      	cmp	r3, #10
 800962c:	f200 8156 	bhi.w	80098dc <USBH_HandleControl+0x2c8>
 8009630:	a201      	add	r2, pc, #4	@ (adr r2, 8009638 <USBH_HandleControl+0x24>)
 8009632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009636:	bf00      	nop
 8009638:	08009665 	.word	0x08009665
 800963c:	0800967f 	.word	0x0800967f
 8009640:	080096e9 	.word	0x080096e9
 8009644:	0800970f 	.word	0x0800970f
 8009648:	08009747 	.word	0x08009747
 800964c:	08009771 	.word	0x08009771
 8009650:	080097c3 	.word	0x080097c3
 8009654:	080097e5 	.word	0x080097e5
 8009658:	08009821 	.word	0x08009821
 800965c:	08009847 	.word	0x08009847
 8009660:	08009885 	.word	0x08009885
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f103 0110 	add.w	r1, r3, #16
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	795b      	ldrb	r3, [r3, #5]
 800966e:	461a      	mov	r2, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f943 	bl	80098fc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2202      	movs	r2, #2
 800967a:	761a      	strb	r2, [r3, #24]
      break;
 800967c:	e139      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	795b      	ldrb	r3, [r3, #5]
 8009682:	4619      	mov	r1, r3
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 fcc9 	bl	800a01c <USBH_LL_GetURBState>
 800968a:	4603      	mov	r3, r0
 800968c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d11e      	bne.n	80096d2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	7c1b      	ldrb	r3, [r3, #16]
 8009698:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800969c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	8adb      	ldrh	r3, [r3, #22]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80096a6:	7b7b      	ldrb	r3, [r7, #13]
 80096a8:	2b80      	cmp	r3, #128	@ 0x80
 80096aa:	d103      	bne.n	80096b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2203      	movs	r2, #3
 80096b0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80096b2:	e115      	b.n	80098e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2205      	movs	r2, #5
 80096b8:	761a      	strb	r2, [r3, #24]
      break;
 80096ba:	e111      	b.n	80098e0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80096bc:	7b7b      	ldrb	r3, [r7, #13]
 80096be:	2b80      	cmp	r3, #128	@ 0x80
 80096c0:	d103      	bne.n	80096ca <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2209      	movs	r2, #9
 80096c6:	761a      	strb	r2, [r3, #24]
      break;
 80096c8:	e10a      	b.n	80098e0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2207      	movs	r2, #7
 80096ce:	761a      	strb	r2, [r3, #24]
      break;
 80096d0:	e106      	b.n	80098e0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80096d2:	7bbb      	ldrb	r3, [r7, #14]
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d003      	beq.n	80096e0 <USBH_HandleControl+0xcc>
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
 80096da:	2b02      	cmp	r3, #2
 80096dc:	f040 8100 	bne.w	80098e0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	220b      	movs	r2, #11
 80096e4:	761a      	strb	r2, [r3, #24]
      break;
 80096e6:	e0fb      	b.n	80098e0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6899      	ldr	r1, [r3, #8]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	899a      	ldrh	r2, [r3, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	791b      	ldrb	r3, [r3, #4]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f93a 	bl	800997a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2204      	movs	r2, #4
 800970a:	761a      	strb	r2, [r3, #24]
      break;
 800970c:	e0f1      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	791b      	ldrb	r3, [r3, #4]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc81 	bl	800a01c <USBH_LL_GetURBState>
 800971a:	4603      	mov	r3, r0
 800971c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d102      	bne.n	800972a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2209      	movs	r2, #9
 8009728:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	2b05      	cmp	r3, #5
 800972e:	d102      	bne.n	8009736 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009730:	2303      	movs	r3, #3
 8009732:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009734:	e0d6      	b.n	80098e4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b04      	cmp	r3, #4
 800973a:	f040 80d3 	bne.w	80098e4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	220b      	movs	r2, #11
 8009742:	761a      	strb	r2, [r3, #24]
      break;
 8009744:	e0ce      	b.n	80098e4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	899a      	ldrh	r2, [r3, #12]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	795b      	ldrb	r3, [r3, #5]
 8009752:	2001      	movs	r0, #1
 8009754:	9000      	str	r0, [sp, #0]
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f8ea 	bl	8009930 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009762:	b29a      	uxth	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2206      	movs	r2, #6
 800976c:	761a      	strb	r2, [r3, #24]
      break;
 800976e:	e0c0      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	795b      	ldrb	r3, [r3, #5]
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f000 fc50 	bl	800a01c <USBH_LL_GetURBState>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d103      	bne.n	800978e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2207      	movs	r2, #7
 800978a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800978c:	e0ac      	b.n	80098e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800978e:	7bbb      	ldrb	r3, [r7, #14]
 8009790:	2b05      	cmp	r3, #5
 8009792:	d105      	bne.n	80097a0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	220c      	movs	r2, #12
 8009798:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800979a:	2303      	movs	r3, #3
 800979c:	73fb      	strb	r3, [r7, #15]
      break;
 800979e:	e0a3      	b.n	80098e8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d103      	bne.n	80097ae <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2205      	movs	r2, #5
 80097aa:	761a      	strb	r2, [r3, #24]
      break;
 80097ac:	e09c      	b.n	80098e8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	2b04      	cmp	r3, #4
 80097b2:	f040 8099 	bne.w	80098e8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	220b      	movs	r2, #11
 80097ba:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80097bc:	2302      	movs	r3, #2
 80097be:	73fb      	strb	r3, [r7, #15]
      break;
 80097c0:	e092      	b.n	80098e8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	791b      	ldrb	r3, [r3, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	2100      	movs	r1, #0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 f8d5 	bl	800997a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097d6:	b29a      	uxth	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2208      	movs	r2, #8
 80097e0:	761a      	strb	r2, [r3, #24]

      break;
 80097e2:	e086      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	791b      	ldrb	r3, [r3, #4]
 80097e8:	4619      	mov	r1, r3
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fc16 	bl	800a01c <USBH_LL_GetURBState>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80097f4:	7bbb      	ldrb	r3, [r7, #14]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d105      	bne.n	8009806 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	220d      	movs	r2, #13
 80097fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009804:	e072      	b.n	80098ec <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009806:	7bbb      	ldrb	r3, [r7, #14]
 8009808:	2b04      	cmp	r3, #4
 800980a:	d103      	bne.n	8009814 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	220b      	movs	r2, #11
 8009810:	761a      	strb	r2, [r3, #24]
      break;
 8009812:	e06b      	b.n	80098ec <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	2b05      	cmp	r3, #5
 8009818:	d168      	bne.n	80098ec <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800981a:	2303      	movs	r3, #3
 800981c:	73fb      	strb	r3, [r7, #15]
      break;
 800981e:	e065      	b.n	80098ec <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	795b      	ldrb	r3, [r3, #5]
 8009824:	2201      	movs	r2, #1
 8009826:	9200      	str	r2, [sp, #0]
 8009828:	2200      	movs	r2, #0
 800982a:	2100      	movs	r1, #0
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f87f 	bl	8009930 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009838:	b29a      	uxth	r2, r3
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	220a      	movs	r2, #10
 8009842:	761a      	strb	r2, [r3, #24]
      break;
 8009844:	e055      	b.n	80098f2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	795b      	ldrb	r3, [r3, #5]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fbe5 	bl	800a01c <USBH_LL_GetURBState>
 8009852:	4603      	mov	r3, r0
 8009854:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009856:	7bbb      	ldrb	r3, [r7, #14]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d105      	bne.n	8009868 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	220d      	movs	r2, #13
 8009864:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009866:	e043      	b.n	80098f0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009868:	7bbb      	ldrb	r3, [r7, #14]
 800986a:	2b02      	cmp	r3, #2
 800986c:	d103      	bne.n	8009876 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2209      	movs	r2, #9
 8009872:	761a      	strb	r2, [r3, #24]
      break;
 8009874:	e03c      	b.n	80098f0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009876:	7bbb      	ldrb	r3, [r7, #14]
 8009878:	2b04      	cmp	r3, #4
 800987a:	d139      	bne.n	80098f0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	220b      	movs	r2, #11
 8009880:	761a      	strb	r2, [r3, #24]
      break;
 8009882:	e035      	b.n	80098f0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	7e5b      	ldrb	r3, [r3, #25]
 8009888:	3301      	adds	r3, #1
 800988a:	b2da      	uxtb	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	765a      	strb	r2, [r3, #25]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	7e5b      	ldrb	r3, [r3, #25]
 8009894:	2b02      	cmp	r3, #2
 8009896:	d806      	bhi.n	80098a6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2201      	movs	r2, #1
 800989c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80098a4:	e025      	b.n	80098f2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098ac:	2106      	movs	r1, #6
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	795b      	ldrb	r3, [r3, #5]
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 f90c 	bl	8009adc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	791b      	ldrb	r3, [r3, #4]
 80098c8:	4619      	mov	r1, r3
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f906 	bl	8009adc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80098d6:	2302      	movs	r3, #2
 80098d8:	73fb      	strb	r3, [r7, #15]
      break;
 80098da:	e00a      	b.n	80098f2 <USBH_HandleControl+0x2de>

    default:
      break;
 80098dc:	bf00      	nop
 80098de:	e008      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098e0:	bf00      	nop
 80098e2:	e006      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098e4:	bf00      	nop
 80098e6:	e004      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <USBH_HandleControl+0x2de>
      break;
 80098f0:	bf00      	nop
  }

  return status;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af04      	add	r7, sp, #16
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800990a:	79f9      	ldrb	r1, [r7, #7]
 800990c:	2300      	movs	r3, #0
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	2308      	movs	r3, #8
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	2300      	movs	r3, #0
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	2300      	movs	r3, #0
 800991e:	2200      	movs	r2, #0
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 fb4a 	bl	8009fba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af04      	add	r7, sp, #16
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	4611      	mov	r1, r2
 800993c:	461a      	mov	r2, r3
 800993e:	460b      	mov	r3, r1
 8009940:	80fb      	strh	r3, [r7, #6]
 8009942:	4613      	mov	r3, r2
 8009944:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800994c:	2b00      	cmp	r3, #0
 800994e:	d001      	beq.n	8009954 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009950:	2300      	movs	r3, #0
 8009952:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009954:	7979      	ldrb	r1, [r7, #5]
 8009956:	7e3b      	ldrb	r3, [r7, #24]
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	2301      	movs	r3, #1
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	2300      	movs	r3, #0
 8009968:	2200      	movs	r2, #0
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 fb25 	bl	8009fba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b088      	sub	sp, #32
 800997e:	af04      	add	r7, sp, #16
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	4611      	mov	r1, r2
 8009986:	461a      	mov	r2, r3
 8009988:	460b      	mov	r3, r1
 800998a:	80fb      	strh	r3, [r7, #6]
 800998c:	4613      	mov	r3, r2
 800998e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009990:	7979      	ldrb	r1, [r7, #5]
 8009992:	2300      	movs	r3, #0
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	88fb      	ldrh	r3, [r7, #6]
 8009998:	9302      	str	r3, [sp, #8]
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	2301      	movs	r3, #1
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	2300      	movs	r3, #0
 80099a4:	2201      	movs	r2, #1
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fb07 	bl	8009fba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099ac:	2300      	movs	r3, #0

}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b088      	sub	sp, #32
 80099ba:	af04      	add	r7, sp, #16
 80099bc:	60f8      	str	r0, [r7, #12]
 80099be:	60b9      	str	r1, [r7, #8]
 80099c0:	4611      	mov	r1, r2
 80099c2:	461a      	mov	r2, r3
 80099c4:	460b      	mov	r3, r1
 80099c6:	80fb      	strh	r3, [r7, #6]
 80099c8:	4613      	mov	r3, r2
 80099ca:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099da:	7979      	ldrb	r1, [r7, #5]
 80099dc:	7e3b      	ldrb	r3, [r7, #24]
 80099de:	9303      	str	r3, [sp, #12]
 80099e0:	88fb      	ldrh	r3, [r7, #6]
 80099e2:	9302      	str	r3, [sp, #8]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	2301      	movs	r3, #1
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2302      	movs	r3, #2
 80099ee:	2200      	movs	r2, #0
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fae2 	bl	8009fba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af04      	add	r7, sp, #16
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	460b      	mov	r3, r1
 8009a10:	80fb      	strh	r3, [r7, #6]
 8009a12:	4613      	mov	r3, r2
 8009a14:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009a16:	7979      	ldrb	r1, [r7, #5]
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	88fb      	ldrh	r3, [r7, #6]
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	9301      	str	r3, [sp, #4]
 8009a24:	2301      	movs	r3, #1
 8009a26:	9300      	str	r3, [sp, #0]
 8009a28:	2302      	movs	r3, #2
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	68f8      	ldr	r0, [r7, #12]
 8009a2e:	f000 fac4 	bl	8009fba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b086      	sub	sp, #24
 8009a40:	af04      	add	r7, sp, #16
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	4608      	mov	r0, r1
 8009a46:	4611      	mov	r1, r2
 8009a48:	461a      	mov	r2, r3
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	70fb      	strb	r3, [r7, #3]
 8009a4e:	460b      	mov	r3, r1
 8009a50:	70bb      	strb	r3, [r7, #2]
 8009a52:	4613      	mov	r3, r2
 8009a54:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009a56:	7878      	ldrb	r0, [r7, #1]
 8009a58:	78ba      	ldrb	r2, [r7, #2]
 8009a5a:	78f9      	ldrb	r1, [r7, #3]
 8009a5c:	8b3b      	ldrh	r3, [r7, #24]
 8009a5e:	9302      	str	r3, [sp, #8]
 8009a60:	7d3b      	ldrb	r3, [r7, #20]
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	7c3b      	ldrb	r3, [r7, #16]
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	4603      	mov	r3, r0
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 fa57 	bl	8009f1e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	460b      	mov	r3, r1
 8009a84:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fa76 	bl	8009f7c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a90:	2300      	movs	r3, #0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a9a:	b580      	push	{r7, lr}
 8009a9c:	b084      	sub	sp, #16
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f836 	bl	8009b18 <USBH_GetFreePipe>
 8009aac:	4603      	mov	r3, r0
 8009aae:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009ab0:	89fb      	ldrh	r3, [r7, #14]
 8009ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d00a      	beq.n	8009ad0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009aba:	78fa      	ldrb	r2, [r7, #3]
 8009abc:	89fb      	ldrh	r3, [r7, #14]
 8009abe:	f003 030f 	and.w	r3, r3, #15
 8009ac2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	33e0      	adds	r3, #224	@ 0xe0
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	b2db      	uxtb	r3, r3
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009ae8:	78fb      	ldrb	r3, [r7, #3]
 8009aea:	2b0f      	cmp	r3, #15
 8009aec:	d80d      	bhi.n	8009b0a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009aee:	78fb      	ldrb	r3, [r7, #3]
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	33e0      	adds	r3, #224	@ 0xe0
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	33e0      	adds	r3, #224	@ 0xe0
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	440b      	add	r3, r1
 8009b08:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b24:	2300      	movs	r3, #0
 8009b26:	73fb      	strb	r3, [r7, #15]
 8009b28:	e00f      	b.n	8009b4a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	33e0      	adds	r3, #224	@ 0xe0
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	e007      	b.n	8009b54 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	3301      	adds	r3, #1
 8009b48:	73fb      	strb	r3, [r7, #15]
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	2b0f      	cmp	r3, #15
 8009b4e:	d9ec      	bls.n	8009b2a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009b50:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009b64:	2201      	movs	r2, #1
 8009b66:	490e      	ldr	r1, [pc, #56]	@ (8009ba0 <MX_USB_HOST_Init+0x40>)
 8009b68:	480e      	ldr	r0, [pc, #56]	@ (8009ba4 <MX_USB_HOST_Init+0x44>)
 8009b6a:	f7fe fb15 	bl	8008198 <USBH_Init>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009b74:	f7f7 f88a 	bl	8000c8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009b78:	490b      	ldr	r1, [pc, #44]	@ (8009ba8 <MX_USB_HOST_Init+0x48>)
 8009b7a:	480a      	ldr	r0, [pc, #40]	@ (8009ba4 <MX_USB_HOST_Init+0x44>)
 8009b7c:	f7fe fbb9 	bl	80082f2 <USBH_RegisterClass>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d001      	beq.n	8009b8a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009b86:	f7f7 f881 	bl	8000c8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009b8a:	4806      	ldr	r0, [pc, #24]	@ (8009ba4 <MX_USB_HOST_Init+0x44>)
 8009b8c:	f7fe fc3d 	bl	800840a <USBH_Start>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d001      	beq.n	8009b9a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009b96:	f7f7 f879 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009b9a:	bf00      	nop
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	08009bc1 	.word	0x08009bc1
 8009ba4:	200003c0 	.word	0x200003c0
 8009ba8:	2000000c 	.word	0x2000000c

08009bac <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009bb0:	4802      	ldr	r0, [pc, #8]	@ (8009bbc <MX_USB_HOST_Process+0x10>)
 8009bb2:	f7fe fc3b 	bl	800842c <USBH_Process>
}
 8009bb6:	bf00      	nop
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200003c0 	.word	0x200003c0

08009bc0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	460b      	mov	r3, r1
 8009bca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d819      	bhi.n	8009c08 <USBH_UserProcess+0x48>
 8009bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8009bdc <USBH_UserProcess+0x1c>)
 8009bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bda:	bf00      	nop
 8009bdc:	08009c09 	.word	0x08009c09
 8009be0:	08009bf9 	.word	0x08009bf9
 8009be4:	08009c09 	.word	0x08009c09
 8009be8:	08009c01 	.word	0x08009c01
 8009bec:	08009bf1 	.word	0x08009bf1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009bf0:	4b09      	ldr	r3, [pc, #36]	@ (8009c18 <USBH_UserProcess+0x58>)
 8009bf2:	2203      	movs	r2, #3
 8009bf4:	701a      	strb	r2, [r3, #0]
  break;
 8009bf6:	e008      	b.n	8009c0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009bf8:	4b07      	ldr	r3, [pc, #28]	@ (8009c18 <USBH_UserProcess+0x58>)
 8009bfa:	2202      	movs	r2, #2
 8009bfc:	701a      	strb	r2, [r3, #0]
  break;
 8009bfe:	e004      	b.n	8009c0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009c00:	4b05      	ldr	r3, [pc, #20]	@ (8009c18 <USBH_UserProcess+0x58>)
 8009c02:	2201      	movs	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
  break;
 8009c06:	e000      	b.n	8009c0a <USBH_UserProcess+0x4a>

  default:
  break;
 8009c08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009c0a:	bf00      	nop
 8009c0c:	370c      	adds	r7, #12
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	20000798 	.word	0x20000798

08009c1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	@ 0x28
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	2200      	movs	r2, #0
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	605a      	str	r2, [r3, #4]
 8009c2e:	609a      	str	r2, [r3, #8]
 8009c30:	60da      	str	r2, [r3, #12]
 8009c32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c3c:	d14e      	bne.n	8009cdc <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c42:	4a28      	ldr	r2, [pc, #160]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c44:	f043 0301 	orr.w	r3, r3, #1
 8009c48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c4a:	4b26      	ldr	r3, [pc, #152]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c4e:	f003 0301 	and.w	r3, r3, #1
 8009c52:	613b      	str	r3, [r7, #16]
 8009c54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009c56:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c60:	2300      	movs	r3, #0
 8009c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c64:	2303      	movs	r3, #3
 8009c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c68:	230a      	movs	r3, #10
 8009c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c6c:	f107 0314 	add.w	r3, r7, #20
 8009c70:	4619      	mov	r1, r3
 8009c72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009c76:	f7f7 fd5f 	bl	8001738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c7e:	4a19      	ldr	r2, [pc, #100]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009c84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009c86:	4b17      	ldr	r3, [pc, #92]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c8e:	60fb      	str	r3, [r7, #12]
 8009c90:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c92:	4b14      	ldr	r3, [pc, #80]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d114      	bne.n	8009cc8 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c9e:	4b11      	ldr	r3, [pc, #68]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ca2:	4a10      	ldr	r2, [pc, #64]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ca8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009caa:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cb2:	60bb      	str	r3, [r7, #8]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8009cb6:	f7f9 fe57 	bl	8003968 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cbe:	4a09      	ldr	r2, [pc, #36]	@ (8009ce4 <HAL_HCD_MspInit+0xc8>)
 8009cc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cc6:	e001      	b.n	8009ccc <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8009cc8:	f7f9 fe4e 	bl	8003968 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2100      	movs	r1, #0
 8009cd0:	2043      	movs	r0, #67	@ 0x43
 8009cd2:	f7f7 fcfa 	bl	80016ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cd6:	2043      	movs	r0, #67	@ 0x43
 8009cd8:	f7f7 fd13 	bl	8001702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cdc:	bf00      	nop
 8009cde:	3728      	adds	r7, #40	@ 0x28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	40021000 	.word	0x40021000

08009ce8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe ff6f 	bl	8008bda <USBH_LL_IncTimer>
}
 8009cfc:	bf00      	nop
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe ffa7 	bl	8008c66 <USBH_LL_Connect>
}
 8009d18:	bf00      	nop
 8009d1a:	3708      	adds	r7, #8
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b082      	sub	sp, #8
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe ffb0 	bl	8008c94 <USBH_LL_Disconnect>
}
 8009d34:	bf00      	nop
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7fe ff61 	bl	8008c2e <USBH_LL_PortEnabled>
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe ff61 	bl	8008c4a <USBH_LL_PortDisabled>
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d12a      	bne.n	8009df8 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009da2:	4a18      	ldr	r2, [pc, #96]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8c2 331c 	str.w	r3, [r2, #796]	@ 0x31c
  phost->pData = &hhcd_USB_OTG_FS;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a15      	ldr	r2, [pc, #84]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dae:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009db2:	4b14      	ldr	r3, [pc, #80]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009db4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009db8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009dba:	4b12      	ldr	r3, [pc, #72]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009dc0:	4b10      	ldr	r3, [pc, #64]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dce:	2202      	movs	r2, #2
 8009dd0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009dd8:	480a      	ldr	r0, [pc, #40]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dda:	f7f7 fe6f 	bl	8001abc <HAL_HCD_Init>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009de4:	f7f6 ff52 	bl	8000c8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009de8:	4806      	ldr	r0, [pc, #24]	@ (8009e04 <USBH_LL_Init+0x74>)
 8009dea:	f7f8 fa8b 	bl	8002304 <HAL_HCD_GetCurrentFrame>
 8009dee:	4603      	mov	r3, r0
 8009df0:	4619      	mov	r1, r3
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe fee2 	bl	8008bbc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3708      	adds	r7, #8
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	2000079c 	.word	0x2000079c

08009e08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b084      	sub	sp, #16
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7f8 f9f8 	bl	8002214 <HAL_HCD_Start>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 f960 	bl	800a0f0 <USBH_Get_USB_Status>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b084      	sub	sp, #16
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7f8 fa00 	bl	800225a <HAL_HCD_Stop>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 f945 	bl	800a0f0 <USBH_Get_USB_Status>
 8009e66:	4603      	mov	r3, r0
 8009e68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009e86:	4618      	mov	r0, r3
 8009e88:	f7f8 fa4a 	bl	8002320 <HAL_HCD_GetCurrentSpeed>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d00c      	beq.n	8009eac <USBH_LL_GetSpeed+0x38>
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d80d      	bhi.n	8009eb2 <USBH_LL_GetSpeed+0x3e>
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d002      	beq.n	8009ea0 <USBH_LL_GetSpeed+0x2c>
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d003      	beq.n	8009ea6 <USBH_LL_GetSpeed+0x32>
 8009e9e:	e008      	b.n	8009eb2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	e008      	b.n	8009eb8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eaa:	e005      	b.n	8009eb8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009eac:	2302      	movs	r3, #2
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e002      	b.n	8009eb8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	bf00      	nop
  }
  return  speed;
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f8 f9db 	bl	8002294 <HAL_HCD_ResetPort>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f903 	bl	800a0f0 <USBH_Get_USB_Status>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	460b      	mov	r3, r1
 8009f02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f7f8 f9e3 	bl	80022da <HAL_HCD_HC_GetXferCount>
 8009f14:	4603      	mov	r3, r0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f1e:	b590      	push	{r4, r7, lr}
 8009f20:	b089      	sub	sp, #36	@ 0x24
 8009f22:	af04      	add	r7, sp, #16
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	4608      	mov	r0, r1
 8009f28:	4611      	mov	r1, r2
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	70fb      	strb	r3, [r7, #3]
 8009f30:	460b      	mov	r3, r1
 8009f32:	70bb      	strb	r3, [r7, #2]
 8009f34:	4613      	mov	r3, r2
 8009f36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009f46:	787c      	ldrb	r4, [r7, #1]
 8009f48:	78ba      	ldrb	r2, [r7, #2]
 8009f4a:	78f9      	ldrb	r1, [r7, #3]
 8009f4c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009f4e:	9302      	str	r3, [sp, #8]
 8009f50:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f5a:	9300      	str	r3, [sp, #0]
 8009f5c:	4623      	mov	r3, r4
 8009f5e:	f7f7 fe0d 	bl	8001b7c <HAL_HCD_HC_Init>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 f8c1 	bl	800a0f0 <USBH_Get_USB_Status>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd90      	pop	{r4, r7, pc}

08009f7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f7 fe90 	bl	8001cc0 <HAL_HCD_HC_Halt>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f8a2 	bl	800a0f0 <USBH_Get_USB_Status>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009fba:	b590      	push	{r4, r7, lr}
 8009fbc:	b089      	sub	sp, #36	@ 0x24
 8009fbe:	af04      	add	r7, sp, #16
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4603      	mov	r3, r0
 8009fca:	70fb      	strb	r3, [r7, #3]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70bb      	strb	r3, [r7, #2]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009fe2:	787c      	ldrb	r4, [r7, #1]
 8009fe4:	78ba      	ldrb	r2, [r7, #2]
 8009fe6:	78f9      	ldrb	r1, [r7, #3]
 8009fe8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009fec:	9303      	str	r3, [sp, #12]
 8009fee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009ff0:	9302      	str	r3, [sp, #8]
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff4:	9301      	str	r3, [sp, #4]
 8009ff6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	4623      	mov	r3, r4
 8009ffe:	f7f7 fe83 	bl	8001d08 <HAL_HCD_HC_SubmitRequest>
 800a002:	4603      	mov	r3, r0
 800a004:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a006:	7bfb      	ldrb	r3, [r7, #15]
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f871 	bl	800a0f0 <USBH_Get_USB_Status>
 800a00e:	4603      	mov	r3, r0
 800a010:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a012:	7bbb      	ldrb	r3, [r7, #14]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd90      	pop	{r4, r7, pc}

0800a01c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a02e:	78fa      	ldrb	r2, [r7, #3]
 800a030:	4611      	mov	r1, r2
 800a032:	4618      	mov	r0, r3
 800a034:	f7f8 f93c 	bl	80022b0 <HAL_HCD_HC_GetURBState>
 800a038:	4603      	mov	r3, r0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b082      	sub	sp, #8
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	460b      	mov	r3, r1
 800a04c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a054:	2b01      	cmp	r3, #1
 800a056:	d103      	bne.n	800a060 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a058:	78fb      	ldrb	r3, [r7, #3]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 f874 	bl	800a148 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a060:	20c8      	movs	r0, #200	@ 0xc8
 800a062:	f7f7 fa33 	bl	80014cc <HAL_Delay>
  return USBH_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
 800a07c:	4613      	mov	r3, r2
 800a07e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a086:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	4613      	mov	r3, r2
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	4413      	add	r3, r2
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	440b      	add	r3, r1
 800a096:	3317      	adds	r3, #23
 800a098:	781b      	ldrb	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00b      	beq.n	800a0b6 <USBH_LL_SetToggle+0x46>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	68f9      	ldr	r1, [r7, #12]
 800a0a2:	1c5a      	adds	r2, r3, #1
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	005b      	lsls	r3, r3, #1
 800a0a8:	4413      	add	r3, r2
 800a0aa:	011b      	lsls	r3, r3, #4
 800a0ac:	440b      	add	r3, r1
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	78ba      	ldrb	r2, [r7, #2]
 800a0b2:	701a      	strb	r2, [r3, #0]
 800a0b4:	e00a      	b.n	800a0cc <USBH_LL_SetToggle+0x5c>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a0b6:	78fb      	ldrb	r3, [r7, #3]
 800a0b8:	68f9      	ldr	r1, [r7, #12]
 800a0ba:	1c5a      	adds	r2, r3, #1
 800a0bc:	4613      	mov	r3, r2
 800a0be:	005b      	lsls	r3, r3, #1
 800a0c0:	4413      	add	r3, r2
 800a0c2:	011b      	lsls	r3, r3, #4
 800a0c4:	440b      	add	r3, r1
 800a0c6:	3305      	adds	r3, #5
 800a0c8:	78ba      	ldrb	r2, [r7, #2]
 800a0ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b082      	sub	sp, #8
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f7 f9f2 	bl	80014cc <HAL_Delay>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d817      	bhi.n	800a134 <USBH_Get_USB_Status+0x44>
 800a104:	a201      	add	r2, pc, #4	@ (adr r2, 800a10c <USBH_Get_USB_Status+0x1c>)
 800a106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a10a:	bf00      	nop
 800a10c:	0800a11d 	.word	0x0800a11d
 800a110:	0800a123 	.word	0x0800a123
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a12f 	.word	0x0800a12f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a11c:	2300      	movs	r3, #0
 800a11e:	73fb      	strb	r3, [r7, #15]
    break;
 800a120:	e00b      	b.n	800a13a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a122:	2302      	movs	r3, #2
 800a124:	73fb      	strb	r3, [r7, #15]
    break;
 800a126:	e008      	b.n	800a13a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a128:	2301      	movs	r3, #1
 800a12a:	73fb      	strb	r3, [r7, #15]
    break;
 800a12c:	e005      	b.n	800a13a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a12e:	2302      	movs	r3, #2
 800a130:	73fb      	strb	r3, [r7, #15]
    break;
 800a132:	e002      	b.n	800a13a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a134:	2302      	movs	r3, #2
 800a136:	73fb      	strb	r3, [r7, #15]
    break;
 800a138:	bf00      	nop
  }
  return usb_status;
 800a13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3714      	adds	r7, #20
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	4603      	mov	r3, r0
 800a150:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a152:	79fb      	ldrb	r3, [r7, #7]
 800a154:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a156:	79fb      	ldrb	r3, [r7, #7]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a15c:	2300      	movs	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]
 800a160:	e001      	b.n	800a166 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a162:	2301      	movs	r3, #1
 800a164:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 800a166:	7bfb      	ldrb	r3, [r7, #15]
 800a168:	461a      	mov	r2, r3
 800a16a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a16e:	4803      	ldr	r0, [pc, #12]	@ (800a17c <MX_DriverVbusFS+0x34>)
 800a170:	f7f7 fc8c 	bl	8001a8c <HAL_GPIO_WritePin>
}
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	48000800 	.word	0x48000800

0800a180 <malloc>:
 800a180:	4b02      	ldr	r3, [pc, #8]	@ (800a18c <malloc+0xc>)
 800a182:	4601      	mov	r1, r0
 800a184:	6818      	ldr	r0, [r3, #0]
 800a186:	f000 b82d 	b.w	800a1e4 <_malloc_r>
 800a18a:	bf00      	nop
 800a18c:	2000002c 	.word	0x2000002c

0800a190 <free>:
 800a190:	4b02      	ldr	r3, [pc, #8]	@ (800a19c <free+0xc>)
 800a192:	4601      	mov	r1, r0
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	f000 b8f5 	b.w	800a384 <_free_r>
 800a19a:	bf00      	nop
 800a19c:	2000002c 	.word	0x2000002c

0800a1a0 <sbrk_aligned>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	4e0f      	ldr	r6, [pc, #60]	@ (800a1e0 <sbrk_aligned+0x40>)
 800a1a4:	460c      	mov	r4, r1
 800a1a6:	6831      	ldr	r1, [r6, #0]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	b911      	cbnz	r1, 800a1b2 <sbrk_aligned+0x12>
 800a1ac:	f000 f8ae 	bl	800a30c <_sbrk_r>
 800a1b0:	6030      	str	r0, [r6, #0]
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	4628      	mov	r0, r5
 800a1b6:	f000 f8a9 	bl	800a30c <_sbrk_r>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d103      	bne.n	800a1c6 <sbrk_aligned+0x26>
 800a1be:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	bd70      	pop	{r4, r5, r6, pc}
 800a1c6:	1cc4      	adds	r4, r0, #3
 800a1c8:	f024 0403 	bic.w	r4, r4, #3
 800a1cc:	42a0      	cmp	r0, r4
 800a1ce:	d0f8      	beq.n	800a1c2 <sbrk_aligned+0x22>
 800a1d0:	1a21      	subs	r1, r4, r0
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	f000 f89a 	bl	800a30c <_sbrk_r>
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d1f2      	bne.n	800a1c2 <sbrk_aligned+0x22>
 800a1dc:	e7ef      	b.n	800a1be <sbrk_aligned+0x1e>
 800a1de:	bf00      	nop
 800a1e0:	20000abc 	.word	0x20000abc

0800a1e4 <_malloc_r>:
 800a1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e8:	1ccd      	adds	r5, r1, #3
 800a1ea:	f025 0503 	bic.w	r5, r5, #3
 800a1ee:	3508      	adds	r5, #8
 800a1f0:	2d0c      	cmp	r5, #12
 800a1f2:	bf38      	it	cc
 800a1f4:	250c      	movcc	r5, #12
 800a1f6:	2d00      	cmp	r5, #0
 800a1f8:	4606      	mov	r6, r0
 800a1fa:	db01      	blt.n	800a200 <_malloc_r+0x1c>
 800a1fc:	42a9      	cmp	r1, r5
 800a1fe:	d904      	bls.n	800a20a <_malloc_r+0x26>
 800a200:	230c      	movs	r3, #12
 800a202:	6033      	str	r3, [r6, #0]
 800a204:	2000      	movs	r0, #0
 800a206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a20a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a2e0 <_malloc_r+0xfc>
 800a20e:	f000 f869 	bl	800a2e4 <__malloc_lock>
 800a212:	f8d8 3000 	ldr.w	r3, [r8]
 800a216:	461c      	mov	r4, r3
 800a218:	bb44      	cbnz	r4, 800a26c <_malloc_r+0x88>
 800a21a:	4629      	mov	r1, r5
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7ff ffbf 	bl	800a1a0 <sbrk_aligned>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	4604      	mov	r4, r0
 800a226:	d158      	bne.n	800a2da <_malloc_r+0xf6>
 800a228:	f8d8 4000 	ldr.w	r4, [r8]
 800a22c:	4627      	mov	r7, r4
 800a22e:	2f00      	cmp	r7, #0
 800a230:	d143      	bne.n	800a2ba <_malloc_r+0xd6>
 800a232:	2c00      	cmp	r4, #0
 800a234:	d04b      	beq.n	800a2ce <_malloc_r+0xea>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	4639      	mov	r1, r7
 800a23a:	4630      	mov	r0, r6
 800a23c:	eb04 0903 	add.w	r9, r4, r3
 800a240:	f000 f864 	bl	800a30c <_sbrk_r>
 800a244:	4581      	cmp	r9, r0
 800a246:	d142      	bne.n	800a2ce <_malloc_r+0xea>
 800a248:	6821      	ldr	r1, [r4, #0]
 800a24a:	1a6d      	subs	r5, r5, r1
 800a24c:	4629      	mov	r1, r5
 800a24e:	4630      	mov	r0, r6
 800a250:	f7ff ffa6 	bl	800a1a0 <sbrk_aligned>
 800a254:	3001      	adds	r0, #1
 800a256:	d03a      	beq.n	800a2ce <_malloc_r+0xea>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	442b      	add	r3, r5
 800a25c:	6023      	str	r3, [r4, #0]
 800a25e:	f8d8 3000 	ldr.w	r3, [r8]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	bb62      	cbnz	r2, 800a2c0 <_malloc_r+0xdc>
 800a266:	f8c8 7000 	str.w	r7, [r8]
 800a26a:	e00f      	b.n	800a28c <_malloc_r+0xa8>
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	1b52      	subs	r2, r2, r5
 800a270:	d420      	bmi.n	800a2b4 <_malloc_r+0xd0>
 800a272:	2a0b      	cmp	r2, #11
 800a274:	d917      	bls.n	800a2a6 <_malloc_r+0xc2>
 800a276:	1961      	adds	r1, r4, r5
 800a278:	42a3      	cmp	r3, r4
 800a27a:	6025      	str	r5, [r4, #0]
 800a27c:	bf18      	it	ne
 800a27e:	6059      	strne	r1, [r3, #4]
 800a280:	6863      	ldr	r3, [r4, #4]
 800a282:	bf08      	it	eq
 800a284:	f8c8 1000 	streq.w	r1, [r8]
 800a288:	5162      	str	r2, [r4, r5]
 800a28a:	604b      	str	r3, [r1, #4]
 800a28c:	4630      	mov	r0, r6
 800a28e:	f000 f82f 	bl	800a2f0 <__malloc_unlock>
 800a292:	f104 000b 	add.w	r0, r4, #11
 800a296:	1d23      	adds	r3, r4, #4
 800a298:	f020 0007 	bic.w	r0, r0, #7
 800a29c:	1ac2      	subs	r2, r0, r3
 800a29e:	bf1c      	itt	ne
 800a2a0:	1a1b      	subne	r3, r3, r0
 800a2a2:	50a3      	strne	r3, [r4, r2]
 800a2a4:	e7af      	b.n	800a206 <_malloc_r+0x22>
 800a2a6:	6862      	ldr	r2, [r4, #4]
 800a2a8:	42a3      	cmp	r3, r4
 800a2aa:	bf0c      	ite	eq
 800a2ac:	f8c8 2000 	streq.w	r2, [r8]
 800a2b0:	605a      	strne	r2, [r3, #4]
 800a2b2:	e7eb      	b.n	800a28c <_malloc_r+0xa8>
 800a2b4:	4623      	mov	r3, r4
 800a2b6:	6864      	ldr	r4, [r4, #4]
 800a2b8:	e7ae      	b.n	800a218 <_malloc_r+0x34>
 800a2ba:	463c      	mov	r4, r7
 800a2bc:	687f      	ldr	r7, [r7, #4]
 800a2be:	e7b6      	b.n	800a22e <_malloc_r+0x4a>
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	42a3      	cmp	r3, r4
 800a2c6:	d1fb      	bne.n	800a2c0 <_malloc_r+0xdc>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	6053      	str	r3, [r2, #4]
 800a2cc:	e7de      	b.n	800a28c <_malloc_r+0xa8>
 800a2ce:	230c      	movs	r3, #12
 800a2d0:	6033      	str	r3, [r6, #0]
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f000 f80c 	bl	800a2f0 <__malloc_unlock>
 800a2d8:	e794      	b.n	800a204 <_malloc_r+0x20>
 800a2da:	6005      	str	r5, [r0, #0]
 800a2dc:	e7d6      	b.n	800a28c <_malloc_r+0xa8>
 800a2de:	bf00      	nop
 800a2e0:	20000ac0 	.word	0x20000ac0

0800a2e4 <__malloc_lock>:
 800a2e4:	4801      	ldr	r0, [pc, #4]	@ (800a2ec <__malloc_lock+0x8>)
 800a2e6:	f000 b84b 	b.w	800a380 <__retarget_lock_acquire_recursive>
 800a2ea:	bf00      	nop
 800a2ec:	20000c00 	.word	0x20000c00

0800a2f0 <__malloc_unlock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	@ (800a2f8 <__malloc_unlock+0x8>)
 800a2f2:	f000 b846 	b.w	800a382 <__retarget_lock_release_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	20000c00 	.word	0x20000c00

0800a2fc <memset>:
 800a2fc:	4402      	add	r2, r0
 800a2fe:	4603      	mov	r3, r0
 800a300:	4293      	cmp	r3, r2
 800a302:	d100      	bne.n	800a306 <memset+0xa>
 800a304:	4770      	bx	lr
 800a306:	f803 1b01 	strb.w	r1, [r3], #1
 800a30a:	e7f9      	b.n	800a300 <memset+0x4>

0800a30c <_sbrk_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d06      	ldr	r5, [pc, #24]	@ (800a328 <_sbrk_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	f7f6 ffea 	bl	80012f0 <_sbrk>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_sbrk_r+0x1a>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_sbrk_r+0x1a>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20000bfc 	.word	0x20000bfc

0800a32c <__errno>:
 800a32c:	4b01      	ldr	r3, [pc, #4]	@ (800a334 <__errno+0x8>)
 800a32e:	6818      	ldr	r0, [r3, #0]
 800a330:	4770      	bx	lr
 800a332:	bf00      	nop
 800a334:	2000002c 	.word	0x2000002c

0800a338 <__libc_init_array>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	4d0d      	ldr	r5, [pc, #52]	@ (800a370 <__libc_init_array+0x38>)
 800a33c:	4c0d      	ldr	r4, [pc, #52]	@ (800a374 <__libc_init_array+0x3c>)
 800a33e:	1b64      	subs	r4, r4, r5
 800a340:	10a4      	asrs	r4, r4, #2
 800a342:	2600      	movs	r6, #0
 800a344:	42a6      	cmp	r6, r4
 800a346:	d109      	bne.n	800a35c <__libc_init_array+0x24>
 800a348:	4d0b      	ldr	r5, [pc, #44]	@ (800a378 <__libc_init_array+0x40>)
 800a34a:	4c0c      	ldr	r4, [pc, #48]	@ (800a37c <__libc_init_array+0x44>)
 800a34c:	f000 f864 	bl	800a418 <_init>
 800a350:	1b64      	subs	r4, r4, r5
 800a352:	10a4      	asrs	r4, r4, #2
 800a354:	2600      	movs	r6, #0
 800a356:	42a6      	cmp	r6, r4
 800a358:	d105      	bne.n	800a366 <__libc_init_array+0x2e>
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a360:	4798      	blx	r3
 800a362:	3601      	adds	r6, #1
 800a364:	e7ee      	b.n	800a344 <__libc_init_array+0xc>
 800a366:	f855 3b04 	ldr.w	r3, [r5], #4
 800a36a:	4798      	blx	r3
 800a36c:	3601      	adds	r6, #1
 800a36e:	e7f2      	b.n	800a356 <__libc_init_array+0x1e>
 800a370:	0800a484 	.word	0x0800a484
 800a374:	0800a484 	.word	0x0800a484
 800a378:	0800a484 	.word	0x0800a484
 800a37c:	0800a488 	.word	0x0800a488

0800a380 <__retarget_lock_acquire_recursive>:
 800a380:	4770      	bx	lr

0800a382 <__retarget_lock_release_recursive>:
 800a382:	4770      	bx	lr

0800a384 <_free_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4605      	mov	r5, r0
 800a388:	2900      	cmp	r1, #0
 800a38a:	d041      	beq.n	800a410 <_free_r+0x8c>
 800a38c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a390:	1f0c      	subs	r4, r1, #4
 800a392:	2b00      	cmp	r3, #0
 800a394:	bfb8      	it	lt
 800a396:	18e4      	addlt	r4, r4, r3
 800a398:	f7ff ffa4 	bl	800a2e4 <__malloc_lock>
 800a39c:	4a1d      	ldr	r2, [pc, #116]	@ (800a414 <_free_r+0x90>)
 800a39e:	6813      	ldr	r3, [r2, #0]
 800a3a0:	b933      	cbnz	r3, 800a3b0 <_free_r+0x2c>
 800a3a2:	6063      	str	r3, [r4, #4]
 800a3a4:	6014      	str	r4, [r2, #0]
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3ac:	f7ff bfa0 	b.w	800a2f0 <__malloc_unlock>
 800a3b0:	42a3      	cmp	r3, r4
 800a3b2:	d908      	bls.n	800a3c6 <_free_r+0x42>
 800a3b4:	6820      	ldr	r0, [r4, #0]
 800a3b6:	1821      	adds	r1, r4, r0
 800a3b8:	428b      	cmp	r3, r1
 800a3ba:	bf01      	itttt	eq
 800a3bc:	6819      	ldreq	r1, [r3, #0]
 800a3be:	685b      	ldreq	r3, [r3, #4]
 800a3c0:	1809      	addeq	r1, r1, r0
 800a3c2:	6021      	streq	r1, [r4, #0]
 800a3c4:	e7ed      	b.n	800a3a2 <_free_r+0x1e>
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	b10b      	cbz	r3, 800a3d0 <_free_r+0x4c>
 800a3cc:	42a3      	cmp	r3, r4
 800a3ce:	d9fa      	bls.n	800a3c6 <_free_r+0x42>
 800a3d0:	6811      	ldr	r1, [r2, #0]
 800a3d2:	1850      	adds	r0, r2, r1
 800a3d4:	42a0      	cmp	r0, r4
 800a3d6:	d10b      	bne.n	800a3f0 <_free_r+0x6c>
 800a3d8:	6820      	ldr	r0, [r4, #0]
 800a3da:	4401      	add	r1, r0
 800a3dc:	1850      	adds	r0, r2, r1
 800a3de:	4283      	cmp	r3, r0
 800a3e0:	6011      	str	r1, [r2, #0]
 800a3e2:	d1e0      	bne.n	800a3a6 <_free_r+0x22>
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	6053      	str	r3, [r2, #4]
 800a3ea:	4408      	add	r0, r1
 800a3ec:	6010      	str	r0, [r2, #0]
 800a3ee:	e7da      	b.n	800a3a6 <_free_r+0x22>
 800a3f0:	d902      	bls.n	800a3f8 <_free_r+0x74>
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	602b      	str	r3, [r5, #0]
 800a3f6:	e7d6      	b.n	800a3a6 <_free_r+0x22>
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	1821      	adds	r1, r4, r0
 800a3fc:	428b      	cmp	r3, r1
 800a3fe:	bf04      	itt	eq
 800a400:	6819      	ldreq	r1, [r3, #0]
 800a402:	685b      	ldreq	r3, [r3, #4]
 800a404:	6063      	str	r3, [r4, #4]
 800a406:	bf04      	itt	eq
 800a408:	1809      	addeq	r1, r1, r0
 800a40a:	6021      	streq	r1, [r4, #0]
 800a40c:	6054      	str	r4, [r2, #4]
 800a40e:	e7ca      	b.n	800a3a6 <_free_r+0x22>
 800a410:	bd38      	pop	{r3, r4, r5, pc}
 800a412:	bf00      	nop
 800a414:	20000ac0 	.word	0x20000ac0

0800a418 <_init>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr

0800a424 <_fini>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr
